
[
    
    
    {
        "url": "/getting-started/",
        "title": "Getting Started",
        "content": "To get started with these OLT vehicles, perform the following scenarios:\n Connect an existing device to the OLT platform: Connecting a Device in 3 Steps\n Get an overview of the OLT portal function you will typicall use when adding devices to your IoT system landscape: Walking Through the OLT Portal, Step by Step\n  "
    }
    
    , 
    {
        "url": "/troubleshooting/faq/",
        "title": "Frequently Asked Questions",
        "content": "  Note: The answers/solutions presented below are short, and may not be note be enough to solve your problem. Visit the Lightelligence Forum and use the search. It that does not help, start a new topic and ask your questions.\n  Issue 1 "
    }
    
    , 
    {
        "url": "/users/",
        "title": "Mapping the OLT Landscape",
        "content": "Map your IoT system landscape.\nIn the Getting Started step of your OLT user journey, you got a technical understanding of the vehicles that can get you to your destination.\nNow, define your goals, map your destinations and choose the people to accompany you on your OLT journey.\n"
    }
    
    , 
    {
        "url": "/troubleshooting/known-issues/",
        "title": "Known Issues",
        "content": " Issue 1 \u0026hellip;\nIssue 2 \u0026hellip;\n"
    }
    
    , 
    {
        "url": "/devices/",
        "title": "Managing the OLT Lifecycle",
        "content": "To connect your actual IoT system landscape to the OLT platform, replicate the processes you implemented in the Getting Started section of your OLT user journey.\nAdd one device after the other, according to the travel plan you have prepared under Mapping the OLT Landscape.\nKeep in touch with the places you have visited during your OLT journey: Monitor your devices and keep their firmware and configurations up-to-date.\n"
    }
    
    , 
    {
        "url": "/security/",
        "title": "Developing Custom Applications",
        "content": "Design your OLT travel experience with custom applications.\nExplore your IoT system landscape(s) and exploit its data resources. As the tour guide of your end users, develop custom applications to shape the lookout points and views on the data that your IoT system landscapes deliver.\nWith custom applications you access the OLT API endpoints (https://api.lightelligence.io/v1/api-collection) and manage them.\n"
    }
    
    , 
    {
        "url": "/applications/",
        "title": "Developing Custom Applications",
        "content": "Design your OLT travel experience with custom applications.\nExplore your IoT system landscape(s) and exploit its data resources. As the tour guide of your end users, develop custom applications to shape the lookout points and views on the data that your IoT system landscapes deliver.\nWith custom applications you access the OLT API endpoints (https://api.lightelligence.io/v1/api-collection) and manage them.\n"
    }
    
    , 
    {
        "url": "/users/roadmap/",
        "title": "Roadmap",
        "content": " TBD "
    }
    
    , 
    {
        "url": "/data/",
        "title": "Processing Data",
        "content": "There are four ways of retrieving the sensor data:\n Device-State / Digital Twin Aggregated Data Raw Data Last 1h  @Turing\n What is the difference between the four ways of retrieving sensor data? What is the typical use-cases? What are the contracts behind each of these endpoints, what are the guarantees? How quick can someone expect an answer? How quick does data show up in the dumps? What role does the device type play?  "
    }
    
    , 
    {
        "url": "/getting-started/testing-shortcodes/",
        "title": "Testing Shortcodes",
        "content": " Todo Syntax Highlighting As markdown grunt.initConfig({ assemble: { options: { assets: \u0026#39;docs/assets\u0026#39;, data: \u0026#39;src/data/*.{json,yml}\u0026#39;, helpers: \u0026#39;src/custom-helpers.js\u0026#39;, partials: [\u0026#39;src/partials/**/*.{hbs,md}\u0026#39;] }, pages: { options: { layout: \u0026#39;default.hbs\u0026#39; }, files: { \u0026#39;./\u0026#39;: [\u0026#39;src/templates/pages/index.hbs\u0026#39;] } } } };  Code Toggle  1\nconfig. yaml\u0026nbsp; toml\u0026nbsp; json\u0026nbsp;  googleAnalytics:UA-123-45   googleAnalytics = \u0026#34;UA-123-45\u0026#34;    { \u0026#34;googleAnalytics\u0026#34;: \u0026#34;UA-123-45\u0026#34; }       2\ntest \r\r 3.\n  With shortcode code, to display copy to clipboard button Requires file name to show copy-to-clipboard button\nlayouts/partials/related.html  \u0026lt; code file=\u0026#34;layouts/partials/related.html\u0026#34; \u0026gt;\r   With shortcode highlight  The shortcode highlight requires a language to be specified.   The shortcode highlight requires e.g. \"curl\" as language attribute toallow `\\` to indicate line breaks in a command.   mosquitto_pub -h mqtt.lightelligence.io \\ -p 8883 --cert device_cert.pem --key device_key.pem \\\r-d -t data-ingest \\ highlight sh, for example {JSON, for example} JSON {\r\u0026#34;data\u0026#34;: [\r{\r\u0026#34;id\u0026#34;: \u0026#34;72fac0d5-fe32-4599-8f9c-a033e42faaa9\u0026#34;,\r\u0026#34;email\u0026#34;: \u0026#34;John.Doe@example.com\u0026#34;,\r\u0026#34;firstName\u0026#34;: \u0026#34;John\u0026#34;,\r\u0026#34;lastName\u0026#34;: \u0026#34;Doe\u0026#34;,\r\u0026#34;userRoles\u0026#34;: [\r{\r\u0026#34;id\u0026#34;: \u0026#34;3100bdf8-90d9-471d-86ae-f7ba9eff0a86\u0026#34;,\r\u0026#34;name\u0026#34;: \u0026#34;owner\u0026#34;,\r\u0026#34;displayName\u0026#34;: \u0026#34;Owner\u0026#34;,\r\u0026#34;description\u0026#34;: \u0026#34;Default owner role with full access to all resources.\u0026#34;,\r\u0026#34;locked\u0026#34;: true\r}\r]\r}\r],\r...\r}\r} JAVA var token = \u0026#39;{TOKEN}\u0026#39;;\rvar tenantId = \u0026#39;{tenantId}\u0026#39;;\rvar userId = \u0026#39;{userId}\u0026#39;;\rvar apiUrl = \u0026#39;https://api.lightelligence.io/v1/tenants/\u0026#39; + tenantId + \u0026#39;/users/\u0026#39; + userId;\r\rvar headers = {\r\u0026#39;Authorization\u0026#39;: \u0026#39;Bearer \u0026#39; + token,\r\u0026#39;Cache-Control\u0026#39;: \u0026#39;no-cache\u0026#39;,\r\u0026#39;Content-Type\u0026#39;: \u0026#39;application/json\u0026#39;\r}; With numbered lines Note: the border disappears and the block doen\u0026rsquo;t expand on hovering over it\n1 2 3 4 5 6 7 8 9 10 11  var token = \u0026#39;{TOKEN}\u0026#39;;\rvar tenantId = \u0026#39;{tenantId}\u0026#39;;\rvar userId = \u0026#39;{userId}\u0026#39;;\rvar apiUrl = \u0026#39;https://api.lightelligence.io/v1/tenants/\u0026#39; + tenantId + \u0026#39;/users/\u0026#39; + userId;\r\rvar headers = {\r\u0026#39;Authorization\u0026#39;: \u0026#39;Bearer \u0026#39; + token,\r\u0026#39;Cache-Control\u0026#39;: \u0026#39;no-cache\u0026#39;,\r\u0026#39;Content-Type\u0026#39;: \u0026#39;application/json\u0026#39;\r};   cURL curl -X GET \\\rhttps://api.lightelligence.io/v1/users/{userId}/tenants \\\r-H \u0026#39;Authorization: Bearer {TOKEN}\u0026#39; \\\r-H \u0026#39;Cache-Control: no-cache\u0026#39; \\\r-H \u0026#39;Content-Type: application/json\u0026#39; Notes Note with \u0026lt;hr\u0026gt;  List item 1.\nNote\nNote text.\n List item m\n  Notes normal  If all you want is a simple menu for your sections, see the \u0026ldquo;Section Menu for Lazy Bloggers\u0026rdquo; in Menu Templates.\n  Note in list, as table  List item 1.\nTip  If all you **want** is a simple link, see [Link](/getting-started/testing-shortcodes/). But with `{{ .Inner | markdownify }}` it won't work. The note text is highlighted as code. With `{{ .Inner }}` the layout is OK but the link and the **bold** characters are not rendered/markdownified. \n   List item 2.\n  Note in list, with horizontal rule  List item 1.\n\u0026lt;hr\u0026gt; indented with tab or 4 spaces doesn\u0026rsquo;t work: everything indented and markdownified is rendered as code:\nIf all you **want** is a simple link, see [Link](/getting-started/testing-shortcodes/). But with `{{ .Inner | markdownify }}` it won't work. The note text is highlighted as code. With `{{ .Inner }}` the layout is OK but the link and the **bold** characters are not rendered/markdownified.   List item 2.\n  Note as table, not indented Tip  If not indented, the note layout and markdown is fine:\nIf all you want is a simple link, see Link.\n   Built-in note shortcode  The built-in note shortcode.\n  Code Code in Normal Text https://api.lightelligence.io/v1/api-collection/#tag/users/paths/~1users~1{userId}/get  some sample code\r   Code in List  Lorem.\nlayouts/partials/related.html  some sample code\r    Ipsum.\n  Setting Up Your Raspberry Pi Prerequisites\nYou have\n a Raspberry Pi with an SD card an SD card reader  This quick start uses macOS in the examples. For instructions about how to install Hugo on other operating systems, see install.\nIt is recommended to have Git installed to run this tutorial. Procedure\n List item 1\nText before quote block.\n Quote block in list item 1\n Text after quote block.\n List item 2\nText before quote block.\n Quote block in list item 2\n Text after quote block.\n List item 3\nText before quote block.\n Quote block in list item 3\n Text after quote block.\n Lorem ipsum dolor sit amet, consetetur sadipscing elitr.\n   Test   Lorem ipsum dolor sit amet, consetetur sadipscing elitr.\n Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat.\nAt vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.\n Lorem ipsum dolor sit amet, consetetur sadipscing elitr.\n Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat.\nAt vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.\n Treas em wankeing ont sime ploked peish rof phen sumbloat syug si phat phey gavet peish ta paat ein pheeir sumbloats.\n   Standard Hugo Note     Lorem ipsum dolor sit amet, consetetur sadipscing elitr.\nSome code  Lorem ipsum dolor sit amet, consetetur sadipscing elitr.\nLorem ipsum dolor sit amet, consetetur sadipscing elitr.\n Lorem ipsum dolor sit amet, consetetur sadipscing elitr.\n Choose Register and enter data as required.\n In the e-mail you receive, activate your account.\nYou go to the Welcome page.\n  Welcome to the LIGHTELLIGENCE® Portal!\n   Choose Create Tenant.\n Choose the Free / Starter plan and enter data as required.\nNote\nYou need a tenant name or ID in the subsequent process.\nTo test the OLT platform within the free plan, for the sake of our example, enter some random data.\nTo create an actual account, familiarize yourself with the multi-tenancy concept and create multiple tenants if required.\nFor more information, see Creating Tenants.\nThe tenant is created.\n  Creating a Tenant: Result\n   Choose Login with new tenant.\n  layouts/partials/related.html  {{$related:=.Site.RegularPages.Related.|first5}}\r{{with$related}}\r\u0026lt;h3\u0026gt;See Also\u0026lt;/h3\u0026gt;\r\u0026lt;ul\u0026gt;\r{{range.}}\r\u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;{{.RelPermalink}}\u0026#34;\u0026gt;{{.Title}}\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt;\r{{end}}\r\u0026lt;/ul\u0026gt;\r{{end}}\r   Result\nYour physical device is running and ready to get connected to the OLT platform.\nNote  This quick start uses macOS in the examples. For instructions about how to install Hugo on other operating systems, see install.\nIt is recommended to have Git installed to run this tutorial.\n  Welcome to the LIGHTELLIGENCE® Portal!\n \n   Step 1: Install Hugo  Homebrew, a package manager for macOS, can be installed from brew.sh. See install if you are running Windows etc.\n  To verify your new install:\nhugo version"
    }
    
    , 
    {
        "url": "/troubleshooting/",
        "title": "Troubleshooting",
        "content": " The Troubleshooting section includes known issues, recent workarounds, and FAQs pulled from the Lightelligence Forum.\n  "
    }
    
    , 
    {
        "url": "/search/",
        "title": "Searching the Docs",
        "content": " Search the documents Begin to search.\n"
    }
    
    , 
    {
        "url": "/maintenance/",
        "title": "Tracking Changes",
        "content": ""
    }
    
    , 
    {
        "url": "/news/",
        "title": "Lightelligence Release Notes",
        "content": "##\n"
    }
    
    , 
    {
        "url": "/getting-started/setting-up-getting-started/",
        "title": "Connecting a Device in 3 Steps",
        "content": " A Raspberry Pi is an ideal companion for the first steps on your journey.\nConnect a Raspberry Pi to the OLT platform in three easy steps:\n Flash an operating system onto a Raspberry Pi. In the OLT portal, register to the OLT platform. Let a Bash script connect your Raspberry PI to the OLT platform and let and display the temperature and the IP address the Raspberry Pi transmits to the OLT platform.  By performing the required activities in the OLT portal and by analyzing what the Bash script does, you get\n a basic technical idea of the OLT concepts and mode of operation orientation in the OLT portal  Setting Up Your Raspberry Pi Prerequisites\nYou have\n a Raspberry Pi with an SD card an SD card reader  Procedure\n Under raspberrypi.org/downloads/raspbian/, download the Raspbian Stretch with desktop and recommended software image and unzip it.\n With a tool like Etcher flash the image to an SD card.\n Put the SD card into your Raspberry PI and power on.\n Adjust the settings and restart.\nSkip the software updates, that would take a while.\n  Result\nYour physical device is running and ready to get connected to the OLT platform.\nRegistering to the OLT platform and Creating a Tenant Create a test tenant in our free plan. You just need an e-mail address.\nProcedure\n Go to the OLT portal under https://portal.lightelligence.io.\n Choose Register and enter data as required.\n In the e-mail you receive, activate your account.\nYou go to the Welcome page.\n  Welcome to the LIGHTELLIGENCE® Portal!\n   Choose Create Tenant.\n Choose the Free / Starter plan and enter data as required.\nNote\nYou need a tenant name or ID in the subsequent process.\nTo test the OLT platform within the free plan, for the sake of our example, enter some random data.\nTo create an actual account, familiarize yourself with the multi-tenancy concept and create multiple tenants if required.\nFor more information, see Creating Tenants.\nThe tenant is created.\n  Creating a Tenant: Result\n   Choose Login with new tenant.\n  Result\nVia the Lightelligence portal, you have access to the OLT platform.\nA user is created by default.\nConnecting Your Raspberry Pi to the OLT platform With a Bash Script As a tenant, you can obtain the information required to connect your Raspberry Pi.\nProcedure\n Log on to your Raspberry PI and start a Web browser.\n Under github.com/ounis/raspberry-pi-device-onboarding, download the raspbiansetup.sh Bash script.\nTo establish communication with the OLT platform, the Bash script does the following:\n Install the MQTT broker Mosquitto Install Python to process sensor and network data Install the Python module paho-mqtt to pass the Python data to Mosquitto  To execute the Bash script, do the following:\n Make it executable: chmod +x raspiansetup.sh. Execute it: ./raspiansetup.sh.  You are prompted to enter some information.\n As the platform URL enter lightelligence.io.\n To obtain the API authentication token, do the following:\n Log on to the OLT portal. Click the tenant you have created.\n  Selecting a Tenant\n   Under Developer Area, copy the authentication token.\n    Displaying the Developer Area\n   Enter your tenant name.\nAlternatively, under Developer Area, copy the tenant ID.\n Specify the network interface.\n If you have connected the Raspberry Pi via WiFi, enter WLAN0. If you have connected it via ethernet, enter eth0.   Result\nWith these 3 steps, your Rasperry Pi is connected to the OLT portal, sending data.\nLet\u0026rsquo;s check it:\n In the OLT portal, choose Devices \u0026amp; Types -\u0026gt; Devices.\n  Displaying the Devices Overview\n   Click the Raspberry Pi that the Bash script has created.\nDevice information and the device status are displayed.\nUnder Configuration, the temperature and ip address sent by your Raspberry are displayed.\n  Displaying the Device Connection Status and Configuration\n    Understanding Device Types The Configuration corresponds to a property of a so-called device type.\nThe Bash script has created the device type. It describes the capabilities of your device.\nIn our example, the capabilities of the Raspberry Pi are to have a temperature and an IP address.\nLet\u0026rsquo;s check:\n To display the device type In the OLT portal, choose Choose Devices \u0026amp; Types -\u0026gt; Device Types.\nYou go to the device types overview.\n  Displaying the Device Types Overview\n   Click the Raspberry Pi device type that the Bash script has created.\nUnder Device Type Information, you find attributes to define device classes.\nUnder Schema, the JSON schema containing the configuration properties is displayed.\nIt defines the ìpaddress and the temperature as configuration properties.\n  Displaying the Device Type Schema\n    In the Managing the OLT Lifecycle chapter of this documentation you will learn how define device types to map your specific IoT system landscape.\nNote\nIgnore the Reporting Rules field for now.\nWe will deal with it in the Storing and Retrieving Sensor Data scenario.\n"
    }
    
    , 
    {
        "url": "/data/get-aggregated-data/",
        "title": "Using Aggregated Data",
        "content": "@tbd\u0026hellip;\n"
    }
    
    , 
    {
        "url": "/users/creating-tenants/",
        "title": "Creating Tenants",
        "content": " What\u0026rsquo;s a Tenant? A tenant is the owner of a system landscape.\nAs a tenant, assign users and roles to manage the system landscape composed of IoT devices.\nUse Cases Create multiple tenants in one of the following cases, for example:\n Your organization manages system landscapes for various customers. Separate tenants help you facilitate the billing process. You manage system landscapes at different sites. Separate tenants can help you to keep the overview of complex system landscapes and monitor devices more efficiently. Alternatively, you can tag the devices according to their site. For reporting reasons, you want to assign tenants to cost centers.   Creating A Tenant Procedure\n Go to the OLT portal under https://portal.lightelligence.io.\n Choose Register and enter data as required.\n In the e-mail you receive, activate your account.\n On the Welcome page, choose Create Tenant.\n Choose the appropriate plan according to your organizational needs and enter data as required:\n Tenant Name: Indicate the location to be connected to the OLT plarform, Northern plant, for example. VAT Registration Number:  Contact Person:     Creating a Tenant\n  The tenant is created.\n  Creating a Tenant: Result\n   Choose Login with new tenant.\n  Result\nYour tenant is displayed. You can select it.\n  Selecting a Tenant\n  Via the OLT portal, you have access to the OLT platform.\nA user with owner role is created by default. Next Steps\nCreate users and assign the required roles to them: Managing Users.\n"
    }
    
    , 
    {
        "url": "/devices/reporting-getting-started/",
        "title": "Storing and Retrieving Sensor Data",
        "content": " You got started with setting up a Raspberry Pi and transmitting configuration data such as the IP address to the OLT platform. See Connecting a Device in 3 Steps.\nBy walking through the process manually, you got an idea of how the elements of the OLT platform interact. see Walking Through the OLT Portal, Step by Step.\nNow we add a new device type, to cover a typical IoT scenario: Storing time series sensor data in the OLT platform, and retrieving the data.\nTo do so, we attach a motion sensor to the Raspberry Pi.\nAgain, we provide you with a Bash script to install software and send the sensor to the OLT platform, automatically.\nThe Bash script creates a device type with a JSON schema containing a property called attributes.\nWe use the configuration property in the first scenario for read/write activities, for example setting the target temperature of a thermostat.\nThe attributes property is for read-only activities, its typical use case is reading sensor data.\nHere we go:\n Use the Bash script to set up your sensor and connect it to the OLT platform.\n To store the sensor data in the OLT platform, enable reporting.\n Simulate an application retrieving the time series data from the OLT platform. To do so, make a GET request to one of the timeseries endpoints of the OLT API.\n  Setting Up Your Sensor Attach a motion sensor to your Raspberry Pi and execute a Bash script to connect it to the OLT platform.\nPrerequisites\n You have connected your Raspberry Pi with the raspiansetup.sh Bash script described under Connecting a Device in 3 Steps.\nWith this scenario, you have installed an MQTT client, Python, and the Python module paho-mqtt on your Raspberry.\n You have attached a sensor to your Raspberry Pi.\nIn our example, we connect a motion sensor HC-SR501 PIR to GPIO pin 4.\n  Procedure\n Ensure that your sensor is connected to your Raspberry Pi.\nIn our example, we connect an HC-SR501 PIR sensor as follows:    Sensor Raspberry Pi     VCC VCC 5V   Out GPIO Pin 4   GND Ground    Under github.com/ounis/raspberry-pi-device-onboarding, download the install_presence.sh Bash script.\nThe script does the following:\n Prompt you to enter your authentication token. Prompt you to enter the tenant name or ID. Create a device in the OLT platform and a corresponding device type. Generate a device key Generate a device certificate. Save a Python program presence.py in the directory created. The Python program passes the sensor data to the OLT platform via MQTT messages. Create a cron job to execute the Python program.  To execute the Bash script, do the following:\n Make it executable: chmod +x raspiansetup.sh. Execute the script: ./raspiansetup.sh.  On request of the Bash script, do the following:\n Enter the platform URL ´lightelligence.io`. Enter the authentication token displayed in in the OLT portal under Developer Area. Enter your tenant name or your tenant ID displayed in in the OLT portal under Developer Area.    Result\nThe Bash script creates a device certificate and sets up the MQTT communication.\nYour Raspberry Pi is now sending the motion sensor\u0026rsquo;s data.\nIf you analyze the Bash script, you see it does so by pushing updates from your device to the server via the mosquitto_pub command:\nmosquitto_pub -h mqtt.lightelligence.io \\\r-p 8883 --cert device_cert.pem --key device_key.pem \\\r-d -t data-ingest \\\r-m \u0026#39;{ \u0026#34;type\u0026#34;: \u0026#34;configuration\u0026#34;, \u0026#34;value\u0026#34;: { \u0026#34;presence\u0026#34;: 1 } } \\\r-V mqttv311 --cafile olt_ca.pem The topic is data-ingest.\nThe payload is the device type property and the current value.\nLet\u0026rsquo;s check:\n In the OLT portal, choose Devices \u0026amp; Types. In the Devices overview, click the presence sensor the Bash script has created.\nThe latest sensor signal is displayed under Status \u0026amp; Diagnosis.\n  Verifying Sensor Data Is Transmitted\n  Note that the sensor data is displayed under Attributes.\nThis corresponds to the attributes Property in the JSON schema the Bash script has created.\n  Displaying attributes Property in the JSON Schema\n   Optional: To verify if your sensor is actually sending data, execute ./presence/presence.py and move the sensor.\n1 means the sensor is detecting motion, 0 means there is no motion.   Enabling Reporting So far, we have connected the sensor to the OLT platform. That means we get the latest sensor reading.\nBut our use case is to store the sensor data in the OLT platform and retrieve times series data from the OLT platform.\nTo store the data, activate reporting in the corresponding device type.\nProcedure\n Open the device type, in our example the device type corresponding to the motion sensor.\n Under Reporting Rules, choose Edit.\n Insert the following reporting rule:\n[\r{\r\u0026#34;path\u0026#34;: \u0026#34;$.attributes.presence\u0026#34;,\r\u0026#34;reportTo\u0026#34;: [\r\u0026#34;timeseries\u0026#34;\r]\r}\r]\r A reporting rule is composed of a JSON Path and a reportTo property.   Editing Reporting Rules\n    Result\nYour motion sensor data is stored in the OLT platform. Let\u0026rsquo;s verify this in the last step.\nRetrieving Time Series Data Simulate an application access your sensor data stored in the OLT platform.\nTo get, for example, the last hour of the sensor\u0026rsquo;s time series data, make a GET request to the /v1/devices/{deviceId}/last-timeseries endpoint.\nProcedure\n To obtain the motion sensor\u0026rsquo;s device ID, choose Devices \u0026amp; Types.\nThe ID is displayed in the device oveview.\n  Displaying Device IDs\n   Obtain the authentication token under Developer Area.\n Provide the query parameter path to make the request, in our example path=$.attributes.presence.\nEnsure that the request is URL-encoded, as in the following cURL example.\ncurl -X GET \\\r\u0026#34;https://api.lightelligence.io/v1/devices/c42ff2fb-007f-4bd4-ac05-c4e610f34895/last-timeseries?path=%24.attributes.presence\u0026#34; \\\r-H \u0026#39;Authorization: Bearer {authenticationToken}\u0026#39; \\\r-H \u0026#39;Cache-Control: no-cache\u0026#39; \\\r-H \u0026#39;Content-Type: application/json\u0026#39;\r  Result\nYour sensor data is retrieved.\n  Retrieving Time Series Data\n  Note\nThe time stamp format is Coordinated Universal Time (UTC).\n"
    }
    
    , 
    {
        "url": "/data/generating-timeseries-dumps/",
        "title": "Generating Time Series Data Dumps",
        "content": "@tbd\n"
    }
    
    , 
    {
        "url": "/devices/actions-getting-started/",
        "title": "Executing Commands on Devices",
        "content": " Besides reading sensor data, executing commands on devices is another basic IoT use case.\nSo, let\u0026rsquo;s write values to devices, to trigger actions.\nIn the JSON schema of a device type, we have another dedicated property for this, actions.\nWhile the attributes property is read-only, the actions property is write-only.\nActions are commands that a device can execute.\nIn the following example light up an RGB LED by sending a certain color code in 2 steps:\n Use the Bash script to set up your RGB LED and connect it to the OLT platform. Simulate an application lighting up the LED. To do so, make a POST request to the /devices/{deviceId}/actions MQTT endpoint.  Setting Up Your LED Attach an RGB LED to your Raspberry Pi and execute a Bash script to connect it to the OLT platform.\nPrerequisites\nYou have connected your Raspberry Pi with the raspiansetup.sh Bash script described under Connecting a Device in 3 Steps.\nWith this scenario, you have installed an MQTT client, Python, and the Python module paho-mqtt on your Raspberry.\nProcedure\n Attach a 4-pin RGB-LED to your Raspberry Pi.\nIn our example, we map the GPI pins as follows:\n   LED Raspberry Pi     Red GPIO Pin 23   Cathode Ground   Green GPIO Pin 24   Blue GPIO Pin 25    Under github.com/ounis/raspberry-pi-device-onboarding, download the install_rgb.sh Bash script.The bash script does the following:\n Prompt you to enter your authentication token. Prompt you to enter the tenant name or ID. Create a device in the OLT platform and a corresponding device type. Generate a device key Generate a device certificate. Save a Python program rgb.py in the directory created. The Python program passes the action data from the OLT platform to the device via MQTT messages Create a cron job to execute the Python program Subscribe your device to the MQTT endpoint of the OLT platform  To execute the Bash script, do the following:\n Make it executable: chmod +x install_rgb.sh. Execute the script: ./install_rgb.sinstall_rgb.  On request of the Bash script, do the following:\n Enter the platform URL ´lightelligence.io`. Enter the authentication token displayed in in the OLT portal under Developer Area. Enter your tenant name or your tenant ID displayed in in the OLT portal under Developer Area.   Result\nYour Raspberry Pi is now able to receive actions from the OLT platform.\nWhen you inspect the script, you will see its purpose is to connect your device to the MQTT endpoint of the OLT platform.\nTo do so, it subscribes the Raspberry Pi to the devices/{deviceId}/actions MQTT topic:\nmosquitto_sub -h mqtt.lightelligence.io \\\r-p 8883 --cafile olt_ca.pem --cert device_cert.pem --key device_key.pem \\\r-V \u0026#34;mqttv311\u0026#34; -t \u0026#39;devices/{deviceId}/actions\u0026#39; \\\r-d Also, the Bash script has created the following:\n a device type with a JSON schema containing the actions property.\n  Editing the actions Property\n   a digital twin associated with the device type.\n  Triggering an Action on Your Device Trigger an action on your device.\nTo do so, make a POST request to the /devices/{deviceId}/actions MQTT endpoint, as in the following cURL example.\nTo light up the LED in blue, use the following message, for example:\ncurl -X POST \\\r\u0026#34;https://api.lightelligence.io/v1/devices/383b8c61-a9c7-487f-b4e1-66fad753e546/actions\u0026#34; \\\r-H \u0026#39;Authorization: Bearer {authenticationToken}\u0026#39; \\\r-H \u0026#39;Cache-Control: no-cache\u0026#39; \\\r-H \u0026#39;Content-Type: application/json\u0026#39; \\\r-d \u0026#39;{ \u0026#34;action\u0026#34;: \u0026#34;ambientLight\u0026#34;,\r\u0026#34;payload\u0026#34;: {\r\u0026#34;r\u0026#34;: 0,\r\u0026#34;g\u0026#34;: 0,\r\u0026#34;b\u0026#34;: 1\r},\r\u0026#34;description\u0026#34;: \u0026#34;Switch on blue light\u0026#34;\t}\u0026#39; Result\nAn action ID is generated ({\u0026quot;data\u0026quot;:{\u0026quot;actionId\u0026quot;:\u0026quot;5895f5f0-93e9-428c-a4b6-580eb814f11e\u0026quot;}}, for example).\nThe LED is switched on. In our example, it lights up blue.\n  Triggering an Action\n  You have successfully forwarded an action to your device.\n"
    }
    
    , 
    {
        "url": "/users/managing-users/",
        "title": "Managing Users",
        "content": " Understanding the Role Concept When creating a tenant, a default user is created whose role is owner.\nThe owner owns the tenant and has no restrictions in the OLT portal.\nOwners can assign the following roles to users:\n A writer is not authorized to manage the tenant data.\nWriters can, for example\n develop applications manage the solution by defining device types or creating devices   A reader is not authorized to manage the solution. Readers can read data, for example.\n  As the owner, you have, for example, the following options:\n Create additional owners to manage the tenant.\nTo do so, invite a user and assign the owner role.\n Invite users and assign roles\n Assign users to a tenant\n List the tenants assigned to a user\n  The owner role implies the writer role permissions. The writer role implies the reader role permissions.\nNote\nRestricted owner permissions in custom applications\nFor security reasons, unrestricted access as an owner is only possible in the OLT portal.\nIf you develop custom applications, you can\u0026rsquo;t access endpoints related to user management even if your user has the owner role.\nFor more information, see Developing Custom Applications.\nInviting Users As the tenant owner, create new users by inviting them to the tenant.\nPrerequisites\nTo be able to accept your invitation, users must have created an account in the portal.\nProcedure\n If the user is new to the OLT platform, ask the user to create an account, to be able to accept the invitation.\nTo do so, ask the user to go to https://portal.lightelligence.io and choose Register.\n In the OLT portal, choose Users.\n Choose Invite User.\n Enter data as required.\n To confirm, choose Invite to tenant.\n  Result\nThe invited user appears on the Pending tab.\nThe user receives an invitation e-mail with a link directing to the OLT portal.\nOn logging on to the portal, the user is asked to accept the invitation.\nAssigning or Changing Roles As a user with the owner role, assign roles to users or change the roles.\nProcedure\n As a user with owner authorization, log on to the OLT portal.\n To edit the roles, click the user.\nYou go to the Edit User window.\n Select the required roles and confirm.\n  "
    }
    
    , 
    {
        "url": "/getting-started/connectivity-getting-started/",
        "title": "Walking Through the OLT Portal, Step by Step",
        "content": " In the first scenario, our Bash script connects an existing device to the OLT platform automatically, in our example a Raspberry Pi.\nNow we describe how you would connect a device manually.\nThe process gives you\n an idea of the components of a solution, especially how we guarantee secure communication an overview of the OLT portal functions  The OLT platform talks MQTT with the devices attached, so we want to achieve that your device exchanges MQTT messages with the OLT platform.\nTo verify the connection works you\u0026rsquo;ll send a sample MQTT message to the OLT platform manually.\nThe process does the the same as our Bash script.\nCreating a Device Type The following procedure is equivalent to the POST request to the /device-types endpoint in our Bash script.\nProcedure\n Log on to the OLT portal. Click the tenant you have created. Under Devices \u0026amp; Types, choose Device Types. Choose Create Device Type. Enter data as required. In our example, enter \u0026ldquo;Raspberry Pi\u0026rdquo; as the device type name.\n Choose Proceed to Parameters. In the Configurations, Attributes and Actions field, add the following sample configuration parameter ipaddress.\nNote\nIgnore the Reporting Rules field for now.\nWe will deal with it in the Storing and Retrieving Sensor Data scenario.\n{\r\u0026#34;attributes\u0026#34;: {},\r\u0026#34;configuration\u0026#34;: {\r\u0026#34;ipaddress\u0026#34;: {\r\u0026#34;type\u0026#34;: \u0026#34;string\u0026#34;}\r},\r\u0026#34;actions\u0026#34;: {}\r}\r   Defining a Device Type Schema\n   To confirm, choose Create Device Type.\nThe device type is displayed on the Device Types tab.\nAt the moment, the content doesn\u0026rsquo;t matter. We just need any device type.\n  Creating a Device In the OLT platform, create a digital twin of your device based on the device type created.\nThe following procedure is equivalent to the POST request to the /devices endpoint in our Bash script.\nProcedure\n Under Devices \u0026amp; Types | Devices, choose Create Device. Select the device type you have created under Creating a Device Type and choose Proceed to Device. Describe the device. In our example, enter \u0026ldquo;Raspberry Pi\u0026rdquo; as the device name.\nNote\nIn a production system, metadata like name, location, description and tags help you to monitor and maintain the devices in your system landschape.\nFor more information, see Managing Devices.\n To confirm, choose Create Device.\n Choose Skip.\nWhy skip?\nYou don\u0026rsquo;t have a device certificate yet. You\u0026rsquo;ll create it in the next step and perform the skipped step later (under Register the Device To the OLT Platform).\nBut to create the device certificate, you need the device name or ID in the first place.\n  Result\nThe device name and ID are displayed.\n  Displaying the Device ID\n  Generating a Device Certificate Create a unique SSL/TLS client certificate for your device.\nDuring the TLS handshake between your device and the platform, the platform uses the device certificate to identify and authenticate your device.\nIn our example, use the OpenSSL command line utility to create a self-signed device certificate for your Raspberry PI.\nThe following procedure is equivalent to the POST request to the /devices endpoint in our Bash script.\nProcedure\n Create a directory in which to create the device certificate. To create a private key to sign the device certificate to be generated, execute openssl ecparam -out device_key.pem -name prime256v1 -genkey.\nA file called device_key.pem containing the private key is in your directory.\n Create a device certificate and sign it with the private key generated.\nProceed as follows:\n Obtain the following information:\n Look up the tenant ID under Developer Area or the tenant name on the Tenant Selection page.     Displaying the Tenant ID in the Developer Area\n   Look up the device name or the device ID displayed under Devices \u0026amp; Types | Devices.  Use the -subj parameter to insert the information in the following command: openssl req -new -key device_key.pem -x509 -days 365 -out device_cert.pem -subj '/O=\u0026lt;Tenant ID\u0026gt;/CN=\u0026lt;Device ID\u0026gt;' and execute the command.\nExample: req -new -key device_key.pem -x509 -days 365 -out device_cert.pem -subj '\\O=Sample-Tenant\\CN=Sample-Device'\n   Result\nThat\u0026rsquo;s it! The device certificate is in your directory.\n  Displaying the Device Certificate\n  Registering the Device to the OLT Platform Enter the device certificate you have created under Generating a Device Certificate.\nProcedure\n Open the device certificate. In the OLT portal, paste the device certificate content into the Certificates field.   Adding the Device Certificate\n   To confirm, choose Save.  Result\nThe device is registered to the OLT platform.\nThe device certificate status is displayed.   Displaying the Device Certificate Status\n  Congrats! Your device is now able to talk to OLT platform.\nTurning Your Device into a Mosquitto Client The OLT platform talks MQTT (Message Queue Telemetry Transport).\nSo next you turn your device into an MQTT client. To establish the connection to the cloud, install Mosquitto, for example.\nProcedure  To install Mosquitto, follow the guidelines for your operation system under https://www.eclipse.org/mosquitto/download/. Copy and paste the certificate below into a file named olt_ca.pem and you are ready to go. /getting-started/connectivity-getting-started/   -----BEGIN CERTIFICATE-----\rMIICBzCCAaygAwIBAgIBADAKBggqhkjOPQQDAjBcMQswCQYDVQQGEwJERTEOMAwG\rA1UEChMFT1NSQU0xDDAKBgNVBAsTA09MVDEvMC0GA1UEAxMmT1NSQU0gT0xUIERl\rdmljZVNlcnZpY2VzIFRydXN0QW5jaG9yIDEwIBcNMTgwNjEyMTU1NTMwWhgPMjA1\rODA2MTIxNTU1MzBaMFwxCzAJBgNVBAYTAkRFMQ4wDAYDVQQKEwVPU1JBTTEMMAoG\rA1UECxMDT0xUMS8wLQYDVQQDEyZPU1JBTSBPTFQgRGV2aWNlU2VydmljZXMgVHJ1\rc3RBbmNob3IgMTBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABIRHefdjW8eKPEpi\rRV88sqk/7nqOIDdg4v2KcIsX8LQD94YGkDEDO4Alg3EdtibTXMtztbSiRMmy/BeB\r7Fmbr\u0026#43;KjXTBbMB0GA1UdDgQWBBQmEJ8uur\u0026#43;FfHaFxDYw1oeYNu1M6TAfBgNVHSME\rGDAWgBQmEJ8uur\u0026#43;FfHaFxDYw1oeYNu1M6TAMBgNVHRMEBTADAQH/MAsGA1UdDwQE\rAwIBBjAKBggqhkjOPQQDAgNJADBGAiEA1dAeBWcIDUyOzuQSzhO0cajg3mZfiHp/\rNwryIKRR9fgCIQDKqKmKv1STjPEePu4NL2YEqsVauaVl4CVQIYVjEwN3cw==\r-----END CERTIFICATE-----\r    Ensure that the following files are in your Mosquitto directory:  device_cert.pem device_key.pem olt_ca.pem   Verifying Your Device Can Communicate with the OLT Platform Send a message from your device to the OLT platform.\nUnder Creating a Device Type you have defined a device type schema specifying a configuration parameter called ipaddress whose data type is string.\nVia an MQTT message, send a random IP address, 192.168.1.1, for example.\nThen check whether the IP address has actually been sent to the OLT platform.\nProcedure\nTo change the configuration in the OLT platform, enter the following command:\nmosquitto_pub -h mqtt.lightelligence.io \\ -p 8883 --cert device_cert.pem --key device_key.pem \\\r-d -t data-ingest \\\r-m \u0026#39;{ \u0026#34;type\u0026#34;: \u0026#34;configuration\u0026#34;, \u0026#34;value\u0026#34;: { \u0026#34;ipaddress\u0026#34;: \u0026#34;192.168.1.1\u0026#34; } }\u0026#39; \\\r-V mqttv311 --cafile olt_ca.pem The command is composed of the following components:\n mqtt.lightelligence.io is the address of the OLT platform you want to connect to. mqttv311 is the protocol to be used. cafile is the OLT certificate of the Certificate Authority that has issued the TLS certificate of the OLT platform\u0026rsquo;s MQTT service. { \u0026quot;type\u0026quot;: \u0026quot;configuration\u0026quot;, \u0026quot;value\u0026quot;: { \u0026quot;ipaddress\u0026quot;: \u0026quot;192.168.1.1\u0026quot; } } is the MQTT message containing the configuration change you want to publish for your device.   Result\nYour output is similar to the one below:\nClient mosqpub/9736-W541 sending CONNECT\rClient mosqpub/9736-W541 received CONNACK\rClient mosqpub/9736-W541 sending PUBLISH (d0, q0, r0, m1, \u0026#39;data-ingest\u0026#39;, ... (51 bytes))\rClient mosqpub/9736-W541 sending DISCONNECT   Sending an MQTT Message\n  The updated configuration is displayed in the OLT portal, under Status \u0026amp; Diagnostics.   Displaying the Updated Configuration\n  Result\nCongrats! You have connected your device to the OLT platform.\nYou have a detailed idea of our Bash script enabled your Raspberry PI to talk with the OLT platform via encrypted messages.\n"
    }
    
    , 
    {
        "url": "/data/querying-times-series-data/",
        "title": "Querying Times Series Data",
        "content": "Apply multiple filters to your time series data.\nWith a single API call, get data from multiple devices.\nUse cases: Obtain data\n from devices connected to a specific gateway from devices of a certain category @tbd: link to chapter device type - Assigning categories from devices with specific tags @tbd: link to chapter Devices - Assigning tags  @tbd: Jewgeni\n"
    }
    
    , 
    {
        "url": "/users/creating-custom-roles/",
        "title": "Defining Custom Roles",
        "content": " Custom Roles and Permissions for Applications By default, the OLT platform checks whether a user has the read or write OLT permission to access a specific endpoint.\nWith custom applications, you access the OLT API endpoints. With custom roles, you can assign custom permissions to control on a more granular level what a user is allowed to do with a custom application.\nSo, a part of designing custom applications is to determine whether you wish to define custom roles.\nIf you decide to implement a custom role concept and to develop custom applications that implement custom permissions, follow the instructions under Defining Custom Permissions and Roles.\n"
    }
    
    , 
    {
        "url": "/devices/synchronizing-device-configurations/",
        "title": "Synchronizing Device Configurations",
        "content": "  The config sync process is still under discussion: This chapter is a placeholder.\n ____ Begin Notes 20190611:\n@José: config subject is changing fast; is going to be discussed with Michael \u0026ndash; 2nd way of updating will not be implemented: 4.20\nconfig changes come from OLT to the adapter; same logic as with actions: gateway knows which adapter this device for this change belongs to gateway roots the config to the corresponding adapter, adapter roots config to field device\nvalidate values and post them if changed: not yet finished in SDK\nanalogous to actions: OLT routes to gateway, sends action with payload, info is posted to gateway that is referenced by connectdBy attribute. Gateway routes to adapter. Adapter routes to field device using the specific field device communication.\na gateway can have any number of apps in form of adapters\n2 configurations: for\n polling: minimum/max period and chache value that can be set for every attribute\n event-based\n  As for Config update: 1. subscribe it to the devices/{deviceId}/configuration topic 2. To actually trigger the configuration change, implement a PATCH request to the /devices/{deviceId} endpoint\nWhen gateway has an adapter and the adapter creates a device\nWhen I write an adapter, I make calls only to the gateway\nGateway has 2 API: * HTTP * MQTT\na kind of mini OLT runs in the Gateays: acts as a filter, man in th emiddle to decide what gets posted and to route information back\ngateway needs adapter, only adapter can route action back to the device\nThe Adapter can talk to both the gateway and the field protocol it manages\nE.g. BLE adapter: if config change in gateway, gateway knows the device corresponds to BLE adapter, sends config update to adapter, adapter passes the configuration to the device and reports back to OLT to acknowledge that config has actually changed\nOn creating a device I get an MQQT configuration update message at the gateway with the configuration used to create the device.\nThen, this config update message is processed as if it had been received later, by just parsing the configuration by the appropriate processing and then the ackknowledgement.\n____ End Notes 20190611\nLet\u0026rsquo;s now change configuration data, in the following example a thermostat\u0026rsquo;s target temperature.\nThe associated device type property is configuration. You employed it to read network and sensor data when you connected your first device (see Connecting a Device in 3 Steps):\nA configuration change is bi-directional: In our example write a new target temperature to the device. And we read the configuration, to verify changes or monitor the configuration.\nSynchronizing Configuration Data @Jose, our virtual adapter implements two ways to change configuration data:\n Send either start or stop update action to the device, in this case start/stop incrementing a counter (generated in lieu of sensor data, for example): stop = value not incremented and not posted or Write new config value \u0026ldquo;update values\u0026rdquo; to the device in OLT, then send action to reload config action: it will grab the config from OLT and adapt adapter behavior.  @José: Is there a real-world use case behind the alternative?\nProcedure\n Inspect the device communication\nUse, for example, the Firefox console (Crtl+Shift+K) to inspect the HTTP requests the device\u0026rsquo;s web client sends to the device.\nThe following example inspects the status and configuration of a thermostat and a shutter contact controlled by a gateway.\n  Inspecting the Device Communication in the Firefox Console\n   In the OLT portal, create the device type.\n Classify the relevant data and apply the JSON schema properties accordingly:\n Use the attributes property to read and store sensor data, in our example the current temperature (currentAutoTemperature).\nYou are familiar with the attributes property from the Storing and Retrieving Sensor Data in 3 Steps scenario.\n Assign the target temperature to the configuration property. Define, for example, a setPointTemperature property.\nThe configuration property is intended for read/write data.\n Assign the battery status or the connection status, for example, to the event property.\n  You are familiar with the event property from the Monitoring Devices and Alerting scenario.\n   @tbd: event is currently fixed type, e.g. \u0026ldquo;overheated\u0026rdquo;; it\u0026rsquo;s under discussion\n JSON Schema Example Thermostat: ```JSON { \u0026quot;attributes\u0026quot;: { \u0026quot;currentAutoTemperature\u0026quot;: { \u0026quot;type\u0026quot;: \u0026quot;number\u0026quot;}, }, \u0026quot;configuration\u0026quot;: { \u0026quot;setPointTemperature\u0026quot;: { \u0026quot;type\u0026quot;: \u0026quot;number\u0026quot;}, \u0026quot;temperatureOffset\u0026quot;: { \u0026quot;type\u0026quot;: \u0026quot;number\u0026quot;} }, \u0026quot;event\u0026quot;: { \u0026quot;batteryLow\u0026quot;: { \u0026quot;type\u0026quot;: \u0026quot;boolean\u0026quot;}, \u0026quot;transmitError\u0026quot;: { \u0026quot;type\u0026quot;: \u0026quot;boolean\u0026quot;}, }, \u0026quot;stateInfo\u0026quot;: { \u0026quot;type\u0026quot;: \u0026quot;string\u0026quot;}, }, \u0026quot;radioState\u0026quot;: { \u0026quot;type\u0026quot;: \u0026quot;string\u0026quot;}, } } ``` 2. Enable reporting for the relevant `attributes`. @José:would one also write the events to the database, in our case the battery status? (\u0026quot;and `event` properties\u0026quot;?) @José -- if it makes sense to store event data, would I define the reporting rule the same way as with attributes?: events are under discussion. not yet clear what granularity we need for the timeseries; ```JSON { \u0026quot;path\u0026quot;: \u0026quot;$.attributes.currentAutoTemperature\u0026quot;, \u0026quot;reportTo\u0026quot;: [ \u0026quot;timeseries\u0026quot; ] }, { \u0026quot;path\u0026quot;: \u0026quot;$.event.batteryLow\u0026quot;, \u0026quot;reportTo\u0026quot;: [ \u0026quot;timeseries\u0026quot; ] } ``` 3. Implement a process to store and retrieve the sensor data and process event data.   To write new configuration to the device, in our example, set the target temperature to 21, do the following.\n To enable your thermostat to receive configuration updates, subscribe it to the devices/{deviceId}/configuration topic:\nmosquitto_sub -h mqtt.lightelligence.io \\ -p 8883 --cafile olt_ca.pem --cert device_cert.pem --key device_key.pem \\ -V \u0026#34;mqttv311\u0026#34; -t \u0026#39;devices/{deviceId}/configuration\u0026#39; -d  The thermostat now listens for configuration changes.\n To actually trigger the configuration change, implement a PATCH request to the /devices/{deviceId} endpoint.\nYour request contains the configuration name and its payload in the request body, in our example setPointTemperature and the new target temperature 21.\ncurl -X PATCH \\ https://api.lightelligence.io/v1/devices/{deviceId} \\ -H \u0026#39;Authorization: Bearer {TOKEN}\u0026#39; \\ -H \u0026#39;Cache-Control: no-cache\u0026#39; \\ -H \u0026#39;Content-Type: application/json\u0026#39; \\ -d \u0026#39;{ \u0026#34;configuration\u0026#34;: { \u0026#34;setPointTemperature\u0026#34;: 21 } }\u0026#39;  Result: When you\u0026rsquo;ve performed the device configuration change, on your device you receive an MQTT message similar to the following:\n@tbd: verify\n{ \u0026#34;deviceId\u0026#34;: \u0026#34;{deviceId}\u0026#34;, \u0026#34;configuration\u0026#34;: { \u0026#34;setPointTemperature\u0026#34;: 21 } } This updates your device\u0026rsquo;s internal configuration according to its digital twin in the cloud.\n Implement a process to verify the configuration change.\nTo do so, use an MQTT message to the data-ingest topic. The process is analogous to processing sensor data as described under Storing and Retrieving Sensor Data:\nmosquitto_pub -h mqtt.lightelligence.io \\ -p 8883 --cert device_cert.pem --key device_key.pem \\ -d -t data-ingest \\ -m '{ \u0026quot;type\u0026quot;: \u0026quot;configuration\u0026quot;, \u0026quot;value\u0026quot;: { \u0026quot;setPointTemperature\u0026quot;: setPointTemperature } }' \\ -V mqttv311 --cafile olt_ca.pem  Note\nQuality of Service (QoS)\nThe OLT platform supports the QoS levels 0 and 1.\n  @José: In case of actions and config changes, Problem: How the device acknowledge the change? \u0026ndash; why would we use a reload confic action instead of sending an MQTT message to the data-ingest topic as above?\nSo use action (to be included in the SDK as a standard feature): ReloadConfiguration Re: Adapter reads new configuration from OLT and do changes accordingly\nrequest to the devices/{deviceID}/actions endpoint\nExample:\ncurl -X POST \\  https://api.lightelligence.io/v1/devices/b3ec0d14-6ad5-4dbd-90ee-be019b1aae62/actions \\  -H \u0026#39;Accept: application/json\u0026#39; \\  -H \u0026#39;Content-Type: application/json\u0026#39; \\  -H \u0026#39;Postman-Token: b09d74b9-063d-47a6-8d77-af558045b0d4\u0026#39; \\  -H \u0026#39;cache-control: no-cache\u0026#39; \\  -d \u0026#39;{ \u0026#34;action\u0026#34;: \u0026#34;ReloadConfiguration\u0026#34;, \u0026#34;payload\u0026#34;: {}"
    }
    
    , 
    {
        "url": "/data/streaming-data/",
        "title": "Streaming Data",
        "content": " @Team Turing\n What is the outbound streaming meant to be used for? How can it be used in a browser? How can it be used in a backend? What are the limitations? What does the user need to know when using the websocket connection (i.e. retries)  Setting Up Websocket Streaming @tbd\nIncluding Filters in Websocket Streaming Use cases:\n Filter by device type Filter by tag  @tbd: @Jewgeni?\n"
    }
    
    , 
    {
        "url": "/devices/monitoring-devices/",
        "title": "Monitoring Devices and Alerting",
        "content": " \u0026lt; The event-ingest process is still under discussion: This chapter is a placeholder. \u0026gt;\nBegin Notes 20190611:\nNote: it\u0026rsquo;s being discussed whether the event type is fixed modeled like attributes, allowing to pass values.\n@José: Eventdef: does not have type events: { ‘greatEvent’: {} }\nraw docu as of 20190611:\nhttps://lightelligence.atlassian.net/wiki/spaces/OCP/pages/97419311/MQTT+Messages :\nPayload example:\n{ \u0026ldquo;deviceId\u0026rdquo;: \u0026ldquo;123e4567-e89b-12d3-a456-426655440000\u0026rdquo;, \u0026ldquo;type\u0026rdquo;: \u0026ldquo;overheated\u0026rdquo;, \u0026ldquo;createdAt\u0026rdquo;: \u0026ldquo;2015-08-04T19:05:14.318570484Z\u0026rdquo; }\nnew time attribute createdAt type hardcoded: under discussion whether it should be fixed or whether payloud should be possible.\noverheating event: temperature payload data would make sense\n@José: if I understand it correctly, the following applies both to events and attributes? the difference being event-ingest vs. data-ingest.\n2 configurations: for\n polling: minimum/max period and chache value that can be set for every attribute to manage how the information is stored in OLT  polling: query device every x seconds\nIf chache is enabled: only changed values will be posted.\nPolling use case: e.g. steinel only allows polling: polling webpage in JSON format: is posted;\nUse polling if field device protocol does not support event-based communication, , e.g. DALI\n event-based: preferred way to structure adapter: it consumes less resources, is more efficient  device initiates event, sends event to adapter: subscribe to topic; notifications are sent if values change\ne.g. bluetooth low energy (BLE): subscribe to a topic (characteristics) you get notifications if values of charactersitics change Adapter: set up listener for notifications to arrive a field BT adapter (hardware) adapter re-posts events from BT hardware\nthe mechanism is implemented in the protocol: no need to pull\nmixed use cases: event-based for some features for others might necessary\n@José: reportingTime should be configurable in the OLT portal, analogously to reporting rules, for example, correct?\nExample: reporting time object\nreportingTime: [{ path: '$.attributes.ReadAttribute', pmin: 1, pmax: 1, usecache: false }]  @José: check my interpretations:\nMax: value will be re-posted if max value is reached, Min: value will be re-posted at least every n units of time? Or: shortest period of time the value can be refreshed ( at least n units of time must have passed)? Cache: same value re-posted or not\n@José: is cache =true/false independent of pmin/pmax? Or are the interdependent?\nattrs.pmin = _.isNumber(attrs.pmin) ? attrs.pmin : qn.so.get('lwm2mServer', 0, 'defaultMinPeriod'); attrs.pmax = _.isNumber(attrs.pmax) ? attrs.pmax : qn.so.get('lwm2mServer', 0, 'defaultMaxPeriod'); attrs.mute = _.isBoolean(attrs.mute) ? attrs.mute : true; attrs.cancel = _.isBoolean(attrs.cancel) ? attrs.cancel : true; attrs.lastRpVal = attrs.lastRpVal || null; attrs.usecache = _.isBoolean(attrs.usecache) ? attrs.usecache : false;  ____ End Notes 20190611\nImplement funnctions to monitor your devices and create alert.\nFor this, the OLT platform provides the event device type property ant the associated event-ingest MQTT topic.\nReading Status Data Let\u0026rsquo;s take a shutter contact as an example.\nIn this simple example, the relevant properties in the device type JSON schema are attributes for sensor data and events for one-time events.\nProcedure\n If your existing solution or a new device you want integrate doesn\u0026rsquo;t have an API documentation, intercept the communication.\nUse, for example, the Firefox console (Crtl+Shift+K) to inspect the HTTP requests the device\u0026rsquo;s web client sends to the device.\nThe following example inspects the status and configuration of a thermostat and a shutter contact controlled by a gateway.\n  Inspecting the Device Communication in the Firefox Console\n   Classify the relevant data and apply the JSON schema properties accordingly.\n Use the attributes property to read and store sensor data, in the case of the shutter contact our example the current window status (windowOpen).\nThe attributes property is intended for read-only data such as sensor data.\n Assign the battery status or the connection status to the event property.\nThe event property is intended for one-time events that can occur, for example overheating or low battery. @José: tries to find example and also include events, since events are not yet well documented\n  JSON Schema Example Shutter Contact:\n{ \u0026#34;attributes\u0026#34;: { \u0026#34;windowOpen\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;boolean\u0026#34;} }, \u0026#34;event\u0026#34;: { \u0026#34;batteryLow\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;boolean\u0026#34;}, \u0026#34;transmitError\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;boolean\u0026#34;}, }, \u0026#34;stateInfo\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34;}, }, \u0026#34;radioState\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34;}, } } Enable reporting for the relevant attributes. @Jose: would you enable reporting for events, too, e.g. to establish SLA statistrics?\n{ \u0026#34;path\u0026#34;: \u0026#34;$.attributes.windowOpen\u0026#34;, \u0026#34;reportTo\u0026#34;: [ \u0026#34;timeseries\u0026#34; ] } To push the shutter contact sensor data to the OLT platform via Mosquitto, create an MQTT message.\nThe topic is data-ingest.\nThe payload is the device type property and the current value.\nmosquitto_pub -h mqtt.lightelligence.io \\ -p 8883 --cert device_cert.pem --key device_key.pem \\ -d -t data-ingest \\ -m \u0026#39;{ \u0026#34;type\u0026#34;: \u0026#34;attributes\u0026#34;, \u0026#34;value\u0026#34;: { \u0026#34;windowOpen\u0026#34;: true } }\u0026#39; \\ -V mqttv311 --cafile olt_ca.pem To push the shutter contact event data to the OLT platform via Mosquitto, create a corresponding MQTT message.\nThe topic is event-ingest.\nThe payload is the device type property and the current value.\nmosquitto_pub -h mqtt.lightelligence.io \\ -p 8883 --cert device_cert.pem --key device_key.pem \\ -d -t event-ingest \\ -m \u0026#39;{ \u0026#34;type\u0026#34;: \u0026#34;event\u0026#34;, \u0026#34;value\u0026#34;: { \u0026#34;batteryLow\u0026#34;: false } }\u0026#39; \\ -V mqttv311 --cafile olt_ca.pem Implement and test monitoring and alerting.\nTo allow you to emulate a device generating one-time events, we provide the /event-ingest endpoint.\nSo, to test your monitoring and alerting function, instead of sending an MQTT message, make an HTTP request.\n@José: as per the API docu, the type is not \u0026ldquo;event\u0026rdquo; but \u0026ldquo;overheated\u0026rdquo;, or, in our example, \u0026ldquo;batteryLow\u0026rdquo; \u0026ndash; is it correct?\ncurl -X GET \\  \u0026#34;https://api.lightelligence.io/v1/event-ingest\u0026#34; \\  -H \u0026#39;Authorization: Bearer {TOKEN}\u0026#39; \\  -H \u0026#39;Cache-Control: no-cache\u0026#39; \\  -H \u0026#39;Content-Type: application/json\u0026#39; \\  -d \u0026#39;{ \\  \u0026#34;type\u0026#34;: \u0026#34;event\u0026#34;, \\  \u0026#34;value\u0026#34;: { \\  \u0026#34;batteryLow\u0026#34;: true \\  }, \\  \u0026#34;createdAt\u0026#34;: \u0026#34;2018-07-07T11:50:12+00:00\u0026#34;, \\  \u0026#34;deviceId\u0026#34;: \u0026#34;550e8400-e29b-11d4-a716-446655440000\u0026#34;, \\  \u0026#34;senderId\u0026#34;: \u0026#34;550e8400-e29b-11d4-a716-446655440000\u0026#34; \\  } As per https://api.lightelligence.io/v1/api-collection/#tag/events/paths/~1devices~1{deviceId}~1last-events/get:\n -d '{ \\ \u0026quot;type\u0026quot;: \u0026quot;overheated\u0026quot;, \\ @ \u0026quot;value\u0026quot;: { \\ \u0026quot;temperature\u0026quot;: 45 \\ }, \\ \u0026quot;createdAt\u0026quot;: \u0026quot;2018-07-07T11:50:12+00:00\u0026quot;, \\ \u0026quot;deviceId\u0026quot;: \u0026quot;550e8400-e29b-11d4-a716-446655440000\u0026quot;, \\ \u0026quot;senderId\u0026quot;: \u0026quot;550e8400-e29b-11d4-a716-446655440000\u0026quot; \\ }   Procedure\nIn the OLT portal, open the device.\nResult\nUnder Diagnostics, a diagnostics log listing invalid MQTT messages is displayed.\nIf a device doesn\u0026rsquo;t send date information continuously, the status Offline is displayed. @Alex: - this seems not to be the case in the dev-portal as of 20190412; also: how am I alerted if a device fails? We should have a dashboard for that.\n@tbd: add screenshot, clarify and verify; can the interval be configured?\nCurrently we display:\nLast Seen: 11.4.2019 13:53:38 Diagnostics: Last hour messages 12:53:40 Device connected 12:53:41 Device disconnected  \u0026ndash;\u0026gt;\n"
    }
    
    , 
    {
        "url": "/getting-started/basic-concepts/",
        "title": "Recapulating Basic Concepts",
        "content": " Understanding the Concepts You now know some basic concepts:\n A tenant owns the physical devices in an IoT system landscapes.\nYou create a tenant by registering to the OLT platform.\n A device type describes the capabilities of a class of devices: which data they can exchange with the OLT platform.\nYou can create and edit device types for device classes such as sensors, actors, or gateways in the OLT portal. Or create it with an HTTP request to the OLT API, as our Bash script does.\n A device is a digital twin of a physical device, representing it in the OLT platform with the properties defined in the corresonding device type.\nYou can create and edit device types and display their status in the OLT Portal. Or create them with HTTP requests as in our Bash script.\n  Practicing To learn what\u0026rsquo;s under the hood when you execute the Bash script, perform the steps manually. Go to Walking Through the OLT Portal, Step by Step,\n"
    }
    
    , 
    {
        "url": "/data/visualizing-data/",
        "title": "Visualizing Data",
        "content": " Create template dashboard Copy template to \u0026ldquo;stream\u0026rdquo; in Qlik (Qlik stream = OLT tenant) Apply new versions of template later on  "
    }
    
    , 
    {
        "url": "/devices/connecting-gateways/",
        "title": "Connecting Gateway Devices",
        "content": "  The gateway process is still under discussion: This chapter is a placeholder.\n In a typical setup, devices don\u0026rsquo;t communicate with the OLT platform directly but via a gateway.\nA gateway allows you to integrate device that are not IoT enabled.\n  Gateway Setup\n  In this setup, you proceed as follows:\n Create the device type for each device. Create a device type for the gateway device. Create a device for the gateway. Create a device for each sensor with the right device type. Modify all sensor devices to make them connectedBy the gateway device, Assign a unique alias, which is also available later for the gateway (i.e. mac address) to each of the device. In the gateway, Create certificate Enable MQTT to data-ingest  Aliases are used only in MQTT and HTTP data- and event-ingest messages\nIn the /devices/:id/\u0026hellip; REST-API, aliases can only be used on the GET /devices endpoint as query.\nThe devices aliases array is included in the cloud to device message (in addition to the device’s uuid).\n____ Begin Notes 20190611:\nAdapter SDK encapsulates calls of the gateway API, bot MQTT and HTPP. It binds libraries and facilities, e.g.\nif it creates a device in the gateway and in the OLT platform, it automatically adds the gatreway device ID as the connectedBy, including the the adapter and the field devices.\nEvery device that needs to be reached from the cloud needs to have the connectedBy attribute set.\nThe gateway can be virtual or physical.\nadapters are software only: run in gateway or something similar, e.g. have 1 gateway and multiple devices running adapters, to have enough RAM or processing power\nField device either virtual for testing and illustration, or physical (with protocol)\nAdapter: translates field communication to OLT and vice versa, if interface between gateway and field;\ne.g. Gateway has GUI with devices available in LAN; if compatible (i.e.: has an adapter), then onboarding: Gateway launches adapter hat translates communication from device to gateway and from gateway to OLT, and vice versa\nTypically send attributes\nAdapter first uses the HTTP API to create types, devices and schema, then uses MQTT API to post attributes configuration changes to OLT and if supported, get config updates from OLT which need to be parsed and implemented in field device get actions from OLT that need to be parsed and implemented in field, e.g. turn bulb on\nGateway is a self-contained development solution: developer can connect to gateway Swagger interface to know which calls are possible, and test the calls Also supports MQTT and HTPP endpoinmts, similar to OLT\nHas SDK: a collection and integration API: storing SDK makes writing adapters easy, a.g. Zigbee adapter, can then ported to other wireless technology\n The gateway is a device type, get unique ID it will somehow be shared in OLT: to be discussed with Henri: different tenants or users can share gateways Gateways is ARM-based hardware or can be embedded in existing hardware, e.g. DALI Pro; runs under node.js; platform-agnostic: e.g. Raspi, Win  Adapter SDK should allow to easily writer glue code to bind the gateway and the field code.\nThe gateway is a translator: to talk the protocol.\n____ End Notes 20190611\nA gateway allows you to integrate device that are not IoT enabled.\nThe devices have aliases.\nVia script Some kind of process that describes how I control devices via a gateway.\nTo check the devices are related to the gateway via the connectedby property and represented by aliases.\nImagine a customer using Hue. The enduser controls lights via the app, but the customer wants to have usage statistics.\nHere comes the OLT platform.\nThere is a bulb in every room. As per the hue API it has a unique endpoint id in the form: AA:BB:CC:DD:EE:FF:00:11-XX.\nAlso, it has an on state.\nOur customer wants the on state to be reported to the OLT database for each bulb attached to the bridge.\nTo do so, he might make GETrequests to the /api/\u0026lt;username\u0026gt;/lights/\u0026lt;id\u0026gt; endpoint, see the https://developers.meethue.com/develop/hue-api/lights-api/#get-attr-and-state endpoint:\n{ \u0026ldquo;state\u0026rdquo;: { \u0026ldquo;hue\u0026rdquo;: 50000, \u0026ldquo;on\u0026rdquo;: true, \u0026ldquo;effect\u0026rdquo;: \u0026ldquo;none\u0026rdquo;, \u0026ldquo;alert\u0026rdquo;: \u0026ldquo;none\u0026rdquo;, \u0026ldquo;bri\u0026rdquo;: 200, \u0026ldquo;sat\u0026rdquo;: 200, \u0026ldquo;ct\u0026rdquo;: 500, \u0026ldquo;xy\u0026rdquo;: [0.5, 0.5], \u0026ldquo;reachable\u0026rdquo;: true, \u0026ldquo;colormode\u0026rdquo;: \u0026ldquo;hs\u0026rdquo; }, \u0026ldquo;type\u0026rdquo;: \u0026ldquo;Living Colors\u0026rdquo;, \u0026ldquo;name\u0026rdquo;: \u0026ldquo;LC 1\u0026rdquo;, \u0026ldquo;modelid\u0026rdquo;: \u0026ldquo;LC0015\u0026rdquo;, \u0026ldquo;swversion\u0026rdquo;: \u0026ldquo;1.0.3\u0026rdquo; }\nHow would our customer proceed to get the state data into the OLT platform?\n Create device type: The on state corresponds to an on attributes property in the bulb\u0026rsquo;s device type.\n Create device: The hue device ID AA:BB:CC:DD:EE:FF:00:11-XX, I assume, correponds to an alias, the \u0026ldquo;connectedBy\u0026rdquo; property contains the gateway ID.\n  See https://api.lightelligence.io/v1/api-collection/#tag/devices:\n{ \u0026ldquo;info\u0026rdquo;: { \u0026ldquo;name\u0026rdquo;: \u0026ldquo;Gateway North 1\u0026rdquo;, \u0026ldquo;deviceTypeId\u0026rdquo;: \u0026ldquo;123e4567-e89b-12d3-a456-426655440003\u0026rdquo;, \u0026ldquo;description\u0026rdquo;: \u0026ldquo;Gateway left from the right door, under the orange pillow.\u0026rdquo;, \u0026ldquo;installationTimestamp\u0026rdquo;: \u0026ldquo;1985-04-12T23:20:50.52Z\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;: [], \u0026ldquo;connectedBy\u0026rdquo;: \u0026ldquo;123e4567-e89b-12d3-a456-426655441337\u0026rdquo;, \u0026ldquo;location\u0026rdquo;: \u0026ldquo;siteA.buildingB.floorC.roomD\u0026rdquo;, \u0026ldquo;aliases\u0026rdquo;: [ \u0026ldquo;frontdoor\u0026rdquo;, \u0026ldquo;RoomA\u0026rdquo;, \u0026ldquo;06-00-00-00-00-00\u0026rdquo; ], \u0026ldquo;coordinates\u0026rdquo;: {} }, \u0026ldquo;configuration\u0026rdquo;: { \u0026ldquo;brightness\u0026rdquo;: 60, \u0026ldquo;color\u0026rdquo;: {} }, \u0026ldquo;custom\u0026rdquo;: { \u0026ldquo;my\u0026rdquo;: {} } }\nModeling Gateways @José: how do I manage gateway? \u0026ndash; in progress\nconectedby: means: device is behind a gateway. (28.44); the device depends on the 3e12\u0026hellip; device which is a gateway\nhttps://lightelligence.atlassian.net/browse/OLT-1713: Support External Device IDs https://lightelligence.atlassian.net/wiki/spaces/OCP/pages/342261874/F-001+Support+External+Device+IDs\nAliases can be added at creation of the device or later on edit.\nif I send action, the gateway has to dispatch it to the device [@José: how do I refer to the gateway ID when posting anaction the corresponsing device?]\n@Turing\n What do we define a gateway? How can a device be configured to be a gateway in the cloud? What does it mean to configure a device to be a gateway in the cloud? How does the connectedBy attribute work? What does it allow the other device to do? How can the aliases be used to use protocol specific identifiers in the gateway? How does the gateway integrate in the cloud to device concept?  Complex Device Type Schema Data You have already used two different kinds of schema data types, numbers and objects. JSON schema also allows strings, booleans and arrays. The following command creates a device type that has an array of booleans as an attribute. The array must contain 2 up to 5 items defined by minItems and maxItems. While you cannot report an array to timeseries, your reportingRules can contain a rule to report an item with a specified index. In this case the first array element, a boolean, is reported to timeseries.\nSee https://lightelligence.io/docs/getting-started\n"
    }
    
    , 
    {
        "url": "/devices/deploying-binaries-to-devices/",
        "title": "Deploying Binaries to Devices",
        "content": "  SDK refactoring not yet finished. The firmware process is still under discussion. This chapter is a placeholder.\n ____ Begin Notes 20190611:\n@José: not in scope of V.1.0 Adapter SDK roadmap \u0026ndash; has changed a lot; is going to be discussed \u0026ndash; discuss test case\n____ End Notes 20190611\nhatem, t understand the flow-- Host firmware in the OLT platform centrally and deploy it to your devices.\nTo deploy firmwares, bootloaders, or configuration files to your devices, schedule downloads to your devices.\nTo keep track whether biaries have been installed successfully, perform status updates.\nHosting files Procedure\n Create file and provide metadata (UUID, tenant ID etc.): https://api.lightelligence.io/v1/firmwares Upload file = Attach a blob to a firmware? : /firmwares/{id}/blob A download link for the blob is added to the firmware resource which can be used to download the blob.  Installing a Firmware On a Device POST /devices/{deviceId}/firmware-installations\n@tbd: Clarify the following: \u0026ldquo;This endpoint creates a new firmware installation resource. This resource represents the status of installation into the slot for the specific device. Once it created, the device start receives installation instructions via MQTT.\u0026rdquo;\n@tbd: How do I schedule the process?\nMonitoring the Installation Status  Get firmware installation status: GET /devices/{deviceId}/firmware-installations/{installationId} Update firmware installation status: PATCH /devices/{deviceId}/firmware-installations/{installationId} Clarify: \u0026ldquo;This endpoint enables updating the status of firmware installation for a device. This installation status is tracking on the cloud side. Used by devices/gateways/analytics/etc which report statuses of the installation firmware into the slot.\u0026rdquo;  @tbd: In what case would I use GET vs. PATCH?\nManaging Files  Download file: GET /firmwares/{id}/blob @tbd: in what case do I download the file? List tenant files: GET /firmwares Get details: GET /firmwares/{id} Update files: \u0026ldquo;Please note, that it\u0026rsquo;s only allowed to attach a blob once. In case a blob is attached more than once you will get a 423 status code indicating that the resource is locked.\u0026rdquo; @tbd: What\u0026rsquo;s the workaround: Delete and Create new? What does this mean for scheduled processes? Delete file: DELETE /firmwares/{id}  s\n@Jewgeni: PPT, Info\nInstalling Binaries https://lightelligence.atlassian.net/wiki/spaces/OCP/pages/740524173/F-017+Blob+Push+Firmware+Update\nMore complex device have a firmware or other binary executables installed that need to get updated from time to time.\nHow do we do it?\n@José: When SDK refactoring is finished: adapters will be updated: José will be able to test all actions including firmware update \u0026ndash; what\u0026rsquo;s the status?\nProcess outline:\n First need to have the binary somewhere accessible, in the slot Action: Gateway downloads binary for that firmware update and push it to the device with the field procedure for the device Report back to OLT an answer to the action: success/failure, for example (config)  Inspect the communication in the Steinel web client:\n1. \u0026ldquo;Firmware Update\u0026rdquo;: Gives URL for upload 2. Click update: triggers REST API call initiating the installation of the new binary\n@José: used already? Example:\nThere are 3 slots:\n Firmware Bootloader, Configuration  Slots for binaries: @José: not yet looked into it, is going to perform first \u0026ndash; what\u0026rsquo;s the status?\n{ \u0026quot;name\u0026quot;: \u0026quot;Extended OSR Light switch\u0026quot;, \u0026quot;manufacturer\u0026quot;: \u0026quot;OSRAM\u0026quot;, \u0026quot;model\u0026quot;: \u0026quot;C3PO\u0026quot;, \u0026quot;description\u0026quot;: \u0026quot;Newest version of the switch.\u0026quot;, \u0026quot;categories\u0026quot;: [ \u0026quot;urn:oma:lwm2m:ext:3001\u0026quot;, \u0026quot;urn:oma:example:ext:1002\u0026quot;, \u0026quot;urn:oma:example:ext:1003\u0026quot; ], \u0026quot;reportingRules\u0026quot;: [ { \u0026quot;path\u0026quot;: \u0026quot;$.configuration.brightness\u0026quot;, \u0026quot;reportTo\u0026quot;: [ \u0026quot;timeseries\u0026quot; ] } ], \u0026quot;schema\u0026quot;: { \u0026quot;configuration\u0026quot;: { \u0026quot;brightness\u0026quot;: { \u0026quot;type\u0026quot;: \u0026quot;number\u0026quot;, \u0026quot;property\u0026quot;: \u0026quot;urn:oma:lwm2m:ext:5548\u0026quot;, \u0026quot;minimum\u0026quot;: 0, \u0026quot;maximum\u0026quot;: 100 }, \u0026quot;color\u0026quot;: { \u0026quot;type\u0026quot;: \u0026quot;object\u0026quot;, \u0026quot;properties\u0026quot;: { \u0026quot;r\u0026quot;: { \u0026quot;type\u0026quot;: \u0026quot;number\u0026quot;, \u0026quot;minimum\u0026quot;: 0, \u0026quot;maximum\u0026quot;: 255 }, \u0026quot;g\u0026quot;: { \u0026quot;type\u0026quot;: \u0026quot;number\u0026quot;, \u0026quot;minimum\u0026quot;: 0, \u0026quot;maximum\u0026quot;: 255 }, \u0026quot;b\u0026quot;: { \u0026quot;type\u0026quot;: \u0026quot;number\u0026quot;, \u0026quot;minimum\u0026quot;: 0, \u0026quot;maximum\u0026quot;: 255 } }, \u0026quot;required\u0026quot;: [ \u0026quot;r\u0026quot;, \u0026quot;g\u0026quot;, \u0026quot;b\u0026quot; ] } }, \u0026quot;attributes\u0026quot;: { \u0026quot;temperature\u0026quot;: { \u0026quot;type\u0026quot;: \u0026quot;number\u0026quot;, \u0026quot;property\u0026quot;: \u0026quot;urn:oma:lwm2m:ext:5700\u0026quot; }, \u0026quot;humidity\u0026quot;: { \u0026quot;type\u0026quot;: \u0026quot;number\u0026quot;, \u0026quot;minimum\u0026quot;: 0, \u0026quot;maximum\u0026quot;: 100 } }, \u0026quot;events\u0026quot;: { \u0026quot;overheated\u0026quot;: {} }, \u0026quot;actions\u0026quot;: { \u0026quot;raiseTemperature\u0026quot;: { \u0026quot;type\u0026quot;: \u0026quot;object\u0026quot;, \u0026quot;properties\u0026quot;: { \u0026quot;value\u0026quot;: { \u0026quot;type\u0026quot;: \u0026quot;number\u0026quot; }, \u0026quot;description\u0026quot;: { \u0026quot;type\u0026quot;: \u0026quot;string\u0026quot; } } } } }, \u0026quot;slots\u0026quot;: { \u0026quot;firmware\u0026quot;: { \u0026quot;name\u0026quot;: \u0026quot;Test name\u0026quot; } } }  "
    }
    
    , 
    {
        "url": "/devices/managing-devices/",
        "title": "Managing Devices",
        "content": " When you create digital twins representing your physical devices in the OLT platform, add metadata to be able to manage them effeciently.\nManaging devices means, for example,\n Make queries to list existing devices. Use filters to stream data provided by specific device groups https://lightelligence.slack.com/messages/DHUFMMW9W/), slide 6)  We provide two levels of metadata:\n semantic description: On the device type level,\n categorize your devices by describing the capabilities and use. specify external specifications the device conforms to.   Use established resource identifier schemas (e.g. LWM2M) or your create your own identifier schemas. Query devices based on the categories assigned to them: https://lightelligence.slack.com/messages/DHUFMMW9W/), slide 6\n On the devices level, describe individual devices by describing their location, for example.\n  Categorizing devices Classify devices by specifying categories in the the accociated device types.\nTo assign categories, define custom ones resource identifier schemas or use established ones.\nUse for example:\n URN Namespace for Open Mobile Alliance (OMA) Lightweight M2M resource model \u0026ndash; urn:oma:{OMAresource}:{ResourceSpecificString} Open Connectivity Foundation (OCF)/Ipso: interoperability for consumers, businesses and industries (communications platform, a bridging specification, an open source implementation and a certification program)  Procedure\nTo assign a category, make a\n@tbd: in the portal, I don\u0026rsquo;t find the option to add/edit a category.\n@José: how do we apply the following, for example? Do we have examples? * What other resource models are relevant in the industry?\n\u0026#34;temperature\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;number\u0026#34;, \u0026#34;property\u0026#34;: \u0026#34;urn:oma:lwm2m:ext:5700\u0026#34; Describing Device Types Prerequisites\nYou have writer authorization.\nProcedure\n Under Devices \u0026amp; Types, on the Device Types tab, choose the device type.\n Under Device Type Information, choose Edit.\n  Alternatively, make a PATCHrequest to the [/device-types/{deviceTypeId}](https://api.lightelligence.io/v1/api-collection/#tag/device-types/paths/~1device-types~1{deviceTypeId}/patch) endpoint.\nQuerying Devices Filtering, Querying https://lightelligence.atlassian.net/wiki/spaces/OCP/pages/793411660/Device+Filtering+Guidelines\nhttps://lightelligence.slack.com/messages/DHUFMMW9W/), slide 8: Query timeseries data based on a combination of filter criteria with a single API call New /device/timeseries-dump endpoint allows to query data based on a variety of filter criteria §This allows to retrieve data more efficiently with less API calls\nTagging a Device @José: How do we actually use the fields of the device (i.e. location, description, tags)?\nCategorizing Devices and Device Types Specify the device type, to allow for filtering and querying.\n"
    }
    
    , 
    {
        "url": "/security/2fa/",
        "title": "Enabling Two-Factor Authentication",
        "content": ""
    }
    
    , 
    {
        "url": "/applications/using-application-sdk/",
        "title": "Developing Applications with the SDK",
        "content": "  @tbd, this chapter is a placeholder\n Installing the Lightelligence Demo App Use: Get an idea what \u0026ldquo;applications\u0026rdquo; using the OLT API are.\nProcedure\n Install node.js (if I don\u0026rsquo;t have it already).\n Install the @lightelligence/browser-sdk dependency. How exactly: npm install git@bitbucket.org:lightelligence/lightelligence-demo-app.git ? Result: As of now, I get \u0026ldquo;Could not install from \u0026ldquo;bitbucket.org:lightelligence\\lightelligence-demo-app.git\u0026rdquo; as it does not contain a package.json file.\u0026rdquo; Reason: I probably need the local private read access token to our npm, since the demo app is not public. When it\u0026rsquo;s public, the customers won\u0026rsquo;t need it, correct?\n Start the app: cd into /lightelligence-demo-app, npm start.\n Open http://localhost:3000 to view it in the browser.\n  "
    }
    
    , 
    {
        "url": "/applications/authenticating-with-oauth2/",
        "title": "Authenticating with OAuth2",
        "content": " To be able to actually use applications, perform two basic steps:\n Register your applications to the OLT platform.\nBy registering your application to the OLT platform, you turn your application into an OAuth2 client authenticating via OpenID Connect.\n Implement OAuth2 in your application.\n  Restrictions For security reasons, custom applications are not allowed to use API endpoints related to tenant management and user management.\nFor more information, see Troubleshooting Application Management.\nOAuth2 Background To authenticate users and background applications, we use the OAuth2 protocol and OpenID Connect.\nTo access the OLT API, an OAuth2 access token is required.\nTo retrieve an OAuth2 access token, you need an OAuth2 client.\nWithout a registered application, access to the OLT API is not possible.\nFor more information about the OAuth2 protocol and OpenID Connect, see\n RFC 6749 - The OAuth 2.0 Authorization Framework OpenID Authentication 2.0.  Permissions We don\u0026rsquo;t use the OAuth2 protocol to grant permissions to applications.\nThe application permissions are controlled by the user roles.\nFor more information, see Managing Users.\nYou can implement custom permission in your applications, assign them to custom user roles and use the OLT platform to verify the custom permissions.\nFor more information, see Defining Custom Permissions and Roles.\n"
    }
    
    , 
    {
        "url": "/applications/creating-initial-application/",
        "title": "Creating an Initial Application",
        "content": "@tbd: Explain use case\nProcedure\n In the Developer Area, choose Create application. @Sebastian: Apply Title Case in UI elements (\u0026ldquo;Application\u0026rdquo; with capital \u0026ldquo;A\u0026rdquo;)\n  Creating an Initial Application\n   Specify the application data as required:\n Name: @Sebastian: what makes a meaningful name?; are there restrictions, e.g. blank spaces and special characters Description: Describe the application\u0026rsquo;s use. Link: @Sebastian, what URL am I supposed to submit in what format? What are the requirements? e.g.  To confirm, choose Create Application.\n  Specifying the Initial Application Data\n    Result\nThe application is created.\n  Displaying the Initial Application\n  @Sebastian: what is it good for?\n"
    }
    
    , 
    {
        "url": "/applications/use-cases/",
        "title": "Identifying Your Use Case",
        "content": " Choose an applications type depending on your use case, and off you go.\nApplications with User Interaction To retrieve an OAuth2 access token, you can implement an OAuth2 client with or without OAuth2 client secret, depending on the application type:\n Web application running on a web server (in which the application source code is protected): Implement a confidential OAuth2 client with OAuth2 client secret. User agent application running in a browser (in which the application source code may be viewed), a JavaScript application, for example: Implement a public OAuth2 client without OAuth2 client secret.  For safety reasons, we recommend web applications using a backend service providing the OAuth2 client secret.\nIn this case, proceed with Creating and Implementing Applications with User Interaction.\nBackground Applications without User Interaction A background application is installed on the computer.\nBackground applications are not connected to a user.\nCreate background applications for the following use cases, for example:\n A server running scheduled events fetching data from the OLT platform A background script fetching device data for all tenants which have installed an application, independent of users Slackbot or other notification applications   In this case, proceed with Creating Background applications without user interaction.\n"
    }
    
    , 
    {
        "url": "/applications/registering-user-applications/",
        "title": "Registering and Implementing User Applications",
        "content": " To turn a user application into an OAuth2 client, register it to the OLT platform and implement OAuth2 in your application.\nNote\nSimulating Applications\nIn the following, we use OAuth 2.0 \u0026lt;debugger/\u0026gt; (https://oauthdebugger.com) to simulate an application.\nPrerequisites\nTo register applications to the OLT platform, you have owner or writer authorization.\nNote\nChecking permissions\n If you use default roles, to verify you have owner or writer authorization, in the OLT portal, under Users, check your roles.\n If you use custom roles, verify the user permissions for the specific endpoints.\nFor more information, see Defining Custom Roles.\n  Registering and Installing an Application To access your data in the OLT platform, create an application using the OLT API.\nTo allow your application to communicate with the OLT platform, create an OAuth2 client.\nProcedure\n Obtain your tenant ID and an authentication token:\n Log on to the OLT portal https://portal.lightelligence.io/. Select the tenant who is to own the application. Under Developer Area, look up the  authentication token (in our example \u0026ldquo;eyJhbGciOi \u0026hellip;\u0026rdquo;) tenant ID (in our example \u0026ldquo;b1747579-355 \u0026hellip;\u0026rdquo;)   Displaying the Authentication Token and Tenant ID in the Developer Area\n     To register the application to the OLT platform, make a POST request to the /application-developer/applications endpoint.\nYou have the following options, depending on the application type:\n Web application (recommended): Create web applications authenticating users with the OAuth2 client secret.\nEnsure that the withPublicOauth2Client property is set to false (confidential).\n User Agent application: If you don\u0026rsquo;t have a backend service to store the OAuth2 client secret, set the withPublicOauth2Client property to true (public).\n  The request passes the following data:\n one or more redirect URLs where your application is to be hosted.\nDefine different redirect URLs for development, test, and production, for example.\nWildcards (*) are not allowed in the redirect URLs.\nIn our simulation, the redirect URL is https://oauthdebugger.com/debug.  the authentication token\n the tenant ID of the tenant owning the application\nNote\nManaging Applications\nYou can change the application properties later.\nAdd a description and a URL to provide additional information, for example.\nIf you have multiple tenants, to facilitate application management consider assigning all applications to the same tenant owning the applications.\nFor more information, see Managing Custom Applications.\n  Example of a web application authenticating users with the OAuth2 client secret (\u0026quot;withPublicOauth2Client\u0026quot;: false): curl -X POST \\\rhttps://api.lightelligence.io/v1/application-developer/applications \\\r-H \u0026#39;Authorization: Bearer {authentication token}\u0026#39; \\\r-H \u0026#39;Content-Type: application/json\u0026#39; \\\r-d \u0026#39;{\r\u0026#34;name\u0026#34;: \u0026#34;My application name\u0026#34;,\r\u0026#34;withPublicOauth2Client\u0026#34;: false,\r\u0026#34;allowedTenants\u0026#34;: [\r{\r\u0026#34;tenantId\u0026#34;: \u0026#34;b1747579-355d-4b7a-aa72-c2336d3a7211\u0026#34;,\r\u0026#34;comment\u0026#34;: \u0026#34;Example Inc., northern plant\u0026#34;\r}\r],\r\u0026#34;redirectUris\u0026#34;: [\r\u0026#34;https://oauthdebugger.com/debug\u0026#34;, \u0026#34;https://dev.application.com/auth/callback\u0026#34;,\r\u0026#34;https://prod.application.com/auth/callback\u0026#34;\r]\r}\u0026#39;\r You get a response similar to the following. The type is confidential (web application) or public (user agent application).\nThe response contains the following data:\n application ID (in our example \u0026ldquo;3333333-1111-2222-3333-4534g4gd4\u0026rdquo;) OAuth2 client ID (in our example \u0026ldquo;7222223-1111-2222-3333-fb4444444b7c\u0026rdquo;) OAuth2 client secret (in our example \u0026ldquo;-9vxPaAd3HmXhNXf\u0026rdquo;)   Example of a response for a web application (\u0026quot;withPublicOauth2Client\u0026quot;: false):\n{\r\u0026#34;data\u0026#34;: {\r\u0026#34;id\u0026#34;: \u0026#34;3333333-1111-2222-3333-4534g4gd4\u0026#34;,\r\u0026#34;name\u0026#34;: \u0026#34;My Web Application\u0026#34;,\r\u0026#34;withPublicOauth2Client\u0026#34;: false,\r\u0026#34;oauth2Client\u0026#34;: {\r\u0026#34;id\u0026#34;: \u0026#34;7222223-1111-2222-3333-fb4444444b7c\u0026#34;,\r\u0026#34;secret\u0026#34;: \u0026#34;-9vxPaAd3HmXhNXf\u0026#34;,\r\u0026#34;type\u0026#34;: \u0026#34;confidential\u0026#34;\r},\r\u0026#34;tenantId\u0026#34;: \u0026#34;b1747579-355d-4b7a-aa72-c2336d3a7211\u0026#34;,\r\u0026#34;status\u0026#34;: \u0026#34;active\u0026#34;,\r\u0026#34;createdAt\u0026#34;: \u0026#34;2019-04-25T1515.392Z\u0026#34;,\r\u0026#34;updatedAt\u0026#34;: \u0026#34;2019-04-25T1515.392Z\u0026#34;,\r\u0026#34;allowedTenants\u0026#34;: [\r{\r\u0026#34;tenantId\u0026#34;: \u0026#34;b1747579-355d-4b7a-aa72-c2336d3a7211\u0026#34;,\r\u0026#34;createdAt\u0026#34;: \u0026#34;2019-04-25T1515.407Z\u0026#34;,\r\u0026#34;installed\u0026#34;: false,\r\u0026#34;comment\u0026#34;: \u0026#34;Example Inc., northern plant\u0026#34;\r}\r],\r\u0026#34;redirectUris\u0026#34;: [\r\u0026#34;https://oauthdebugger.com/debug\u0026#34;,\r\u0026#34;https://dev.application.com/auth/callback\u0026#34;,\r\u0026#34;https://prod.application.com/auth/callback\u0026#34;\r],\r}\r}\r Example of a response for a user agent application (\u0026quot;withPublicOauth2Client\u0026quot;: true):\n{\r\u0026#34;data\u0026#34;: {\r\u0026#34;id\u0026#34;: \u0026#34;2f594b28-411e-4334-9f72-75e1bff2e7f3\u0026#34;,\r\u0026#34;name\u0026#34;: \u0026#34;My User Agent Application\u0026#34;,\r\u0026#34;withPublicOauth2Client\u0026#34;: true,\r\u0026#34;oauth2Client\u0026#34;: {\r\u0026#34;id\u0026#34;: \u0026#34;fe1e5704-1fb1-4e66-818d-f7724f1743e0\u0026#34;,\r\u0026#34;secret\u0026#34;: \u0026#34;gX1WLw4O7YBwjsw5\u0026#34;,\r\u0026#34;type\u0026#34;: \u0026#34;confidental\u0026#34;\r},\r\u0026#34;publicOauth2Client\u0026#34;: {\r\u0026#34;id\u0026#34;: \u0026#34;3f7225f7-9818-4634-8613-c9676935847a\u0026#34;,\r\u0026#34;type\u0026#34;: \u0026#34;public\u0026#34;\r},\r\u0026#34;tenantId\u0026#34;: \u0026#34;b1747579-355d-4b7a-aa72-c2336d3a7211\u0026#34;,\r\u0026#34;status\u0026#34;: \u0026#34;active\u0026#34;,\r\u0026#34;createdAt\u0026#34;: \u0026#34;2019-05-16T0910.825Z\u0026#34;,\r\u0026#34;updatedAt\u0026#34;: \u0026#34;2019-05-16T0910.825Z\u0026#34;,\r\u0026#34;redirectUris\u0026#34;: [\r\u0026#34;https://oauthdebugger.com/debug\u0026#34;,\r\u0026#34;https://dev.application.com/auth/callback\u0026#34;,\r\u0026#34;https://prod.application.com/auth/callback\u0026#34;\r],\r\u0026#34;allowedTenants\u0026#34;: [\r{\r\u0026#34;tenantId\u0026#34;: \u0026#34;b1747579-355d-4b7a-aa72-c2336d3a7211\u0026#34;,\r\u0026#34;createdAt\u0026#34;: \u0026#34;2019-05-16T0910.918Z\u0026#34;,\r\u0026#34;installed\u0026#34;: false,\r\u0026#34;comment\u0026#34;: \u0026#34;Example Inc., northern plant\u0026#34;\r}\r]\r}\r}\r You have now registered the application to your tenant, so the application is available to be installed in the tenant.\n Implement a process to store the OAuth2 client secret.\nIf you develop a user agent application without a backend service to store the OAuth2 client secret, ensure that you have set the withPublicOauth2Client property to true, in step 1.\nNote\nWhy store the OAuth2 client secret?\nTo display application data, you can use the /application-developer/applications endpoint.\nBut the response does not contain the OAuth2 client secret.\nIf you don\u0026rsquo;t store it, you have to regenerate it making a POST request to the /application-developer/applications/{applicationId}/secret endpoint.\n To install the application, make a PUT request to the /applications/{applicationId}/installation endpoint.\ncurl -X PUT \\\rhttps://api.lightelligence.io/v1/applications/{applicationID}/installation \\\r-H \u0026#39;Authorization: Bearer {authentication token}\u0026#39; \\\r-H \u0026#39;Content-Type: application/json\u0026#39;\r In our example:\ncurl -X PUT \\\rhttps://api.lightelligence.io/v1/applications/3333333-1111-2222-3333-4534g4gd4/installation \\\r-H \u0026#39;Authorization: Bearer {eyJhbGciOi ...} \\\r-H \u0026#39;Content-Type: application/json\u0026#39;\r Optional: To verify the installation, make a GET request to the /applications/{applicationId} endpoint.\n  Result\nYou get a response similar to the following:\n{\r\u0026#34;data\u0026#34;: {\r\u0026#34;tenantId\u0026#34;: \u0026#34;b1747579-355d-4b7a-aa72-c2336d3a7211\u0026#34;,\r\u0026#34;createdAt\u0026#34;: \u0026#34;2019-04-25T1020.312Z\u0026#34;\r}\r} Your application is registered to the OLT platform and installed in the tenant owning the application.\nA user can logon to the OLT platform and use your application as an OAuth2 client to get data from the tenant in which the application is installed.\nInstalling the Application in Multiple Tenants To install an existing application in additional tenants, whitelist the tenants and install the application in each of them.\nFor more information, see Managing Custom Applications.\nImplementing OAuth2 in the Application Enable your application to act as an OAuth2 client, depending on the application type:\n Web application running on a web server User agent application running in a browser  Implementing a Web Application If you have a web application (in which the application source code is protected), implement a confidential OAuth2 client with OAuth2 client secret.\nWe recommend web applications due to safety reasons.\nPrerequisites\nWhen registering the application to the OLT platform, you have set the application property withPublicOauth2Client to false (see above).\nProcedure\n To get the OAuth2 authorization code, redirect the API call to the URL of our OLT authorization server (id.lightelligence.io):\nhttps://id.lightelligence.io/v1/id/auth/realms/olt/protocol/openid-connect/auth \\\r?client_id={oauth2Client.id} \\\r\u0026amp;redirect_uri={redirectUri} \\\r\u0026amp;scope=openid \\\r\u0026amp;response_type=code \\\r\u0026amp;response_mode=form_post \\\r In our example, we authenticate the OAuth 2.0 \u0026lt;debugger/\u0026gt; application simulation hosted under https://oauthdebugger.com/debug: https://id.lightelligence.io/v1/id/auth/realms/olt/protocol/openid-connect/auth \\\r?client_id=7222223-1111-2222-3333-fb4444444b7c \\\r\u0026amp;redirect_uri=https://oauthdebugger.com/debug \\\r\u0026amp;scope=openid \\\r\u0026amp;response_type=code \\\r\u0026amp;response_mode=form_post \\\r   Simulating an Authorization Code Request with OAuth 2.0 \u0026lt;debugger/\u0026gt;\n  If the user isn\u0026rsquo;t logged on to the OLT platform already, the login screen appears.\nOn selecting the tenant, the user is redirected to the redirect URL.\nYou get the OAuth2 authorization code, in our example eyJhb ...:\n{\rname: \u0026#39;code\u0026#39;, value: \u0026#39;eyJhbGciOiJkaXIiLCJlbmMiOiJBMTI4Q0JDLUhTMjU2In0..ZT1EOZlAoohBhGj2J24ydw.uyRYHynYGlrNpve4UmjsMXzVfXp2XBQPfXHrQWjfqYrPOUZVWoDWDJp7DpWvL8YAPnKANQnUsfEyE3JMA7qdOUHNr5wf2mT1tU3L1RBARui3gefXWlSZXTcC-ULnPmwjqyfVKRb5IPG-6N2Y20Xn0BBFEZEtN1AXslYvts4nKUG-Metg03NKP9Pi3CYVFrlUZIR6sAGsIeNXRiJPtXZ7CtQPStQGOMK_Y-TCXKWT9WUem7FOn3b_U_p7dEWR5Grp.I6Me3lQsqicV9zoH6i293g\u0026#39; },{ name: \u0026#39;session_state\u0026#39;, value: \u0026#39;da6ee469-6030-495f-a1ce-7262a7b65ef9\u0026#39; } ]\r}\r   Getting the OAuth2 Authorization Code with OAuth 2.0 \u0026lt;debugger/\u0026gt;\n   To get an OAuth2 access token, implement a browser callback function to extract the OAuth2 authorization code and make the following POST request to the /id/auth/realms/olt/protocol/openid-connect/token.\nThe request passes the following data to the OLT authorization server:\n the OAuth2 authorization code the OAuth2 client ID of your application the redirect URL the client_secret  curl -X POST \\\rhttps://id.lightelligence.io/v1/id/auth/realms/olt/protocol/openid-connect/token \\\r-H \u0026#39;Content-Type: application/x-www-form-urlencoded\u0026#39; \\\r-d \u0026#39;grant_type=authorization_code\u0026amp;code={authorizationCode}\u0026amp;client_id={oauth2Client.id}\u0026amp;redirect_uri={redirectUri}\u0026amp;client_secret={oauth2Client.secret}\u0026#39;\r In our example:\ncurl -X POST \\\rhttps://id.lightelligence.io/v1/id/auth/realms/olt/protocol/openid-connect/token \\\r-H \u0026#39;Content-Type: application/x-www-form-urlencoded\u0026#39; \\\r-d \u0026#39;grant_type=authorization_code\u0026amp;code=eyJhbGciOiJkaXIiLCJlbmMiOiJBMTI4Q0JDLUhTMjU2In0..ZT1EOZlAoohBhGj2J24ydw.uyRYHynYGlrNpve4UmjsMXzVfXp2XBQPfXHrQWjfqYrPOUZVWoDWDJp7DpWvL8YAPnKANQnUsfEyE3JMA7qdOUHNr5wf2mT1tU3L1RBARui3gefXWlSZXTcC-ULnPmwjqyfVKRb5IPG-6N2Y20Xn0BBFEZEtN1AXslYvts4nKUG-Metg03NKP9Pi3CYVFrlUZIR6sAGsIeNXRiJPtXZ7CtQPStQGOMK_Y-TCXKWT9WUem7FOn3b_U_p7dEWR5Grp.I6Me3lQsqicV9zoH6i293g\u0026amp;client_id=7222223-1111-2222-3333-fb4444444b7c\u0026amp;redirect_uri=https://dev.application.com/auth/callback\u0026amp;client_secret=-9vxPaAd3HmXhNXf\u0026#39;\r Note We can\u0026rsquo;t simulate this step because the request requires the application to be in the same session, in our example the https://oauthdebugger.com/debug application session.\n  Result\nYou get the OAuth2 access token allowing your application to access the tenant data.\n200: {\r\u0026#34;access_token\u0026#34;: \u0026#34;eyAdG ...\u0026#34;\r} Implementing a User Agent Application If you have a browser application without a backend service, a JavaScript application, for example, retrieve the OAuth2 authorization code without the OAuth2 client secret.\nPrerequisites\nYou have registered and installed the applicattion as described above.\nWhen registering your application to the OLT platform, you have set the application property withPublicOauth2Client to true.\nProcedure\n To get the OAuth2 authorization code, redirect the API call to the URL of our OLT authorization server (id.lightelligence.io):\nhttps://id.lightelligence.io/v1/id/auth/realms/olt/protocol/openid-connect/auth \\\r?client_id={oauth2Client.id} \\\r\u0026amp;redirect_uri={redirectUri} \\\r\u0026amp;scope=openid \\\r\u0026amp;response_type=code \\\r\u0026amp;response_mode=form_post\r To get an OAuth2 access token, implement a browser callback function to extract the OAuth2 authorization code and make the following POST request to the /id/auth/realms/olt/protocol/openid-connect/token.\nThe request passes the following data to the OLT authorization server:\n the OAuth2 authorization code the OAuth2 client ID of your application the redirect URL  curl -X POST \\\rhttps://id.lightelligence.io/v1/id/auth/realms/olt/protocol/openid-connect/token \\\r-H \u0026#39;Content-Type: application/x-www-form-urlencoded\u0026#39; \\\r-d \u0026#39;grant_type=authorization_code\u0026amp;code={authorizationCode}\u0026amp;client_id={oauth2Client.id}\u0026amp;redirect_uri={redirectUri}\u0026#39;\r In our example: curl -X POST \\\rhttps://id.lightelligence.io/v1/id/auth/realms/olt/protocol/openid-connect/token \\\r-H \u0026#39;Content-Type: application/x-www-form-urlencoded\u0026#39; \\\r-d \u0026#39;grant_type=authorization_code\u0026amp;code={authorizationCode}\u0026amp;client_id=7222223-1111-2222-3333-fb4444444b7c\u0026amp;redirect_uri=https://oauthdebugger.com/debug\u0026#39;   "
    }
    
    , 
    {
        "url": "/applications/registering-background-applications/",
        "title": "Registering and Implementing Background Applications",
        "content": " To turn a background application into an OAuth2 client, register it to the OLT platform and implement OAuth2 in your application.\nPrerequisites\nTo register applications to the OLT platform, you have owner or writer authorization.\nNote\nChecking permissions\n If you use default roles, to verify you have owner or writer authorization, in the OLT portal, under Users, check your roles.\n If you use custom roles, verify the user permissions for the specific endpoints.\nFor more information, see Defining Custom Roles.\n  Registering and Installing a Background Application  From the OLT portal, under Developer Area, obtain the tenant ID and the authentication token of the tenant who is to own the application.\nFor more information, see the analogous process under Creating and Implementing User Applications.  To register the application to the OLT platform, make a POST request to the /application-developer/applications endpoint.\nThe request passes the following data:\n the authentication token the tenant ID of the tenant owning the application  Note\nManaging Applications\nYou can change the application properties later, for example, the application name.\nFor more information, see Managing Custom Applications.\nExample:\ncurl -X POST \\\rhttps://api.lightelligence.io/v1/application-developer/applications \\\r-H \u0026#39;Authorization: Bearer {authentication token}\u0026#39; \\\r-H \u0026#39;Content-Type: application/json\u0026#39; \\\r-d \u0026#39;{\r\u0026#34;name\u0026#34;: \u0026#34;Sample Application\u0026#34;,\r\u0026#34;allowedTenants\u0026#34;: [\r{\r\u0026#34;tenantId\u0026#34;: \u0026#34;{tenant Id}\u0026#34;\r}\r]\r}\u0026#39;\r You get a response similar to the following, containing the following data:\n application ID (in our example \u0026ldquo;9aa3b618-8cd2-4dc0-b7a1-da6df60af254\u0026rdquo;) OAuth2 client ID (in our example \u0026ldquo;44c11af1-c549-4c18-98bd-bcef92c8b45b\u0026rdquo;) OAuth2 client secret (in our example \u0026ldquo;vr7i9-P9brKIGYIQ\u0026rdquo;)  200: {\r\u0026#34;data\u0026#34;: {\r\u0026#34;id\u0026#34;: \u0026#34;9aa3b618-8cd2-4dc0-b7a1-da6df60af254\u0026#34;,\r\u0026#34;name\u0026#34;: \u0026#34;Test Application\u0026#34;,\r\u0026#34;oauth2Client\u0026#34;: {\r\u0026#34;id\u0026#34;: \u0026#34;44c11af1-c549-4c18-98bd-bcef92c8b45b\u0026#34;,\r\u0026#34;secret\u0026#34;: \u0026#34;vr7i9-P9brKIGYIQ\u0026#34;,\r\u0026#34;type\u0026#34;: \u0026#34;confidential\u0026#34;\r},\r...\r}\r}\r Implement a process to store the OAuth2 client secret.\nNote\nWhy store the OAuth2 client secret?\nTo display application data, you can use the /application-developer/applications endpoint.\nBut the response does not contain the OAuth2 client secret.\nIf you don\u0026rsquo;t store it, you have to regenerate it making a POST request to the /application-developer/applications/{applicationId}/secret endpoint.\n To install the application, make a PUT request to the /applications/{application Id}/installation endpoint.\ncurl -X PUT \\\rhttps://api.lightelligence.io/v1/applications/{application ID}/installation \\\r-H \u0026#39;Authorization: Bearer {authentication token}\u0026#39; \\\r-H \u0026#39;Content-Type: application/json\u0026#39;\r In our example:\ncurl -X PUT \\\rhttps://api.lightelligence.io/v1/applications/9aa3b618-8cd2-4dc0-b7a1-da6df60af254/installation \\\r-H \u0026#39;Authorization: Bearer {authentication token}\u0026#39; \\\r-H \u0026#39;Content-Type: application/json\u0026#39;\r Optional: To verify the installation, make a GET request to the /applications/{applicationId} endpoint.\n  Result\nYour background application is registered to the OLT platform and installed in a tenant.\nThe background application can get data from the tenant in which the application is installed, without logging on to the OLT platform.\nInstalling the Application in Multiple Tenants To install an existing application in additional tenants, whitelist the tenants and install the application in each of them.\nFor more information, see Managing Custom Applications.\nImplementing a Background Application Implement a confidential OAuth2 client with OAuth2 client secret.\nProcedure\nTo get the OAuth2 access token, do the following:\n Implement a process to submit, in the request header, the tenant ID of the tenant in which the application is installed. To use the OAuth2 client credentials flow, set the grant type parameter to client_credentials. Submit the OAuth2 client ID and the OAuth2 client secret.   Make a POST request to the id/auth/realms/olt/protocol/openid-connect/token endpoint:\ncurl -X POST \\ https://id.lightelligence.io/v1/id/auth/realms/olt/protocol/openid-connect/token \\ -H \u0026#39;Content-Type: application/x-www-form-urlencoded\u0026#39; \\ -H \u0026#39;tenant: {tenant ID}\u0026#39; \\ -d \u0026#39;grant_type=client_credentials\u0026amp;client_id={oauth2Client.id}\u0026amp;client_secret={oauth2Client.secret}\u0026#39; In our example:\ncurl -X POST \\ https://id.lightelligence.io/v1/id/auth/realms/olt/protocol/openid-connect/token \\ -H \u0026#39;Content-Type: application/x-www-form-urlencoded\u0026#39; \\ -H \u0026#39;tenant: {tenant ID}\u0026#39; \\ -d \u0026#39;grant_type=client_credentials\u0026amp;client_id=44c11af1-c549-4c18-98bd-bcef92c8b45b\u0026amp;client_secret=vr7i9-P9brKIGYIQ\u0026#39; You get a response like the following, containing the OAuth2 access token allowing your application to access the tenant data.\n{ \u0026#34;access_token\u0026#34;: \u0026#34;eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWV0VOVDNBN1FLWllFTURoWFBKd3dVa1Jpd04tREI5OThQeUpoU0gzRDZFIn0.eyJqdGkiOiI4YzhlMDAxMi1lYWFiLTRkYzYtYmZiOC1iNTUyNTQ3YTJiMGEiLCJleHAiOjE1NTgyNjA2OTIsIm5iZiI6MCwiaWF0IjoxNTU3Mzk2NjkyLCJpc3MiOiJodHRwczovL2lkLmRldi5vbHQtZGV2LmlvL3YxL2lkL2F1dGgvcmVhbG1zL29sdCIsImF1ZCI6IjI4ZjgzODE5LTE5OWYtNDQxMC1hZTdmLTcyMjE3NjUxMmI5MyIsInN1YiI6IjZmM2Q2MGQwLWJlMzAtNGNiYS1hOTU1LTczMDYzMDExNDg3YyIsInR5cCI6IkJlYXJlciIsImF6cCI6IjI4ZjgzODE5LTE5OWYtNDQxMC1hZTdmLTcyMjE3NjUxMmI5MyIsImF1dGhfdGltZSI6MCwic2Vzc2lvbl9zdGF0ZSI6IjAwNjY4OGIxLTEzZjEtNGJhZi1hNzQxLTc4NTdmZmE5NjM2ZiIsImFjciI6IjEiLCJhbGxvd2VkLW9yaWdpbnMiOlsiKiJdLCJyZXNvdXJjZV9hY2Nlc3MiOnt9LCJzY29wZSI6Im9sdC1hcHBsaWNhdGlvbnMiLCJjbGllbnRJZCI6IjI4ZjgzODE5LTE5OWYtNDQxMC1hZTdmLTcyMjE3NjUxMmI5MyIsImNsaWVudEhvc3QiOiIxMC4yNDAuMC42NiIsImNsaWVudEFkZHJlc3MiOiIxMC4yNDAuMC42NiIsInRlbmFudCI6ImIxNzQ3NTc5LTM1NWQtNGI3YS1hYTcyLWMyMzM2ZDNhNzIxMSJ9.v7cu0zDJY0BqLSmTUauJW46XkGWOuNxVPV7qY4530FZU2BHwZuR5URPlJtHbWpe2QUqxSXboq4dPnL9PmCltUO11DT6cartsJAte4rvvJE2WHb_YtmRasn8b-PxZ9ZVFXIHQRDnIKDu0xPl29ijyqkWbTawdxvuLkwThi4Gu-apqWAjCX2pNBivmuT-25QVBA-FAD_cHuxRPgJ5DJ8BbFIOYR-WjGRAO9v7RLjANSRjXLCS69WP6nKtZn0xJT0GXCUyyLeo_zI4FMWosq9UEFb2hIlXi4kJbkK_pD6KsXq5RGEL7Ap812DUdTDzfA1IcqLH14S38PTnHCFwRssbx0g\u0026#34;, \u0026#34;expires_in\u0026#34;: 863999, \u0026#34;refresh_expires_in\u0026#34;: 950399, \u0026#34;refresh_token\u0026#34;: \u0026#34;eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWV0VOVDNBN1FLWllFTURoWFBKd3dVa1Jpd04tREI5OThQeUpoU0gzRDZFIn0.eyJqdGkiOiI4ZGMxYWQ3ZC04ZDg1LTQwZjUtOWNjZS05NWZhMGQwNzNlNDEiLCJleHAiOjE1NTgzNDcwOTIsIm5iZiI6MCwiaWF0IjoxNTU3Mzk2NjkzLCJpc3MiOiJodHRwczovL2lkLmRldi5vbHQtZGV2LmlvL3YxL2lkL2F1dGgvcmVhbG1zL29sdCIsImF1ZCI6IjI4ZjgzODE5LTE5OWYtNDQxMC1hZTdmLTcyMjE3NjUxMmI5MyIsInN1YiI6IjZmM2Q2MGQwLWJlMzAtNGNiYS1hOTU1LTczMDYzMDExNDg3YyIsInR5cCI6IlJlZnJlc2giLCJhenAiOiIyOGY4MzgxOS0xOTlmLTQ0MTAtYWU3Zi03MjIxNzY1MTJiOTMiLCJhdXRoX3RpbWUiOjAsInNlc3Npb25fc3RhdGUiOiIwMDY2ODhiMS0xM2YxLTRiYWYtYTc0MS03ODU3ZmZhOTYzNmYiLCJyZXNvdXJjZV9hY2Nlc3MiOnt9LCJzY29wZSI6Im9sdC1hcHBsaWNhdGlvbnMifQ.HN0JYs0PchnO1yOiEt05ZLT0slpJgxuHjnAsR6bIPDMeB-T0g_95ejZvSHp5WsHOeNP8Iu3Z8JCBIEQnTjoSxUVycCtL13ujODsmrzzEFDz4807O4BqMcoTewx_BxlCBSxXzn9mrRPPO-QkWUnwxVLXy1tcgZns3X9DGtmfWNz7HBwzhjutk2fpY2GOMuENgjhhVLhYYYuhY1E74iCt9uK_8XcQsWZKHHxMdNheJ4-Us3-E78sM9skSUUaa6dIN9dhSD51uB-61qiA6zEX91j6FYwSnnLi6CnZMNcwT8ROhxKOyxN98JDRJCwTcPHFcAeFHlTYohRqFTHVnuwAg38Q\u0026#34;, \u0026#34;token_type\u0026#34;: \u0026#34;bearer\u0026#34;, \u0026#34;not-before-policy\u0026#34;: 0, \u0026#34;session_state\u0026#34;: \u0026#34;006688b1-13f1-4baf-a741-7857ffa9636f\u0026#34;, \u0026#34;scope\u0026#34;: \u0026#34;olt-applications\u0026#34; } To verify that your application can access tenant data, fetch some data from a tenant that has installed the application, with the authorization token retrieved from the application. For example, list the devices registered to the tenant by making a GET request to the /devices endpoint:\ncurl -X GET \\ https://api.lightelligence.io/v1/devices \\ -H \u0026#39;Authorization: Bearer {access token}\u0026#39; \\ -H \u0026#39;Content-Type: application/json\u0026#39; \\ In our example:\ncurl -X GET \\ https://api.lightelligence.io/v1/devices \\ -H \u0026#39;Authorization: Bearer ey ...\u0026#39; \\ -H \u0026#39;Content-Type: application/json\u0026#39; \\ You get a response similar to the following:\n{ \u0026#34;meta\u0026#34;: { \u0026#34;page\u0026#34;: 0, \u0026#34;pageSize\u0026#34;: 50, \u0026#34;itemsTotal\u0026#34;: 6, \u0026#34;pagesTotal\u0026#34;: 1 }, \u0026#34;data\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;383b8c61-a9c7-487f-b4e1-66fad753e546\u0026#34;, \u0026#34;info\u0026#34;: { \u0026#34;name\u0026#34;: \u0026#34;RGB LED\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;deviceTypeId\u0026#34;: \u0026#34;04f14462-b44f-493c-aa2c-dd6d1c439ec3\u0026#34;, \u0026#34;tags\u0026#34;: [], \u0026#34;location\u0026#34;: \u0026#34;\u0026#34; } }, ... }  "
    }
    
    , 
    {
        "url": "/applications/managing-applications/",
        "title": "Managing Custom Applications",
        "content": " As the developer, deactivate custom applications temporarily or whitelist additional tenants, for example.\nAs a tenant owner, install or uninstall custom applications, for example.\nVerifying Permissions To manage custom applications, verify you have the permissions required for the specific endpoints.\nProcedure\n To identify your user ID, make a GET request to the tenants/{tenantID}/users endpoint.\nYou get user data such as the user ID (in our example 72fa ...).\n{ \u0026#34;data\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;72fac0d5-fe32-4599-8f9c-a033e42faaa9\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;John.Doe@example.com\u0026#34;, \u0026#34;firstName\u0026#34;: \u0026#34;John\u0026#34;, \u0026#34;lastName\u0026#34;: \u0026#34;Doe\u0026#34;, \u0026#34;userRoles\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;3100bdf8-90d9-471d-86ae-f7ba9eff0a86\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;owner\u0026#34;, \u0026#34;displayName\u0026#34;: \u0026#34;Owner\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Default owner role with full access to all resources.\u0026#34;, \u0026#34;locked\u0026#34;: true } ] } ], ... } } To list your permissions, make a GET request to the /users/{userId}/permissions endpoint.\n  Result\nYou get the user\u0026rsquo;s permissions, for example, the permissions related to application management:\n{ \u0026#34;data\u0026#34;: { \u0026#34;permissions\u0026#34;: [ ... { \u0026#34;id\u0026#34;: \u0026#34;1a484122-4276-452f-86fe-35328a269e0e\u0026#34;, \u0026#34;alias\u0026#34;: \u0026#34;applications_development:read\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;c4d20bb1-40a9-4e23-9ceb-ca970b6cd29d\u0026#34;, \u0026#34;alias\u0026#34;: \u0026#34;applications_development:write\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;b25a38ad-86f9-458d-825a-8c0234f146e7\u0026#34;, \u0026#34;alias\u0026#34;: \u0026#34;applications:read\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;d430282c-a7a3-4163-92f7-b6055466d318\u0026#34;, \u0026#34;alias\u0026#34;: \u0026#34;applications:write\u0026#34; }, ... ] } } Managing Applications as a Developer We provide functions to manage custom applications you have developed.\nExamples:\n Deactivate an application temporarily or change application properties Allow tenants to install applications by registering an application to tenants (whitelisting)  Changing Application Properties Change the following properties, if required:\n application name application type (web application with confidential OAuth2 client or user agent application with public OAuth2 client) redirect URLs teaser description to describe the application briefly. URL to provide additional information about the application  Procedure\nMake a PATCH request to the use the /application-developer/applications/{applicationId} endpoint.\nDeactivating an Application Temporarily To maintain a custom application, deactivate it temporarily.\nDo some fixes, for example, and ensure the application isn\u0026rsquo;t being used during this time.\nThe user will see a message that the app is inactive and is asked to contact the developer for more information.\nProcedure\nMake a PATCH request to the use the /application-developer/applications/{applicationId} endpoint.\nSet the status property to inactive.\nRegenerating the OAuth2 Client Secret Regenerate the OAuth2 client secret in the following cases, for example:\n You have given the OAuth2 client secret out to someone that shouldn\u0026rsquo;t have it. For security reasons, you want to make sure no possible attacker has access to your application data. You have forgotten or lost the OAuth2 client secret when registering your application.  You can always generate a new OAuth2 client secret.\nThe new OAuth2 client secret invalidates any previous OAuth2 client secret.\nFor security reasons, we don\u0026rsquo;t allow for fetching OAuth2 client secrets already created.\nProcedure\nMake a POST request to the /application-developer/applications/{applicationId}/secret endpoint.\nWhitelisting Additional Tenants To install applications in additional tenants, whitelist the tenants. Control the tenants that are to use an application.\nBackground: To be able to install an application in a tenant, you must have whitelisted the tenant.\nProcedure\n To whitelist a tenant, make a PUT request to the /application-developer/applications/{applicationId}/allowed-tenants/{tenantId} endpoint. To control the tenants that are to use an application, make requests to the following endpoints:\n To list whitelisted tenants, make a GET request to the /application-developer/applications/{applicationId}/allowed-tenants endpoint. To revoke whitelisting for a tenant, make a DELETE request to the /application-developer/applications/{applicationId}/allowed-tenants/{tenantId} endpoint.   Deleting an Application Delete a custom application if it\u0026rsquo;s obsolete, for example.\nProcedure\n Identify the whitelisted tenants who might have installed the application.\nInform the tenant owners to uninstall the application.\nTo identify whitelisted tenants, make a GETrequest to the /application-developer/applications/{applicationId}/allowed-tenants endpoint.\nNote\nIf you have a background application, you can list the tenants that have actually installed your application.\nSee Listing Tenants.\n Make a DELETE request to the /application-developer/applications/{applicationId} endpoint.\n  Listing Tenants If you have a background application, list all tenants which have currently installed the application and to whose data the application, therefore, has access to.\nYou get the tenant IDs and tenant names.\nThe endpoint only fetches up-to-date data from the tenants that currently have installed your application.\nPrerequisites\nYour custom application is a background application using client credentials.\nFor more information, see Registering and Implementing Background Applications.\nProcedure\nMake a GET request to the /application-info/installed-tenants endpoint.\nManaging Applications as a Tenant Owner Install or uninstall custom applications.\nInstalling an Application Roll out custom applications to a tenant.\nPrerequisites\nThe custom application is whitelisted.\nProcedure\n List all applications available (whitelisted) for a tenant:\n Log on to the tenant. Under Developer Area, copy the authorization token. Make a GET request to the /applications endpoint.\nTo get only the applications not yet installed, set the query parameter installed to false.\n    Displaying Applications Available or Installed\n  You get the application name and application ID.\nIf the application property available is true, the application can be installed.\n\u0026#34;data\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;570e0a66-974b-40dd-8108-844da77719e9\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;Display Motion Sensor Time Series Data\u0026#34;, \u0026#34;available\u0026#34;: true, \u0026#34;availableCode\u0026#34;: \u0026#34;APP_AVAILABLE\u0026#34;, \u0026#34;installation\u0026#34;: { \u0026#34;tenantId\u0026#34;: \u0026#34;570e0a66-974b-40dd-8108-844da77719e9\u0026#34;, \u0026#34;createdAt\u0026#34;: \u0026#34;2019-04-28T23:17:21Z\u0026#34; } } ] Install an application:\n Ensure that the application property available is true.\nOnly available (whitelisted) applications can be installed.\n Ensure that your user has authorization as writer or owner.\n Make a PUT request to the /applications/{applicationId}/installation endpoint.\n  Installing an Application\n     Performing Miscellaneous Activities Uninstall a custom application no longer needed, for example.\nProcedure\n To verify the application properties, make a GET request to the /applications/{applicationId} endpoint.\n whether an application is available to be installed in a tenant in which tenants an application is currently installed  To uninstall an application, make a DELETE request to the /applications/{applicationId}/installation endpoint.\nNote\nYour custom application implements custom permissions?\nIf you uninstall a custom application with custom permissions, all role assignments of those custom permissions are removed.\nIf you re-install the application, you have to assign the custom permissions to the custom role again.\nFor more information about custom roles and permissions, see Defining Custom Permissions and Roles.\n  "
    }
    
    , 
    {
        "url": "/applications/defining-custom-permissions/",
        "title": "Defining Custom Permissions and Roles",
        "content": " Custom permissions allow you to use the OLT role management to control how users can use your custom applications.\nHow you design and implement custom permissions in a custom application depends on your user role concept.\nHow it Works How does the custom roles mechanism work?\n As an application developer, implement, in your custom application, permissions that a user must have to perform a specific activity.\n As an application developer, create custom permissions corresponding to the permissions implemented in your custom application, in the OLT portal.\n As a tenant, create custom roles based on the custom permissions.\n As a tenant, assign the custom roles to users.\n  Result: When your custom application accesses the OLT platform, it can query for custom user permissions, based on the user\u0026rsquo;s role.\nDeveloping custom roles and developing custom creations are processes that are mutually dependent:\n You need an idea of user roles to be able to implement custom permissions in your custom applications accordingly. You need to have implemented and installed the custom applications to be able to register the custom permissions and custom roles in the OLT platform.  Creating a Custom Permission Prerequisites\n As the application developer, you have implemented custom permissions in your user application.\n You have registered your custom application to the OLT platform.\nFor more information, see Registering and Implementing User Applications.\nBackground applications don\u0026rsquo;t have users. Therefore, you can\u0026rsquo;t control them via custom permissions/roles.\n  Procedure\n Log on to the OLT portal as an application developer.\n Under Developer Area, obtain the authentication token.\n Optional: To identify the application ID, make a GET request to the /application-developer/applications endpoint.\n To create a custom permission, make a POST request to the /application-developer/applications/{applicationId}/custom-permissions endpoint.\nSpecify the following properties:\n alias: Enter, for example, the technical name of the custom permission implemented in your custom application. category: Describe, for example, the resource the custom permission is associated with.\n name: Enter a name. description: Describe the activity the custom permissions allows to perform.  curl -X \\ POST https://api.lightelligence.io/v1/application-developer/applications/{applicationId}/custom-permissions \\ -H \u0026#39;Authorization: Bearer {authenticationToken}\u0026#39; \\ -H \u0026#39;Content-Type: application/json\u0026#39; \\ -d \u0026#39;{ \u0026#34;alias\u0026#34;: \u0026#34;sample-resource:read\u0026#34;, \u0026#34;category\u0026#34;: \u0026#34;Sample resource\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;Read sample resource\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Allows to read the sample resource.\u0026#34; }\u0026#39; You get a response such as the following:\n{ \u0026#34;data\u0026#34;: { \u0026#34;id\u0026#34;: \u0026#34;2429c9d1-8f56-43a8-9813-c3ae94853aaf\u0026#34;, \u0026#34;applicationId\u0026#34;: \u0026#34;6f23aca9-9f53-4465-87e1-b580cf497cda\u0026#34;, \u0026#34;alias\u0026#34;: \u0026#34;sample-resource:read\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;Read sample resource\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Allows to read the sample resource.\u0026#34;, \u0026#34;category\u0026#34;: \u0026#34;Sample resource\u0026#34;, \u0026#34;createdAt\u0026#34;: \u0026#34;2019-05-27T12:22:15.681Z\u0026#34;, \u0026#34;updatedAt\u0026#34;: \u0026#34;2019-05-27T12:22:15.681Z\u0026#34; } }  Creating and Assigning a Custom Role As a tenant, create a custom role and assign the custom application permission(s). Assign the role to users.\nPrerequisites\n You have owner authorization. You have installed an application with custom permissions.\nCustom permissions of a custom application can only be assigned to custom roles if the custom application is installed.\n  Procedure\n Log on to the OLT portal as a user with owner authorization.\n Under Developer Area, obtain the authentication token.\n Optional: To identify the application ID of the custom application and to verify it\u0026rsquo;s installed, make a GET request to the /applications endpoint.\nTo only list installed applications, use the corresponding search parameter: /applications?installed=true.\n To identify the ID of the custom permission(s) associated with the application, make a GET request to the /applications/{applicationId}/custom-permissions endpoint.\n To create a role, make a POST request to the /roles endpoint.\nPost the\n role name and a description of its use custom permission ID(s)  In our example, the device manager has write and read authorization. In other use cases, it might make sense to differentiate between roles that have read/write authorization and read-only authorization only.\ncurl -X POST \\ https://api.lightelligence.io/v1/roles \\ -H \u0026#39;Content-Type: application/json\u0026#39; \\ -H \u0026#39;Authorization: Bearer {authenticationToken}\u0026#39; \\ -d \u0026#39;{ \u0026#34;name\u0026#34;: \u0026#34;Device Manager\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Manages devices with write permission\u0026#34;, \u0026#34;customPermissions\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;2429c9d1-8f56-43a8-9813-c3ae94853aaf\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;9ecebed0-804c-11e9-b475-0800200c9a66\u0026#34; } ] }\u0026#39; You get a response such as the following, containing the role ID:\n{ \u0026#34;data\u0026#34;: { \u0026#34;id\u0026#34;: \u0026#34;8be5ebd5-b8b3-4d25-98ec-4d42f45154c9\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;Device manager\u0026#34;, \u0026#34;displayName\u0026#34;: \u0026#34;Device Manager\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Manages devices with read and write permission\u0026#34;, \u0026#34;locked\u0026#34;: false, \u0026#34;usersCount\u0026#34;: 0, \u0026#34;createdAt\u0026#34;: \u0026#34;2019-05-28T12:00:50.289Z\u0026#34;, \u0026#34;updatedAt\u0026#34;: \u0026#34;2019-05-28T12:00:50.289Z\u0026#34;, \u0026#34;permissionIds\u0026#34;: [], \u0026#34;customPermissionIds\u0026#34;: [ \u0026#34;2429c9d1-8f56-43a8-9813-c3ae94853aaf\u0026#34;, \u0026#34;9ecebed0-804c-11e9-b475-0800200c9a66\u0026#34; ] } } To identify the user IDs of user assigned to a tenant, make a GET request to the /tenants/{tenantId}/users endpoint.\n To assign the custom role to a user, make a PUT request to the /tenants/{tenantId}/users/{userId}/roles endpoint.\ncurl -X PUT \\ https://api.lightelligence.io/v1/tenants/{tenantId}/users/{userId}/roles \\ -H \u0026#39;Content-Type: application/json\u0026#39; \\ -H \u0026#39;Authorization: Bearer {authenticationToken}\u0026#39; \\ -d \u0026#39;{ \u0026#34;id\u0026#34;: \u0026#34;8be5ebd5-b8b3-4d25-98ec-4d42f45154c9\u0026#34; }\u0026#39; Status 204 means the user\u0026rsquo;s roles are updated and the custom role is assigned.\n  Assigning a Custom Role\n   Optional: Verify the roles assigned to users:\n To list the roles assigned to a user, make a GET request to the /tenants/{tenantId}/users/{userId}/roles endpoint.\nIn our example, you get the following response:\n{ \u0026#34;meta\u0026#34;: { \u0026#34;page\u0026#34;: 0, \u0026#34;pageSize\u0026#34;: 10 }, \u0026#34;data\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;8be5ebd5-b8b3-4d25-98ec-4d42f45154c9\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;Device manager\u0026#34;, \u0026#34;displayName\u0026#34;: \u0026#34;Device Manager\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Manages devices with read and write permission\u0026#34;, \u0026#34;locked\u0026#34;: false, \u0026#34;usersCount\u0026#34;: 1, \u0026#34;createdAt\u0026#34;: \u0026#34;2019-05-28T12:00:50.289Z\u0026#34;, \u0026#34;updatedAt\u0026#34;: \u0026#34;2019-05-28T12:00:50.289Z\u0026#34;, \u0026#34;permissionIds\u0026#34;: [], \u0026#34;customPermissionIds\u0026#34;: [] } ] } To list the users assigned to a role, make a GET request to the /roles/{roleId}/users endpoint.\n   Maintaining Custom Permission Properties Changing the Category and Description As a tenant, make a PATCH request to the /roles/{roleId} endpoint.\nChanging the Name or Alias Once a custom permission is created you can\u0026rsquo;t change its name or alias.\nThis is to avoid any manipulation of a permission by the developer after it has been assigned by an application user.\nTo change name or alias, do the following:\n As an application developer, create a new custom permission.\n As a tenant, to assign the newly created custom permission, make a PATCH request to the /roles/{roleId} endpoint.\n As an application developer, to delete the obsolete custom permission, make a DELETE request to the /application-developer/applications/{applicationId}/custom-permissions/{permissionId} endpoint.\nStatus 204 means the custom permission has been deleted.\n  Deleting a Custom Permission\n   Optional: As an application developer, to verify the custom permission has been deleted, make a GET request to the /application-developer/applications/{applicationId}/custom-permissions endpoint.\n  When you delete a custom application with custom permissions or a custom permission, the custom permissions are removed from any role to which they were assigned.\n"
    }
    
    , 
    {
        "url": "/applications/troubleshooting-application-management/",
        "title": "Troubleshooting Application Management",
        "content": " Access Denied Your custom application can\u0026rsquo;t access a certain endpoint?\nVerify that an endpoint has the permission required to access the tenant\u0026rsquo;s data.\nBackground\nFor security reasons, custom applications are not allowed to use API endpoints related to tenant management and user management.\nYou can access these endpoints only in the OLT portal.\nSo even if your user has the owner role, with a custom application the access is restricted to permissions assigned to the writer role.\nIf you need to develop custom applications that use endpoints related to user management, contact our OLT support under contact@lightelligence.io. Custom applications cannot access endpoints which require the following permission:\n \u0026quot;tenant:read\u0026quot; \u0026quot;tenant:write\u0026quot; \u0026quot;tenant_user_management:read\u0026quot; \u0026quot;tenant_user_management:write\u0026quot;  The /tenants/{tenantId}/users/{userId}/roles endpoint, for example, requires the \u0026quot;tenant_user_management:read\u0026quot; permission. You cannot access it with a custom application.\nPrerequisites\nYou have owner or writer authorization.\nProcedure\nMake a GET request to the /permissions endpoint.\nTo authenticate the request, use the OAuth2 access token.\ncurl -X GET \\ https://api.lightelligence.io/v1/permissions \\ -H \u0026#39;Authorization: Bearer {OAuth2 access token}\u0026#39; \\ -H \u0026#39;Content-Type: application/json\u0026#39;  You get a response similar to the following:\n{ \u0026#34;meta\u0026#34;: { \u0026#34;page\u0026#34;: 0, \u0026#34;pageSize\u0026#34;: 50, \u0026#34;totalSize\u0026#34;: 26 }, \u0026#34;data\u0026#34;: { \u0026#34;permissions\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;78624d68-b09c-4e28-ae5e-812c3cfa1126\u0026#34;, \u0026#34;alias\u0026#34;: \u0026#34;devicetypes:read\u0026#34;, \u0026#34;category\u0026#34;: \u0026#34;devices\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;Access devicetypes\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Get device types and online monitoring rules \\\\nList available device types and categories\\n\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;d06e523b-d729-4b6d-b7b7-203ab8eaf102\u0026#34;, \u0026#34;alias\u0026#34;: \u0026#34;devicetypes:write\u0026#34;, \u0026#34;category\u0026#34;: \u0026#34;devices\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;Edit devicetypes\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Create device types \\\\nModify device types and online monitoring rules \\\\nRemove device types\\n\u0026#34; }, ... ] } } "
    }
    
    , 
    {
        "url": "/categories/",
        "title": "Categories",
        "content": ""
    }
    
    , 
    {
        "url": "/categories/security/",
        "title": "security",
        "content": ""
    }
    
    , 
    {
        "url": "/news/0.1-relnotes/",
        "title": "Lightelligence 0.1",
        "content": "This is our initial version.\n"
    }
    
    , 
    {
        "url": "/categories/releases/",
        "title": "Releases",
        "content": ""
    }
    
    , 
    {
        "url": "/categories/faqs/",
        "title": "faqs",
        "content": ""
    }
    
    , 
    {
        "url": "/categories/search/",
        "title": "search",
        "content": ""
    }
    
    , 
    {
        "url": "/categories/troubleshooting/",
        "title": "troubleshooting",
        "content": ""
    }
    
    , 
    {
        "url": "/categories/applications/",
        "title": "applications",
        "content": ""
    }
    
    , 
    {
        "url": "/categories/maintenance/",
        "title": "maintenance",
        "content": ""
    }
    
    , 
    {
        "url": "/",
        "title": "LIGHTELLIGENCE® User Journey",
        "content": "Experience OSRAM LIGHTELLIGENCE® (OLT) step by step:\nFrom connecting a sample device to managing a complex system landscape\nFrom generic use cases to specific ones\n"
    }
    
    , 
    {
        "url": "/categories/landscape/",
        "title": "landscape",
        "content": ""
    }
    
    , 
    {
        "url": "/categories/devices/",
        "title": "devices",
        "content": ""
    }
    
    , 
    {
        "url": "/categories/getting-started/",
        "title": "getting-started",
        "content": ""
    }
    
    , 
    {
        "url": "/categories/processing-data/",
        "title": "processing data",
        "content": ""
    }
    
    , 
    {
        "url": "/categories/data/",
        "title": "data",
        "content": ""
    }
    
    , 
    {
        "url": "/categories/roles/",
        "title": "roles",
        "content": ""
    }
    
    , 
    {
        "url": "/categories/tenants/",
        "title": "tenants",
        "content": ""
    }
    
    , 
    {
        "url": "/categories/users/",
        "title": "users",
        "content": ""
    }
    
]