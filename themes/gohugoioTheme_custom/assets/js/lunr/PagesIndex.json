[{"href":"/_index","content":" title LIGHTELLIGENCE User Journey date 20190627 "},{"href":"/applications/_index","content":" title Developing Custom Applications linktitle Developing Custom Applications description Develop custom applications to access the OLT API endpoints date 20190614 publishdate 20190614 lastmod 20190614 categories applications keywords applicationsapicustom aplications menu docs parent applications weight 04 weight 04 rem draft false aliases overviewintroduction toc false Design your OLT travel experience with custom applications Explore your IoT system landscapes and exploit its data resources As the tour guide of your end users develop custom applications to shape the lookout points and views on the data that your IoT system landscapes deliver With custom applications you access the OLT API endpoints httpsapilightelligenceiov1apicollection and manage them"},{"href":"/applications/app-test.hml","content":" OAuth 20 debugger windowdataLayer windowdataLayer function gtagdataLayerpusharguments gtagjs new Date gtagconfig UA1064323462 windowtenant oauth var appInsightswindowappInsightsfunctiona function bacafunctionvar bargumentscqueuepushfunctioncaapplycbvar cconfigaddocumentewindowsetTimeoutfunctionvar bdcreateElementscriptbsrcaurlhttpsaz416426vomsecndnetscriptsaai0jsdgetElementsByTagNamescript0parentNodeappendChildbtryccookiedcookiecatchacqueueforvar fEventExceptionMetricPageViewTraceDependencyflengthbtrackfpopifbsetAuthenticatedUserContextbclearAuthenticatedUserContextbstartTrackEventbstopTrackEventbstartTrackPagebstopTrackPagebflushadisableExceptionTrackingfonerrorbfvar gefeffunctionabdehvar iggabdehreturn0icfabdehireturn c instrumentationKey aa6302237cf144c9937b6a86fbf109f8 windowappInsightsappInsightsappInsightsqueue0appInsightsqueuelengthappInsightstrackPageView OAuth 20 ltdebuggergt Test OAuth 20 requests and debug responses Crafted by Nate Barbettini windowserverInfo method POST referer httpsiddevoltdeviov1idauthrealmsoltloginactionsauthenticateclientidd49014f74f2f420cae2c166a5709ee83amptabidQz3aoFBGC9E formBody name code value eyJhbGciOiJkaXIiLCJlbmMiOiJBMTI4Q0JDLUhTMjU2In02xNxHjTNJLgvPwflznoxgQAZpZiZ8qYQ7LwuZA2VMrZB6km1Kf4RKvc8DjSeaxL6IcleMa9SYhDDf3kOxOuvWfuFt3oXhLucjuopTlSr0E9W3ppZNNtLXUzjhwQfe6WCdb3lTHOPEtdql62falaqhT4StmOEscQeICi4Usr3SxTopMZPjK2qtZMizTNarvySi2eXAdVrGi2OS2sABMDkZWMfg2zSNtpQor3I1tXX7a0vOG2uwjzzH2IBakyzMdxYCTR5Q1y4Hp0k4FZNQD2G5EHXL9jgSoOqkQ name sessionstate value fd28c39b73414d9c9df799d55e8582f5 Start over Success The flow was successful The authorization server responded with an authorization code because the flow was started with the code response type The authorization server responded with tokens because the flow was started with the implicit savedResponseType savedResponseType response type The returned state is statevalue Matches the original state Does not match the original state expectedState codevalue accessTokenvalue idTokenvalue Error The authorization server responded with an error This could mean that the request parameters were incorrect or that the user rejected the authorization safeUnescapeerrorDescriptionvalue no error description Step 2 Exchange code for tokens Now you need to exchange the authorization code for tokens using the token endpoint We cant do this step for you because it involves your client secret POST tokenEndpoint tokenEndpoint ContentType applicationxwwwformurlencoded nbsp granttypeauthorizationcodeamp codecodevalueamp clientidsavedClientId clientIdamp clientsecretclientSecretamp redirecturiencodeURIComponentsavedRedirectUri redirectUri method upper request details 0 vbindvaluereconstructedForm paramnameparamvalue 0 vbindvaluerawQuery paramnameparamvalue 0 vbindvaluerawFragment paramnameparamvalue copy 2018 Nate Barbettini "},{"href":"/applications/auth-code-flow-public-protocol.txt","content":" Public User App 0510 1 Verify role John Doe christophalbrechtposteode OWNER 2 Register app name Public User App 0510 withPublicOauth2Client true allowedTenants tenantId b1747579355d4b7aaa72c2336d3a7211 comment Example Inc northern plant redirectUris httpsoauthdebuggercomdebug httpsprodapplicationcomauthcallback Response data id cd8f0ad6290a4feab3ba8df5e9ae88e9 name Public User App 0510 withPublicOauth2Client true oauth2Client id d49014f74f2f420cae2c166a5709ee83 secret YTaaCasWELOb6fqH type confidental publicOauth2Client id bb6ed503ad2e42f3b5d345f338ecea02 type public tenantId b1747579355d4b7aaa72c2336d3a7211 status active createdAt 20190510T090031376Z updatedAt 20190510T090031376Z redirectUris httpsoauthdebuggercomdebug httpsprodapplicationcomauthcallback allowedTenants tenantId b1747579355d4b7aaa72c2336d3a7211 createdAt 20190510T090031392Z installed false comment Example Inc northern plant 3 install the application with a PUT request to the applicationsapplicationIdinstallation endpoint httpsapidevoltdeviov1applicationscd8f0ad6290a4feab3ba8df5e9ae88e9installation Response data tenantId b1747579355d4b7aaa72c2336d3a7211 createdAt 20190510T090716801Z 4 verify the app is installed httpsapidevoltdeviov1applications Response id cd8f0ad6290a4feab3ba8df5e9ae88e9 name Public User App 0510 available true availableCode APPAVAILABLE installation tenantId b1747579355d4b7aaa72c2336d3a7211 createdAt 20190510T090716801Z 5 get the Oauth2 authorization code keyContentTypenameContentTypevalueapplicationxwwwformurlencodeddescriptiontypetext httpsiddevoltdeviov1idauthrealmsoltprotocolopenidconnectauth clientidd49014f74f2f420cae2c166a5709ee83 redirecturihttpsoauthdebuggercomdebug scopeopenid responsetypecode responsemodeformpost a Enter the following request in the browser address field httpsiddevoltdeviov1idauthrealmsoltprotocolopenidconnectauthclientidd49014f74f2f420cae2c166a5709ee83redirecturihttpsoauthdebuggercomdebugscopeopenidresponsetypecoderesponsemodeformpost Result Hello John you are using the application Public User App 0510 On selecting the tenant I get the auth code eyJhbGciOiJkaXIiLCJlbmMiOiJBMTI4Q0JDLUhTMjU2In0V5SWNAKSNY6yV9ZQTpcRwyc0j0veovN2XKMp4dUMvErDC43tKH1J1mvJdMZW53v6t3LCyJhaRSVXZhPISwO8HgR017oSNb7f91Uim1qbtXuJ3yrOrBzbKrENW0J78jnkOB1BrxumClQnsgF7DXnIEeYd7wy7ZwYxz9v6UHgOmciDrEaRQtxiSLYr66ahMNjQqznVde1gvHtfp9t7EbzaFlsx0sJHNbnnVpUbL0hvpNWNHvxjKiR8WTsidXpmVKv3OoYzOF4vLjgnVUlxPwMiMFyXSt57vtudaQ 6 Get access token Put request in browser address field httpsiddevoltdeviov1idauthrealmsoltprotocolopenidconnecttokengranttypeauthorizationcodecodeeyJhbGciOiJkaXIiLCJlbmMiOiJBMTI4Q0JDLUhTMjU2In0V5SWNAKSNY6yV9ZQTpcRwyc0j0veovN2XKMp4dUMvErDC43tKH1J1mvJdMZW53v6t3LCyJhaRSVXZhPISwO8HgR017oSNb7f91Uim1qbtXuJ3yrOrBzbKrENW0J78jnkOB1BrxumClQnsgF7DXnIEeYd7wy7ZwYxz9v6UHgOmciDrEaRQtxiSLYr66ahMNjQqznVde1gvHtfp9t7EbzaFlsx0sJHNbnnVpUbL0hvpNWNHvxjKiR8WTsidXpmVKv3OoYzOF4vLjgnVUlxPwMiMFyXSt57vtudaQ clientidd49014f74f2f420cae2c166a5709ee83redirecturihttpsoauthdebuggercomdebug Result Lightelligence An internal server error has occurred The same query posted in Postman renders error invalidrequest errordescription Missing form parameter granttype Note grant type is defined in the query params as authorizationcode content type is defined in the Header as xwwwformurlencoded I have tried fifferent browsers So step 5 in your description The user takes this token and does a normal API call to idlightelligenceiotoken with the code as you defined in your example doesnt work for me"},{"href":"/applications/authenticating-with-Oauth2","content":" title Authenticating with OAuth2 linktitle Authenticating with OAuth2 description Learn how we use OAuth2 date 20190614 publishdate 20190614 categories applications keywords applicationsuser applicationsbackground applications menu docs parent applications weight 200 weight 200 sectionsweight 200 draft false aliases applicationsoverviewquickstart toc true To be able to actually use applications perform two basic steps Register your applications to the OLT platform By registering your application to the OLT platform you turn your application into an OAuth2 client authenticating via OpenID Connect Implement OAuth2 in your application Restrictions For security reasons custom applications are not allowed to use API endpoints related to tenant management and user management For more information see Troubleshooting Application Managementapplicationstroubleshootingapplicationmanagement OAuth2 Background To authenticate users and background applications we use the OAuth2 protocol and OpenID Connect To access the OLT API an OAuth2 access token is required To retrieve an OAuth2 access token you need an OAuth2 client Without a registered application access to the OLT API is not possible For more information about the OAuth2 protocol and OpenID Connect see RFC 6749 The OAuth 20 Authorization Frameworkhttptoolsietforghtmlrfc6749 OpenID Authentication 20httpsopenidnetspecsopenidauthentication20html Permissions We dont use the OAuth2 protocol to grant permissions to applications The application permissions are controlled by the user roles For more information see Managing Usersusersmanagingusers You can implement custom permission in your applications assign them to custom user roles and use the OLT platform to verify the custom permissions For more information see Defining Custom Permissions and Rolesapplicationsdefiningcustompermissions"},{"href":"/applications/creating-initial-application","content":" title Creating an Initial Application linktitle Creating a First Application description Tbd date 20190710 publishdate 20190710 categories applications keywords applicationpermissioncustom role menu docs parent applications weight 210 weight 210 sectionsweight 210 draft false aliases applicationsoverviewquickstart toc true tbd Explain use case Procedure 1 In the Developer Area choose Create application Sebastian Apply Title Case in UI elements Application with capital A 2 Specify the application data as required Name Sebastian what makes a meaningful name are there restrictions eg blank spaces and special characters Description Describe the applications use Link Sebastian what URL am I supposed to submit in what format What are the requirements eg 3 To confirm choose Create Application Result The application is created Sebastian what is it good for"},{"href":"/applications/defining-custom-permissions","content":" title Defining Custom Permissions and Roles linktitle Defining Custom Permissions and Roles description Define custom permissions and roles if required date 20190627 publishdate 20190601 categories applications keywords applicationpermissioncustom role menu docs parent applications weight 400 weight 400 sectionsweight 400 draft false aliases applicationsoverviewquickstart toc true Custom permissions allow you to use the OLT role management to control how users can use your custom applications How you design and implement custom permissions in a custom application depends on your user role concept todo Example tbd Jewgeni give an example of what a customer wished to have custom permissionsroles for todo How it Works How does the custom roles mechanism work 1 As an application developer implement in your custom application permissions that a user must have to perform a specific activity 2 As an application developer create custom permissions corresponding to the permissions implemented in your custom application in the OLT portal 3 As a tenant create custom roles based on the custom permissions 4 As a tenant assign the custom roles to users Result When your custom application accesses the OLT platform it can query for custom user permissions based on the users role Developing custom roles and developing custom creations are processes that are mutually dependent You need an idea of user roles to be able to implement custom permissions in your custom applications accordingly You need to have implemented and installed the custom applications to be able to register the custom permissions and custom roles in the OLT platform Creating a Custom Permission Prerequisites As the application developer you have implemented custom permissions in your user application You have registered your custom application to the OLT platform For more information see Registering and Implementing User Applicationsapplicationsregisteringuserapplications Background applications dont have users Therefore you cant control them via custom permissionsroles Procedure 1 Log on to the OLT portal as an application developer 2 Under Developer Area obtain the authentication token 3 Optional To identify the application ID make a GET request to the applicationdeveloperapplicationshttpsapilightelligenceiov1apicollectiontagapplicationdeveloperpaths1applicationdeveloper1applicationsget endpoint 4 To create a custom permission make a POST request to the applicationdeveloperapplicationsapplicationIdcustompermissionshttpsapilightelligenceiov1apicollectiontagrolesandpermissionspaths1applicationdeveloper1applications1applicationId1custompermissionspost endpoint todo Lars endpoint not yet published yet tbd verify link todo Specify the following properties alias Enter for example the technical name of the custom permission implemented in your custom application category Describe for example the resource the custom permission is associated with name Enter a name description Describe the activity the custom permissions allows to perform curl curl X POST httpsapilightelligenceiov1applicationdeveloperapplicationsapplicationIdcustompermissions H Authorization Bearer authenticationToken H ContentType applicationjson d alias sampleresourceread category Sample resource name Read sample resource description Allows to read the sample resource You get a response such as the following json data id 2429c9d18f5643a89813c3ae94853aaf applicationId 6f23aca99f53446587e1b580cf497cda alias sampleresourceread name Read sample resource description Allows to read the sample resource category Sample resource createdAt 20190527T122215681Z updatedAt 20190527T122215681Z Creating and Assigning a Custom Role As a tenant create a custom role and assign the custom application permissions Assign the role to users Prerequisites You have owner authorization You have installed an application with custom permissions Custom permissions of a custom application can only be assigned to custom roles if the custom application is installed Procedure 1 Log on to the OLT portal as a user with owner authorization 2 Under Developer Area obtain the authentication token 3 Optional To identify the application ID of the custom application and to verify its installed make a GET request to the applicationshttpsapilightelligenceiov1apicollectiontagapplications endpoint To only list installed applications use the corresponding search parameter applicationsinstalledtrue 4 To identify the ID of the custom permissions associated with the application make a GET request to the applicationsapplicationIdcustompermissionshttpsapilightelligenceiov1apicollectiontagapplicationspaths1applications1applicationId1custompermissionsget endpoint todo Lars endpoint not yet published yet tbd verify link todo 5 To create a role make a POST request to the roleshttpsapilightelligenceiov1apicollectiontagrolesandpermissionspaths1rolespost endpoint Post the role name and a description of its use custom permission IDs In our example the device manager has write and read authorization In other use cases it might make sense to differentiate between roles that have readwrite authorization and readonly authorization only curl curl X POST httpsapilightelligenceiov1roles H ContentType applicationjson H Authorization Bearer authenticationToken d name Device Manager description Manages devices with write permission customPermissions id 2429c9d18f5643a89813c3ae94853aaf id 9ecebed0804c11e9b4750800200c9a66 You get a response such as the following containing the role ID json data id 8be5ebd5b8b34d2598ec4d42f45154c9 name Device manager displayName Device Manager description Manages devices with read and write permission locked false usersCount 0 createdAt 20190528T120050289Z updatedAt 20190528T120050289Z permissionIds customPermissionIds 2429c9d18f5643a89813c3ae94853aaf 9ecebed0804c11e9b4750800200c9a66 6 To identify the user IDs of user assigned to a tenant make a GET request to the tenantstenantIdusershttpsapilightelligenceiov1apicollectiontagusermanagementpaths1tenants1tenantId1usersget endpoint 7 To assign the custom role to a user make a PUT request to the tenantstenantIdusersuserIdroleshttpsapilightelligenceiov1apicollectiontagusermanagementpaths1tenants1tenantId1users1userId1rolesput endpoint curl curl X PUT httpsapilightelligenceiov1tenantstenantIdusersuserIdroles H ContentType applicationjson H Authorization Bearer authenticationToken d id 8be5ebd5b8b34d2598ec4d42f45154c9 Status 204 means the users roles are updated and the custom role is assigned 8 Optional Verify the roles assigned to users To list the roles assigned to a user make a GET request to the tenantstenantIdusersuserIdroleshttpsapilightelligenceiov1apicollectiontagusermanagementpaths1tenants1tenantId1users1userId1rolesget endpoint In our example you get the following response json meta page 0 pageSize 10 data id 8be5ebd5b8b34d2598ec4d42f45154c9 name Device manager displayName Device Manager description Manages devices with read and write permission locked false usersCount 1 createdAt 20190528T120050289Z updatedAt 20190528T120050289Z permissionIds customPermissionIds To list the users assigned to a role make a GET request to the rolesroleIdusershttpsapilightelligenceiov1apicollectiontagusermanagementpaths1roles1roleId1usersget endpoint Maintaining Custom Permission Properties Changing the Category and Description As a tenant make a PATCH request to the rolesroleIdhttpsapilightelligenceiov1apicollectiontagrolesandpermissionspaths1roles1roleIdpatch endpoint Changing the Name or Alias Once a custom permission is created you cant change its name or alias This is to avoid any manipulation of a permission by the developer after it has been assigned by an application user To change name or alias do the following 1 As an application developer create a new custom permission 2 As a tenant to assign the newly created custom permission make a PATCH request to the rolesroleIdhttpsapilightelligenceiov1apicollectiontagrolesandpermissionspaths1roles1roleIdpatch endpoint 3 As an application developer to delete the obsolete custom permission make a DELETE request to the applicationdeveloperapplicationsapplicationIdcustompermissionspermissionIdhttpsapilightelligenceiov1apicollectiontagrolesandpermissionspaths1applicationdeveloper1applications1applicationId1custompermissions1permissionIddelete endpoint todo Lars endpoint not yet published yet tbd verify link todo Status 204 means the custom permission has been deleted 4 Optional As an application developer to verify the custom permission has been deleted make a GET request to the applicationdeveloperapplicationsapplicationIdcustompermissionshttpsapilightelligenceiov1apicollectiontagrolesandpermissionspaths1applicationdeveloper1applications1applicationId1custompermissionsget endpoint When you delete a custom application with custom permissions or a custom permission the custom permissions are removed from any role to which they were assigned"},{"href":"/applications/draft-notes","content":" title Drafts and notes to be deleted date 20190411 draft true weight 100 description The following open questions are in the following files The are indicated by comments registeringuserapplicationsmd todo 10 replace httpsoauthdebuggercomdebug by OLT debuggger as soon as available in Q3 todo 20 Jewgeni So this will completely change Im not sure exactly how but hopefully they actually can create Applications through the UI soon So you should probably update the getting started guide you have to include some UI elements talk to teamrams Because the APIs for creating and managing APIs will not be used in the same way as default at least talk to Jewgeni here as well because hes driving the change registeringbackgroundapplicationsmd todo 10 in Jewgeni So this will completely change see todo 1 troubleshootingapplicationmanagementmd todo 10 add new feature when available new feature application permissions has nothing to do with custom roles to be implemented in 2019 Q3 will allow the customer to add permissions when ceating an app ie allow internal user management tenantusermanagementread in app Apps can set a list of permissions the user has to accept when they install the app This app needs access to your user data todo 20 check whether bug is fixed 20190517 Simon Nielsen 0934 Uhr A Yes that seem correct we have a ticket to look over the permissions for applications that we will do asap So assume you can access it and that it is correct Christoph Albrecht bearbeitet Simon to be able to do this I need the permission I want to verify I have Issue With the Oauth2 access token access is denied because the request requires usermanagement authorization xoltpermissions tenantusermanagementread I have the feeling Im in a circle to check my app permissions I need permissions that I dont have So in case access to an endpoint is denied I cant identify which endpoints I have permissions for managingapplicationsmd Timon what happens if an app is installed already Who gets which error message How will the respective tenant owner get informed about it tbd status mentioning it is not available to be used available false in its data The UI will show this in some nice UX to make sure the user know exactly what has happned to the installed application Talk more to Team Rams Timon Hass for information on the UX Public User App 0510 1 Verify role John Doe christophalbrechtposteode OWNER 2 Register app name Public User App 0510 withPublicOauth2Client true allowedTenants tenantId b1747579355d4b7aaa72c2336d3a7211 comment Example Inc northern plant redirectUris httpsoauthdebuggercomdebug httpsprodapplicationcomauthcallback Response data id cd8f0ad6290a4feab3ba8df5e9ae88e9 name Public User App 0510 withPublicOauth2Client true oauth2Client id d49014f74f2f420cae2c166a5709ee83 secret YTaaCasWELOb6fqH type confidental publicOauth2Client id bb6ed503ad2e42f3b5d345f338ecea02 type public tenantId b1747579355d4b7aaa72c2336d3a7211 status active createdAt 20190510T090031376Z updatedAt 20190510T090031376Z redirectUris httpsoauthdebuggercomdebug httpsprodapplicationcomauthcallback allowedTenants tenantId b1747579355d4b7aaa72c2336d3a7211 createdAt 20190510T090031392Z installed false comment Example Inc northern plant 3 install the application with a PUT request to the applicationsapplicationIdinstallation endpoint httpsapidevoltdeviov1applicationscd8f0ad6290a4feab3ba8df5e9ae88e9installation Response data tenantId b1747579355d4b7aaa72c2336d3a7211 createdAt 20190510T090716801Z 4 verify the app is installed httpsapidevoltdeviov1applications Response id cd8f0ad6290a4feab3ba8df5e9ae88e9 name Public User App 0510 available true availableCode APPAVAILABLE installation tenantId b1747579355d4b7aaa72c2336d3a7211 createdAt 20190510T090716801Z 5 get the Oauth2 authorization code keyContentTypenameContentTypevalueapplicationxwwwformurlencodeddescriptiontypetext httpsiddevoltdeviov1idauthrealmsoltprotocolopenidconnectauth clientidd49014f74f2f420cae2c166a5709ee83 redirecturihttpsoauthdebuggercomdebug scopeopenid responsetypecode responsemodeformpost a Enter the following request in the browser address field oauth2Client d490 httpsiddevoltdeviov1idauthrealmsoltprotocolopenidconnectauthclientidd49014f74f2f420cae2c166a5709ee83redirecturihttpsoauthdebuggercomdebugscopeopenidresponsetypecoderesponsemodeformpost public oauth2Client bb6 httpsiddevoltdeviov1idauthrealmsoltprotocolopenidconnectauthclientidbb6ed503ad2e42f3b5d345f338ecea02redirecturihttpsoauthdebuggercomdebugscopeopenidresponsetypecoderesponsemodeformpost Result Hello John you are using the application Public User App 0510 On selecting the tenant I get the auth code eyJhbGciOiJkaXIiLCJlbmMiOiJBMTI4Q0JDLUhTMjU2In0V5SWNAKSNY6yV9ZQTpcRwyc0j0veovN2XKMp4dUMvErDC43tKH1J1mvJdMZW53v6t3LCyJhaRSVXZhPISwO8HgR017oSNb7f91Uim1qbtXuJ3yrOrBzbKrENW0J78jnkOB1BrxumClQnsgF7DXnIEeYd7wy7ZwYxz9v6UHgOmciDrEaRQtxiSLYr66ahMNjQqznVde1gvHtfp9t7EbzaFlsx0sJHNbnnVpUbL0hvpNWNHvxjKiR8WTsidXpmVKv3OoYzOF4vLjgnVUlxPwMiMFyXSt57vtudaQ 6 Get access token Put request in browser address field httpsiddevoltdeviov1idauthrealmsoltprotocolopenidconnecttokengranttypeauthorizationcodecodeeyJhbGciOiJkaXIiLCJlbmMiOiJBMTI4Q0JDLUhTMjU2In0V5SWNAKSNY6yV9ZQTpcRwyc0j0veovN2XKMp4dUMvErDC43tKH1J1mvJdMZW53v6t3LCyJhaRSVXZhPISwO8HgR017oSNb7f91Uim1qbtXuJ3yrOrBzbKrENW0J78jnkOB1BrxumClQnsgF7DXnIEeYd7wy7ZwYxz9v6UHgOmciDrEaRQtxiSLYr66ahMNjQqznVde1gvHtfp9t7EbzaFlsx0sJHNbnnVpUbL0hvpNWNHvxjKiR8WTsidXpmVKv3OoYzOF4vLjgnVUlxPwMiMFyXSt57vtudaQclientidd49014f74f2f420cae2c166a5709ee83redirecturihttpsoauthdebuggercomdebug Result Lightelligence An internal server error has occurred The same query posted in Postman renders error invalidrequest errordescription Missing form parameter granttype Note grant type is defined in the query params as authorizationcode content type is defined in the Header as xwwwformurlencoded I have tried fifferent browsers So step 5 in your description The user takes this token and does a normal API call to idlightelligenceiotoken with the code as you defined in your example doesnt work for me Code flow confidential 0515 POST httpsapidevoltdeviov1applicationdeveloperapplications H Authorization Bearer authentication token H ContentType applicationjson d name My application name withPublicOauth2Client false allowedTenants tenantId b1747579355d4b7aaa72c2336d3a7211 comment Example Inc northern plant redirectUris httpsoauthdebuggercomdebug httpsdevapplicationcomauthcallback httpsprodapplicationcomauthcallback resoponse data id d5e83d58c4c541d5973369aa97373b71 name code flow confidential 0515 withPublicOauth2Client false oauth2Client id eb1f394172274cbca572fb81196842b9 secret R0hE0hcCUrrkXJGu type confidental tenantId b1747579355d4b7aaa72c2336d3a7211 status active createdAt 20190515T104513710Z updatedAt 20190515T104513710Z redirectUris httpsoauthdebuggercomdebug httpsdevapplicationcomauthcallback httpsprodapplicationcomauthcallback allowedTenants tenantId b1747579355d4b7aaa72c2336d3a7211 createdAt 20190515T104513725Z installed false comment Example Inc northern plant Install the app PUT httpsapidevoltdeviov1applicationsd5e83d58c4c541d5973369aa97373b71installation H Authorization Bearer authentication token H ContentType applicationjson Response data tenantId b1747579355d4b7aaa72c2336d3a7211 createdAt 20190515T105607306Z Get auth code httpsiddevoltdeviov1idauthrealmsoltprotocolopenidconnectauth clientideb1f394172274cbca572fb81196842b9 redirecturihttpsoauthdebuggercomdebug scopeopenid responsetypecode responsemodeformpost If I check token the response is Client is not allowed to initiate browser login with given responsetype Implicit flow is disabled for the client Client credentials 3rd try Simon I have repeated the whole process including verification steps At the end in step 7 below access with access token invariably fails while it works with authentication token As per step 1 I have owner permission As per step 2 I have the tenantusermanagementread permission required for the tenantstenantIdusersuserIdroles query 1 identify user httpsapidevoltdeviov1tenantsb1747579355d4b7aaa72c2336d3a7211users data id 72fac0d5fe3245998f9ca033e42faaa9 email christophalbrechtposteode firstName John lastName Doe userRoles id 3100bdf890d9471d86aef7ba9eff0a86 name owner displayName Owner description Default owner role with full access to all resources locked true meta page 0 pageSize 10 itemsTotal 1 pagesTotal 1 2 Verify permissions httpsapidevoltdeviov1users72fac0d5fe3245998f9ca033e42faaa9permissions tbd attention is done with portal auth token do it with access token I have the tenantusermanagementread permission required for the tenantstenantIdusersuserIdroles query data permissions id 6a6d57ac7cc74318a3494227d6f9edb5 alias tenantusermanagementread id f76aea85615344719f98d59a3657e259 alias tenantusermanagementwrite id 1a4841224276452f86fe35328a269e0e alias applicationsdevelopmentread id c4d20bb140a94e239cebca970b6cd29d alias applicationsdevelopmentwrite id b25a38ad86f9458d825a8c0234f146e7 alias applicationsread id d430282ca7a3416392f7b6055466d318 alias applicationswrite 3 Register background app httpsapidevoltdeviov1applicationdeveloperapplications name Background Application 3 allowedTenants tenantId b1747579355d4b7aaa72c2336d3a7211 Response data id 6b7dee714dbb4efe9c19b265300327e0 name Background Application 3 withPublicOauth2Client false oauth2Client id f45bffbf00b644bf99521e9e2a1f06ad secret ntkbqzlzLuqa6Fqk type confidental tenantId b1747579355d4b7aaa72c2336d3a7211 status active createdAt 20190509T153830152Z updatedAt 20190509T153830152Z allowedTenants tenantId b1747579355d4b7aaa72c2336d3a7211 createdAt 20190509T153830152Z installed false comment 4 Install Background Application 3 PUT httpsapidevoltdeviov1applications6b7dee714dbb4efe9c19b265300327e0installation H Authorization Bearer authentication token H ContentType applicationjson Response data tenantId b1747579355d4b7aaa72c2336d3a7211 createdAt 20190509T154802668Z 5 Verify Background Application 3 is installed GET httpsapidevoltdeviov1applications meta page 0 pageSize 10 data id 2d8d676f9dac464bbf4894d1ff1b07ca name Background Application available true availableCode APPAVAILABLE installation tenantId b1747579355d4b7aaa72c2336d3a7211 createdAt 20190508T141103380Z id 6b7dee714dbb4efe9c19b265300327e0 name Background Application 3 available true availableCode APPAVAILABLE installation tenantId b1747579355d4b7aaa72c2336d3a7211 createdAt 20190509T154802668Z 6 Get get the client credential flow OAuth2 access token POST httpsiddevoltdeviov1idauthrealmsoltprotocolopenidconnecttoken H ContentType applicationxwwwformurlencoded H tenant b1747579355d4b7aaa72c2336d3a7211 d granttypeclientcredentialsclientidf45bffbf00b644bf99521e9e2a1f06adclientsecretntkbqzlzLuqa6Fqk response accesstoken eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWV0VOVDNBN1FLWllFTURoWFBKd3dVa1Jpd04tREI5OThQeUpoU0gzRDZFIn0eyJqdGkiOiI3ZmYwM2QyMS0yOThiLTRjNTEtOTgwZC02Yjk1Y2Y3NjdmNmMiLCJleHAiOjE1NTgyODIzMjgsIm5iZiI6MCwiaWF0IjoxNTU3NDE4MzI4LCJpc3MiOiJodHRwczovL2lkLmRldi5vbHQtZGV2LmlvL3YxL2lkL2F1dGgvcmVhbG1zL29sdCIsImF1ZCI6ImY0NWJmZmJmLTAwYjYtNDRiZi05OTUyLTFlOWUyYTFmMDZhZCIsInN1YiI6ImI4MjY4MzA1LTk5MjQtNGRkMy1hNmE1LWUyNTFkODY4NzRiMiIsInR5cCI6IkJlYXJlciIsImF6cCI6ImY0NWJmZmJmLTAwYjYtNDRiZi05OTUyLTFlOWUyYTFmMDZhZCIsImF1dGhfdGltZSI6MCwic2Vzc2lvbl9zdGF0ZSI6ImUyZWQyY2ViLTJmNDAtNGI2ZC04YTI4LWQyNjhlNTYzNWQ3MCIsImFjciI6IjEiLCJhbGxvd2VkLW9yaWdpbnMiOlsiKiJdLCJyZXNvdXJjZV9hY2Nlc3MiOnt9LCJzY29wZSI6Im9sdC1hcHBsaWNhdGlvbnMiLCJjbGllbnRIb3N0IjoiMTAuMjQwLjAuOTciLCJjbGllbnRJZCI6ImY0NWJmZmJmLTAwYjYtNDRiZi05OTUyLTFlOWUyYTFmMDZhZCIsImNsaWVudEFkZHJlc3MiOiIxMC4yNDAuMC45NyIsInRlbmFudCI6ImIxNzQ3NTc5LTM1NWQtNGI3YS1hYTcyLWMyMzM2ZDNhNzIxMSJ9v5HV3AQ2cQiGFcPb6pesi4Q3pRrD9M3kElbsiHuHzxLxNeP80sjHrlWO7hcTFuZgdFVCDCxIDezKnZN81CSNFf3X7srclvqnPuEHu9MbeIbisO93uzcdOVzUwDGC2cOtY4cG5CYCasPMY8FYp9LGEb0EsbMvd0MbNCFiJdYhz45GWMt1fKQEJfby91oyHNFACv0fM4NufWha6w0jSklhUsQBVZPAFOHlLcVDsZl4ypTcQPTZIHxpfKmXow0xjcORDbpCJMKNFEoSQBBEltXNWypZF44PmMV5Gy3j6FWmrMG7n1OIleS7AXFhJcvJiKl2p5tA0C5q4hfStzyxgdWg expiresin 864000 refreshexpiresin 950400 refreshtoken eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWV0VOVDNBN1FLWllFTURoWFBKd3dVa1Jpd04tREI5OThQeUpoU0gzRDZFIn0eyJqdGkiOiIwOTcyMmExMy00YjYyLTQ3Y2MtYmY3ZC00MTk5YjM5NTBkZjYiLCJleHAiOjE1NTgzNjg3MjgsIm5iZiI6MCwiaWF0IjoxNTU3NDE4MzI4LCJpc3MiOiJodHRwczovL2lkLmRldi5vbHQtZGV2LmlvL3YxL2lkL2F1dGgvcmVhbG1zL29sdCIsImF1ZCI6ImY0NWJmZmJmLTAwYjYtNDRiZi05OTUyLTFlOWUyYTFmMDZhZCIsInN1YiI6ImI4MjY4MzA1LTk5MjQtNGRkMy1hNmE1LWUyNTFkODY4NzRiMiIsInR5cCI6IlJlZnJlc2giLCJhenAiOiJmNDViZmZiZi0wMGI2LTQ0YmYtOTk1Mi0xZTllMmExZjA2YWQiLCJhdXRoX3RpbWUiOjAsInNlc3Npb25fc3RhdGUiOiJlMmVkMmNlYi0yZjQwLTRiNmQtOGEyOC1kMjY4ZTU2MzVkNzAiLCJyZXNvdXJjZV9hY2Nlc3MiOnt9LCJzY29wZSI6Im9sdC1hcHBsaWNhdGlvbnMifQuP2AceDJOiqua3BEsodkYhSn6vSJd59r11jjujzzbMv5cZsNI3YZhWSWJdGtr4lABnphH1Raw1PRFWENgaZpwISrG71MXEXkdp3wkhsigpg8ieJbg5CKz1pOpVZ5FLUP2RB9Q0tPe8Mz5HGiyJnMqXh0nq4euXDoRPxCgZG5FTxcr5i1zmM7D7Nq6GB6WCuo0ETtoh1ElT8oDCs54IOcir7Ts6hcePWib6EfZIbcCMRSeGcFwvKqIpo1rh94T2UEmoQLjhTP3ntimGk6MQEywHdRj0wnaqTAIjcXxJUkcGBWKZwbFMJntTbW3wWeTamTsZw6lIE5RQ tokentype bearer notbeforepolicy 0 sessionstate e2ed2ceb2f404b6d8a28d268e5635d70 scope oltapplications 7 Fetch roles a with access token GET httpsapidevoltdeviov1tenantsb1747579355d4b7aaa72c2336d3a7211roles H Authorization Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWV0VOVDNBN1FLWllFTURoWFBKd3dVa1Jpd04tREI5OThQeUpoU0gzRDZFIn0eyJqdGkiOiI3ZmYwM2QyMS0yOThiLTRjNTEtOTgwZC02Yjk1Y2Y3NjdmNmMiLCJleHAiOjE1NTgyODIzMjgsIm5iZiI6MCwiaWF0IjoxNTU3NDE4MzI4LCJpc3MiOiJodHRwczovL2lkLmRldi5vbHQtZGV2LmlvL3YxL2lkL2F1dGgvcmVhbG1zL29sdCIsImF1ZCI6ImY0NWJmZmJmLTAwYjYtNDRiZi05OTUyLTFlOWUyYTFmMDZhZCIsInN1YiI6ImI4MjY4MzA1LTk5MjQtNGRkMy1hNmE1LWUyNTFkODY4NzRiMiIsInR5cCI6IkJlYXJlciIsImF6cCI6ImY0NWJmZmJmLTAwYjYtNDRiZi05OTUyLTFlOWUyYTFmMDZhZCIsImF1dGhfdGltZSI6MCwic2Vzc2lvbl9zdGF0ZSI6ImUyZWQyY2ViLTJmNDAtNGI2ZC04YTI4LWQyNjhlNTYzNWQ3MCIsImFjciI6IjEiLCJhbGxvd2VkLW9yaWdpbnMiOlsiKiJdLCJyZXNvdXJjZV9hY2Nlc3MiOnt9LCJzY29wZSI6Im9sdC1hcHBsaWNhdGlvbnMiLCJjbGllbnRIb3N0IjoiMTAuMjQwLjAuOTciLCJjbGllbnRJZCI6ImY0NWJmZmJmLTAwYjYtNDRiZi05OTUyLTFlOWUyYTFmMDZhZCIsImNsaWVudEFkZHJlc3MiOiIxMC4yNDAuMC45NyIsInRlbmFudCI6ImIxNzQ3NTc5LTM1NWQtNGI3YS1hYTcyLWMyMzM2ZDNhNzIxMSJ9v5HV3AQ2cQiGFcPb6pesi4Q3pRrD9M3kElbsiHuHzxLxNeP80sjHrlWO7hcTFuZgdFVCDCxIDezKnZN81CSNFf3X7srclvqnPuEHu9MbeIbisO93uzcdOVzUwDGC2cOtY4cG5CYCasPMY8FYp9LGEb0EsbMvd0MbNCFiJdYhz45GWMt1fKQEJfby91oyHNFACv0fM4NufWha6w0jSklhUsQBVZPAFOHlLcVDsZl4ypTcQPTZIHxpfKmXow0xjcORDbpCJMKNFEoSQBBEltXNWypZF44PmMV5Gy3j6FWmrMG7n1OIleS7AXFhJcvJiKl2p5tA0C5q4hfStzyxgdWg H ContentType applicationjson response errorMessage Access to resource is forbidden errorCode NOACCESSTORESOURCE b The same request with auth token works meta page 0 pageSize 10 data id 2f62f7330b4f461daeaf3485b205a880 name writer displayName Writer description Default writer role including read and write access to every resource except the tenant itself and the tenants user management createdAt 20190319T142139392Z updatedAt 20190319T142139392Z id 3100bdf890d9471d86aef7ba9eff0a86 name owner displayName Owner description Default owner role with full access to all resources createdAt 20190319T142139392Z updatedAt 20190319T142139392Z id a51ea36ff83d4f86bab1a2bb00965401 name reader displayName Reader description Default reader role including read access to every resource except the tenants user management createdAt 20190319T142139392Z updatedAt 20190319T142139392Z Confluence httpslightelligenceatlassiannetwikispacesOCPpages887291905ApplicationManagementWhatisit OAuth Debug 1 Register httpsoauthdebuggercomdebug name OAuth Debug application withPublicOauth2Client false allowedTenants tenantId b1747579355d4b7aaa72c2336d3a7211 comment Example Inc northern plant redirectUris httpsoauthdebuggercomdebug httpsprodapplicationcomauthcallback Result data id 74500c6c9bfd4f2eaef3e0d76c1bc3a7 name OAuth Debug application withPublicOauth2Client false oauth2Client id 7fae27ed2a78400c9cef5848b045d85c secret DsdPjKe2zR4ZEdTp type confidental tenantId b1747579355d4b7aaa72c2336d3a7211 status active createdAt 20190509T062049214Z updatedAt 20190509T062049214Z redirectUris httpsoauthdebuggercomdebug httpsprodapplicationcomauthcallback allowedTenants tenantId b1747579355d4b7aaa72c2336d3a7211 createdAt 20190509T062049214Z installed false comment Example Inc northern plant 2 Install app Result data tenantId b1747579355d4b7aaa72c2336d3a7211 createdAt 20190509T062322777Z 3 Get auth code httpsiddevoltdeviov1idauthrealmsoltprotocolopenidconnectauthclientid7fae27ed2a78400c9cef5848b045d85credirecturihttpsoauthdebuggercomdebugscopeopenidresponsetypecoderesponsemodeformpost Response sh windowserverInfo method POST referer httpsiddevoltdeviov1idauthrealmsoltloginactionsauthenticateclientid7fae27ed2a78400c9cef5848b045d85camptabid5s4YqHSknxc formBody name code value eyJhbGciOiJkaXIiLCJlbmMiOiJBMTI4Q0JDLUhTMjU2In0QvmzuK2enM5rXgG26eWV9AfKpNH3ud44vFN1iVr5cbQntteOe0dAk2gJCTGeGNE5IwKk4CrLbC3c2MfPqsDbyoARo5t2kg4LLB39rGjSHzHqp3TIFWrCWMbO3dUIj3PYh7boO4TyKazkVWUzgrbUl4qZIYMm12fzjaWFHf4vj1uXkFV9YbZhtj04msujOac6iOmtlVGYMEuzTrdU0KqgCTkQ7V6iYBnyI4AocDDuNfTZYRVFGKbY9SsaZNG9PVZKQFMnzo8rpwxU0YlvWW7TLFn9LlEuFdxB6w name sessionstate value da6ee4696030495fa1ce7262a7b65ef9 sh 4 Get acces token httpsiddevoltdeviov1idauthrealmsoltprotocolopenidconnecttokengranttypeauthorizationcodecodeeyJhbGciOiJkaXIiLCJlbmMiOiJBMTI4Q0JDLUhTMjU2In017D7A6KgpGkVqmBOTgEbCglBMhDEoZyiUSUx8gTVjb8h837rXrkFuTmoqD4B6dojG480NVYFpFPIxd2POo9diBM22Svqdw9vIV1DWbwow32ypoRzH9Tca0LYa9Sg8q7CWGdqt5DnOikYb0Siu6Ox8J3Ul2Gh1MsZDJAUVRhz6U65ixkpAJoZwJ2czJzr19YQnjCmM2fhpcbSOnbbljS1bmuVhtVcBec1jbWuHFbbfuXrjXYV9fR6W1DKKBbVs7eUVapl2gZCD3ef50rZ58d2WSpIpVN2f1UU2gclientid7fae27ed2a78400c9cef5848b045d85credirecturihttpsoauthdebuggercomdebugclientsecretDsdPjKe2zR4ZEdTp eyJhbGciOiJkaXIiLCJlbmMiOiJBMTI4Q0JDLUhTMjU2In017D7A6KgpGkVqmBOTgEbCglBMhDEoZyiUSUx8gTVjb8h837rXrkFuTmoqD4B6dojG480NVYFpFPIxd2POo9diBM22Svqdw9vIV1DWbwow32ypoRzH9Tca0LYa9Sg8q7CWGdqt5DnOikYb0Siu6Ox8J3Ul2Gh1MsZDJAUVRhz6U65ixkpAJoZwJ2czJzr19YQnjCmM2fhpcbSOnbbljS1bmuVhtVcBec1jbWuHFbbfuXrjXYV9fR6W1DKKBbVs7eUVapl2gZCD3ef50rZ58d2WSpIpVN2f1UU2g Test Application data id 6f23aca99f53446587e1b580cf497cda name Test Application withPublicOauth2Client false oauth2Client id 6c6caadec6dc4759ac2e2169dd99b39d secret HXOyiBBeq88WQ4y type confidental tenantId b1747579355d4b7aaa72c2336d3a7211 status active createdAt 20190508T100557308Z updatedAt 20190508T100557308Z redirectUris httpsdevapplicationcomauthcallback httpsprodapplicationcomauthcallback allowedTenants tenantId b1747579355d4b7aaa72c2336d3a7211 createdAt 20190508T100557324Z installed false comment Example Inc northern plant httpsapidevoltdeviov1applications6f23aca99f53446587e1b580cf497cdainstallation data tenantId b1747579355d4b7aaa72c2336d3a7211 createdAt 20190508T102720312Z Oauth2 authorization code httpsapidevoltdeviov1idauthrealmsoltprotocolopenidconnectauthclientid6c6caadec6dc4759ac2e2169dd99b39dredirecturihttpsdevapplicationcomauthcallbackscopeopenidresponsetypecoderesponsemodeformpost Registering an public app that has client secret data id b8fcaf339c604958ae1e5a55ea58ef74 name Public application withPublicOauth2Client true oauth2Client id 148e8aa9f71c4e7c9a1ea68de6357558 secret HMdXpVllVQpLlarh type confidental publicOauth2Client id 18b075df010e44ca8ad2081a80a969df type public tenantId b1747579355d4b7aaa72c2336d3a7211 status active createdAt 20190508T125518070Z updatedAt 20190508T125518070Z redirectUris httpsdevapplicationcomauthcallback httpsprodapplicationcomauthcallback allowedTenants tenantId b1747579355d4b7aaa72c2336d3a7211 createdAt 20190508T125518086Z installed false comment Example Inc northern plant installed data tenantId b1747579355d4b7aaa72c2336d3a7211 createdAt 20190508T131203090Z httpsiddevoltdeviov1idauthrealmsoltprotocolopenidconnectauthclientid148e8aa9f71c4e7c9a1ea68de6357558redirecturihttpsdevapplicationcomauthcallbackscopeopenidresponsetypecoderesponsemodeformpost clientidoauth2Clientid redirecturiredirectUri scopeopenid responsetypecode responsemodeformpost Client credentials app app2 data id e09eeb8e15744c56b49ddaa9f3e8c609 name Background Application 2 withPublicOauth2Client false oauth2Client id f622b664bc914f2dad4f538b038ae549 secret K3NGgpnQa4vLFNwr type confidental tenantId b1747579355d4b7aaa72c2336d3a7211 status active createdAt 20190509T105318619Z updatedAt 20190509T105318619Z allowedTenants tenantId b1747579355d4b7aaa72c2336d3a7211 createdAt 20190509T105318635Z installed false comment Install app curl X PUT httpsapidevoltdeviov1applicationse09eeb8e15744c56b49ddaa9f3e8c609installation H Authorization Bearer authentication token From app 2 installed data tenantId b1747579355d4b7aaa72c2336d3a7211 createdAt 20190509T110240591Z 3 Get access token App 1 curl X POST httpsiddevoltdeviov1idauthrealmsoltprotocolopenidconnecttoken H ContentType applicationxwwwformurlencoded H tenant tenant ID d granttypeclientcredentialsclientid28f83819199f4410ae7f722176512b93clientsecretIoSP8S78VRyrPZ2V response accesstoken eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWV0VOVDNBN1FLWllFTURoWFBKd3dVa1Jpd04tREI5OThQeUpoU0gzRDZFIn0eyJqdGkiOiJjZDc5NGM5YS1jZGQzLTQ4ZTYtYmM5ZC01YmVkNGYzNzBlODIiLCJleHAiOjE1NTgyNjM5MjQsIm5iZiI6MCwiaWF0IjoxNTU3Mzk5OTI0LCJpc3MiOiJodHRwczovL2lkLmRldi5vbHQtZGV2LmlvL3YxL2lkL2F1dGgvcmVhbG1zL29sdCIsImF1ZCI6ImY2MjJiNjY0LWJjOTEtNGYyZC1hZDRmLTUzOGIwMzhhZTU0OSIsInN1YiI6ImFmYjM4NWYyLTIyYmMtNDcwMS1hNmMzLTk0NjkxOTQ2ZDM4NiIsInR5cCI6IkJlYXJlciIsImF6cCI6ImY2MjJiNjY0LWJjOTEtNGYyZC1hZDRmLTUzOGIwMzhhZTU0OSIsImF1dGhfdGltZSI6MCwic2Vzc2lvbl9zdGF0ZSI6Ijc3NjhiNzg4LTU1YjYtNDM0Ny04N2IwLTkyYmM3ZTVmNjM0ZSIsImFjciI6IjEiLCJhbGxvd2VkLW9yaWdpbnMiOlsiKiJdLCJyZXNvdXJjZV9hY2Nlc3MiOnt9LCJzY29wZSI6Im9sdC1hcHBsaWNhdGlvbnMiLCJjbGllbnRJZCI6ImY2MjJiNjY0LWJjOTEtNGYyZC1hZDRmLTUzOGIwMzhhZTU0OSIsImNsaWVudEhvc3QiOiIxMC4yNDAuMC4xMjgiLCJjbGllbnRBZGRyZXNzIjoiMTAuMjQwLjAuMTI4IiwidGVuYW50IjoiYjE3NDc1NzktMzU1ZC00YjdhLWFhNzItYzIzMzZkM2E3MjExIn0Fw8ZVnDTm6pZL8q9V3q86gk3oSG3ph6VwkzZo2iVbp21C4y8V7yc3raBpAmcUcZK8YfpN2Mzn1QiCMUavdPysSiCYpyF5UzEVNZJY7kIOUEg0PHZKsnQypOzipxtNHToD1YtososZdySyS12T7FhI7adgOI5jo0wxDkjxs8hbrZHJPFNrB9rHm6iGYcnirUgABbYt0vYzsvZULdM7Vkx9ihrkwcl7PFFojz9ESSiPi6eThrvRL5rmfuisqqI628dBwIuhjhmS7Of9oX28If16NNe9kdSBau3Yq5LA0sZbNN3GG7YxfmKcYSN9lsd2hJEI1eyv1zMLVxQ expiresin 864000 refreshexpiresin 950400 refreshtoken eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWV0VOVDNBN1FLWllFTURoWFBKd3dVa1Jpd04tREI5OThQeUpoU0gzRDZFIn0eyJqdGkiOiI3YjE4OTg5Mi04ZWViLTQyZTYtYTNhNy05MDI5ZjZhYWI2YzAiLCJleHAiOjE1NTgzNTAzMjQsIm5iZiI6MCwiaWF0IjoxNTU3Mzk5OTI0LCJpc3MiOiJodHRwczovL2lkLmRldi5vbHQtZGV2LmlvL3YxL2lkL2F1dGgvcmVhbG1zL29sdCIsImF1ZCI6ImY2MjJiNjY0LWJjOTEtNGYyZC1hZDRmLTUzOGIwMzhhZTU0OSIsInN1YiI6ImFmYjM4NWYyLTIyYmMtNDcwMS1hNmMzLTk0NjkxOTQ2ZDM4NiIsInR5cCI6IlJlZnJlc2giLCJhenAiOiJmNjIyYjY2NC1iYzkxLTRmMmQtYWQ0Zi01MzhiMDM4YWU1NDkiLCJhdXRoX3RpbWUiOjAsInNlc3Npb25fc3RhdGUiOiI3NzY4Yjc4OC01NWI2LTQzNDctODdiMC05MmJjN2U1ZjYzNGUiLCJyZXNvdXJjZV9hY2Nlc3MiOnt9LCJzY29wZSI6Im9sdC1hcHBsaWNhdGlvbnMifQDk0MtfG4CReilv6eEnhiOal5cyArYwvLzLOmazEvC1HZpHke0pAXEu7gWTOpVjHmBX8jaTIBEe9CukI4yOGezss7mZ2mp35G4gVKeK12YYSafMY7zsqxly4iylnplb2O4ZjV4TI5lomSXHlXU9g2szP1YnwwLN0RpzFL3rpqsuELglBPqo6RV99N3md4d9YiIEaEKeLOgIwWrQMJDDcdb3Ow5vSCT9GuYXUYEfA1gTvRUIeakf0hbD8DsTCxHIcUOx43FniLJu8Ly6vbBkO5uQcELo6rXxOHKIHDvRwrTpCdIh002pWwYfrg72vQZrs03K8Ol9fL8EIWxg tokentype bearer notbeforepolicy 0 sessionstate 7768b78855b6434787b092bc7e5f634e scope oltapplications App 2 curl X POST httpsiddevoltdeviov1idauthrealmsoltprotocolopenidconnecttoken H ContentType applicationxwwwformurlencoded H tenant tenant ID d granttypeclientcredentialsclientid28f83819199f4410ae7f722176512b93clientsecretIoSP8S78VRyrPZ2V response accesstoken eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWV0VOVDNBN1FLWllFTURoWFBKd3dVa1Jpd04tREI5OThQeUpoU0gzRDZFIn0eyJqdGkiOiI4YzhlMDAxMi1lYWFiLTRkYzYtYmZiOC1iNTUyNTQ3YTJiMGEiLCJleHAiOjE1NTgyNjA2OTIsIm5iZiI6MCwiaWF0IjoxNTU3Mzk2NjkyLCJpc3MiOiJodHRwczovL2lkLmRldi5vbHQtZGV2LmlvL3YxL2lkL2F1dGgvcmVhbG1zL29sdCIsImF1ZCI6IjI4ZjgzODE5LTE5OWYtNDQxMC1hZTdmLTcyMjE3NjUxMmI5MyIsInN1YiI6IjZmM2Q2MGQwLWJlMzAtNGNiYS1hOTU1LTczMDYzMDExNDg3YyIsInR5cCI6IkJlYXJlciIsImF6cCI6IjI4ZjgzODE5LTE5OWYtNDQxMC1hZTdmLTcyMjE3NjUxMmI5MyIsImF1dGhfdGltZSI6MCwic2Vzc2lvbl9zdGF0ZSI6IjAwNjY4OGIxLTEzZjEtNGJhZi1hNzQxLTc4NTdmZmE5NjM2ZiIsImFjciI6IjEiLCJhbGxvd2VkLW9yaWdpbnMiOlsiKiJdLCJyZXNvdXJjZV9hY2Nlc3MiOnt9LCJzY29wZSI6Im9sdC1hcHBsaWNhdGlvbnMiLCJjbGllbnRJZCI6IjI4ZjgzODE5LTE5OWYtNDQxMC1hZTdmLTcyMjE3NjUxMmI5MyIsImNsaWVudEhvc3QiOiIxMC4yNDAuMC42NiIsImNsaWVudEFkZHJlc3MiOiIxMC4yNDAuMC42NiIsInRlbmFudCI6ImIxNzQ3NTc5LTM1NWQtNGI3YS1hYTcyLWMyMzM2ZDNhNzIxMSJ9v7cu0zDJY0BqLSmTUauJW46XkGWOuNxVPV7qY4530FZU2BHwZuR5URPlJtHbWpe2QUqxSXboq4dPnL9PmCltUO11DT6cartsJAte4rvvJE2WHbYtmRasn8bPxZ9ZVFXIHQRDnIKDu0xPl29ijyqkWbTawdxvuLkwThi4GuapqWAjCX2pNBivmuT25QVBAFADcHuxRPgJ5DJ8BbFIOYRWjGRAO9v7RLjANSRjXLCS69WP6nKtZn0xJT0GXCUyyLeozI4FMWosq9UEFb2hIlXi4kJbkKpD6KsXq5RGEL7Ap812DUdTDzfA1IcqLH14S38PTnHCFwRssbx0g expiresin 863999 refreshexpiresin 950399 refreshtoken eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWV0VOVDNBN1FLWllFTURoWFBKd3dVa1Jpd04tREI5OThQeUpoU0gzRDZFIn0eyJqdGkiOiI4ZGMxYWQ3ZC04ZDg1LTQwZjUtOWNjZS05NWZhMGQwNzNlNDEiLCJleHAiOjE1NTgzNDcwOTIsIm5iZiI6MCwiaWF0IjoxNTU3Mzk2NjkzLCJpc3MiOiJodHRwczovL2lkLmRldi5vbHQtZGV2LmlvL3YxL2lkL2F1dGgvcmVhbG1zL29sdCIsImF1ZCI6IjI4ZjgzODE5LTE5OWYtNDQxMC1hZTdmLTcyMjE3NjUxMmI5MyIsInN1YiI6IjZmM2Q2MGQwLWJlMzAtNGNiYS1hOTU1LTczMDYzMDExNDg3YyIsInR5cCI6IlJlZnJlc2giLCJhenAiOiIyOGY4MzgxOS0xOTlmLTQ0MTAtYWU3Zi03MjIxNzY1MTJiOTMiLCJhdXRoX3RpbWUiOjAsInNlc3Npb25fc3RhdGUiOiIwMDY2ODhiMS0xM2YxLTRiYWYtYTc0MS03ODU3ZmZhOTYzNmYiLCJyZXNvdXJjZV9hY2Nlc3MiOnt9LCJzY29wZSI6Im9sdC1hcHBsaWNhdGlvbnMifQHN0JYs0PchnO1yOiEt05ZLT0slpJgxuHjnAsR6bIPDMeBT0g95ejZvSHp5WsHOeNP8Iu3Z8JCBIEQnTjoSxUVycCtL13ujODsmrzzEFDz4807O4BqMcoTewxBxlCBSxXzn9mrRPPOQkWUnwxVLXy1tcgZns3X9DGtmfWNz7HBwzhjutk2fpY2GOMuENgjhhVLhYYYuhY1E74iCt9uK8XcQsWZKHHxMdNheJ4Us3E78sM9skSUUaa6dIN9dhSD51uB61qiA6zEX91j6FYwSnnLi6CnZMNcwT8ROhxKOyxN98JDRJCwTcPHFcAeFHlTYohRqFTHVnuwAg38Q tokentype bearer notbeforepolicy 0 sessionstate 006688b113f14bafa7417857ffa9636f scope oltapplications 4 fetch some data curl X GET httpsapidevoltdeviov1tenantsb1747579355d4b7aaa72c2336d3a7211roles H Authorization Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWV0VOVDNBN1FLWllFTURoWFBKd3dVa1Jpd04tREI5OThQeUpoU0gzRDZFIn0eyJqdGkiOiI4YzhlMDAxMi1lYWFiLTRkYzYtYmZiOC1iNTUyNTQ3YTJiMGEiLCJleHAiOjE1NTgyNjA2OTIsIm5iZiI6MCwiaWF0IjoxNTU3Mzk2NjkyLCJpc3MiOiJodHRwczovL2lkLmRldi5vbHQtZGV2LmlvL3YxL2lkL2F1dGgvcmVhbG1zL29sdCIsImF1ZCI6IjI4ZjgzODE5LTE5OWYtNDQxMC1hZTdmLTcyMjE3NjUxMmI5MyIsInN1YiI6IjZmM2Q2MGQwLWJlMzAtNGNiYS1hOTU1LTczMDYzMDExNDg3YyIsInR5cCI6IkJlYXJlciIsImF6cCI6IjI4ZjgzODE5LTE5OWYtNDQxMC1hZTdmLTcyMjE3NjUxMmI5MyIsImF1dGhfdGltZSI6MCwic2Vzc2lvbl9zdGF0ZSI6IjAwNjY4OGIxLTEzZjEtNGJhZi1hNzQxLTc4NTdmZmE5NjM2ZiIsImFjciI6IjEiLCJhbGxvd2VkLW9yaWdpbnMiOlsiKiJdLCJyZXNvdXJjZV9hY2Nlc3MiOnt9LCJzY29wZSI6Im9sdC1hcHBsaWNhdGlvbnMiLCJjbGllbnRJZCI6IjI4ZjgzODE5LTE5OWYtNDQxMC1hZTdmLTcyMjE3NjUxMmI5MyIsImNsaWVudEhvc3QiOiIxMC4yNDAuMC42NiIsImNsaWVudEFkZHJlc3MiOiIxMC4yNDAuMC42NiIsInRlbmFudCI6ImIxNzQ3NTc5LTM1NWQtNGI3YS1hYTcyLWMyMzM2ZDNhNzIxMSJ9v7cu0zDJY0BqLSmTUauJW46XkGWOuNxVPV7qY4530FZU2BHwZuR5URPlJtHbWpe2QUqxSXboq4dPnL9PmCltUO11DT6cartsJAte4rvvJE2WHbYtmRasn8bPxZ9ZVFXIHQRDnIKDu0xPl29ijyqkWbTawdxvuLkwThi4GuapqWAjCX2pNBivmuT25QVBAFADcHuxRPgJ5DJ8BbFIOYRWjGRAO9v7RLjANSRjXLCS69WP6nKtZn0xJT0GXCUyyLeozI4FMWosq9UEFb2hIlXi4kJbkKpD6KsXq5RGEL7Ap812DUdTDzfA1IcqLH14S38PTnHCFwRssbx0g H ContentType applicationjson Result With the client credentials flow Im able to get the access token But when i try to get the roles for example curl X GET httpsapidevoltdeviov1tenantsb1747579355d4b7aaa72c2336d3a7211roles H Authorization Bearer eyJhbGciOiJSUzI1NiIsInR H ContentType applicationjson access is denied Display users with auth token httpsapidevoltdeviov1tenantsb1747579355d4b7aaa72c2336d3a7211users result data id 72fac0d5fe3245998f9ca033e42faaa9 email christophalbrechtposteode firstName John lastName Doe userRoles id 3100bdf890d9471d86aef7ba9eff0a86 name owner displayName Owner description Default owner role with full access to all resources locked true meta page 0 pageSize 10 itemsTotal 1 pagesTotal 1 Display user with access token httpsapidevoltdeviov1tenantsb1747579355d4b7aaa72c2336d3a7211users Access to resource is forbidden That seems not to be the solution Im making a different error When I display the tenants user with httpsapidevoltdeviov1tenantsb1747579355d4b7aaa72c2336d3a7211users tenantusermanagementread with the authentication token from the portal my user is displayed as expected When I do the same with the access token for my app access is denied Also I have ensured in the portal that Im owner so I also should be able to fetch the roles correct But access is still denied data id 72fac0d5fe3245998f9ca033e42faaa9 email christophalbrechtposteode firstName John lastName Doe userRoles id 3100bdf890d9471d86aef7ba9eff0a86 name owner displayName Owner description Default owner role with full access to all resources locked true meta page 0 pageSize 10 itemsTotal 1 pagesTotal 1 Display permissions for my user ID In the portal I have now ensured that Im owner Nevertheless Access to resource is forbidden So I tried the permissions endpoint httpsapidevoltdeviov1users6f3d60d0be304cbaa95573063011487cpermissions H Authorization Bearer eyJhbGciOiJSUzI1NiIsInR H ContentType applicationjson access is denied errorMessage User is not permitted to access this resource errorCode IDFORBIDDEN List installed tenants When I do httpsapidevoltdeviov1applicationinfoinstalledtenants with access token access is granted meta page 0 pageSize 10 data tenantId b1747579355d4b7aaa72c2336d3a7211 name MusterTenant Get invites For example httpsapidevoltdeviov1tenantsb1747579355d4b7aaa72c2336d3a7211invites works with auth token but not access token What is it that I dont get tbd Simon I assume the Client Credentials flow is for our internal use only not for customers correct withPublicOauth2Clienttrue does not mean that we actually support 3 flow types the third being the implicit flow where the browser gets the access token directly from the server without first having to exchange the authorization code with the access token correct see httpsspeakerdeckcomnbarbettinioauthandopenidconnectinplainenglishslide38 and httpsspeakerdeckcomnbarbettinioauthandopenidconnectinplainenglishslide21 ErledigenLikegestern Simon Nielsen 1 Client credentials flow is fully supported for all our applications When youre building a background service that for example list all devices for all installed tenants youre not accessing the data as a user but rather as a client We have this specific endpoint that can be used only by clients to see all Installed Tenants which the service then can query to the API with httpsapilightelligenceiov1apicollectiontagapplicationinfopaths1applicationinfo1installedtenantsget 2 No we dont support implicit flow due to recommendations from the OAuth2 board12 What it opens up is to use the Authorization Code Grant from a browser with a Public client without a secret less secure 1 httpsoauthnet2granttypesimplicit 2 httpsmediumcomoauth2whyyoushouldstopusingtheoauthimplicitgrant2436ced1c926 tbd Simon I have the impression the we have to add the step to get the Oauth2 authorization code that we then can exchange for the access token by redirecting the app to the URL of our OLT authorization server httpsidlightelligenceiov1idauthrealmsoltprotocolopenidconnectauth clientidoauth2Clientid redirecturiredirectUri scopeopenid responsetypecode responsemodeformpost How does the response with the auth code look like Yes that would be good to have in the public documentation but we should also recommend our users to use our JavaScriptSDK whenever that is available please talk to Jonathan Stoye about that Otherwise the callback is a formpost where in the body you can get the code For browsers you often use the query parameters and there it will also be the code parameter that you take The flow is explained more in the getting started guideApplication Management Getting Started Likevor 21 Minuten Simon Nielsen I use this tool for testing oauth flows httpsoauthdebuggercom works pretty good Application management for developers List the capabilities the applicatondeveloper endpoint provides Link to the applicationdeveloper endpoint in the OpenAPI docs OAuth 20 Client Types httptutorialsjenkovcomoauth2clienttypeshtml"},{"href":"/applications/managing-applications","content":" title Managing Custom Applications linktitle Managing Custom Applications description Perform activities to maintain your custom applications as an application developer or as a tenant owner using custom applications date 20190627 publishdate 20190601 categories applications keywords applicationwhitelistinginstalling applications tags deactivating applications menu docs parent applications weight 300 weight 300 sectionsweight 300 draft false aliases applicationsoverviewquickstart toc true As the developer deactivate custom applications temporarily or whitelist additional tenants for example As a tenant owner install or uninstall custom applications for example Verifying Permissions To manage custom applications verify you have the permissions required for the specific endpoints Procedure 1 To identify your user ID make a GET request to the tenantstenantIDusershttpsapilightelligenceiov1apicollectiontagusermanagementpaths1tenants1tenantId1usersget endpoint You get user data such as the user ID in our example 72fa json data id 72fac0d5fe3245998f9ca033e42faaa9 email JohnDoeexamplecom firstName John lastName Doe userRoles id 3100bdf890d9471d86aef7ba9eff0a86 name owner displayName Owner description Default owner role with full access to all resources locked true 2 To list your permissions make a GET request to the usersuserIdpermissionshttpsapilightelligenceiov1apicollectiontaguserspaths1users1userId1tenants1tenantIdget endpoint Result You get the users permissions for example the permissions related to application management json data permissions id 1a4841224276452f86fe35328a269e0e alias applicationsdevelopmentread id c4d20bb140a94e239cebca970b6cd29d alias applicationsdevelopmentwrite id b25a38ad86f9458d825a8c0234f146e7 alias applicationsread id d430282ca7a3416392f7b6055466d318 alias applicationswrite Managing Applications as a Developer We provide functions to manage custom applications you have developed Examples Deactivate an application temporarily or change application properties Allow tenants to install applications by registering an application to tenants whitelisting Changing Application Properties Change the following properties if required application name application type web application with confidential OAuth2 client or user agent application with public OAuth2 client redirect URLs teaser description to describe the application briefly URL to provide additional information about the application Procedure Make a PATCH request to the use the applicationdeveloperapplicationsapplicationIdhttpsapilightelligenceiov1apicollectiontagapplicationdeveloperpaths1applicationdeveloper1applications1applicationIdpatch endpoint Deactivating an Application Temporarily To maintain a custom application deactivate it temporarily Do some fixes for example and ensure the application isnt being used during this time The user will see a message that the app is inactive and is asked to contact the developer for more information Procedure Make a PATCH request to the use the applicationdeveloperapplicationsapplicationIdhttpsapilightelligenceiov1apicollectiontagapplicationdeveloperpaths1applicationdeveloper1applications1applicationIdpatch endpoint Set the status property to inactive Regenerating the OAuth2 Client Secret Regenerate the OAuth2 client secret in the following cases for example You have given the OAuth2 client secret out to someone that shouldnt have it For security reasons you want to make sure no possible attacker has access to your application data You have forgotten or lost the OAuth2 client secret when registering your application You can always generate a new OAuth2 client secret The new OAuth2 client secret invalidates any previous OAuth2 client secret For security reasons we dont allow for fetching OAuth2 client secrets already created Procedure Make a POST request to the applicationdeveloperapplicationsapplicationIdsecrethttpsapilightelligenceiov1apicollectiontagapplicationdeveloperpaths1applicationdeveloper1applications1applicationId1secretpost endpoint Whitelisting Additional Tenants To install applications in additional tenants whitelist the tenants Control the tenants that are to use an application Background To be able to install an application in a tenant you must have whitelisted the tenant Procedure To whitelist a tenant make a PUT request to the applicationdeveloperapplicationsapplicationIdallowedtenantstenantIdhttpsapilightelligenceiov1apicollectiontagapplicationdeveloperpaths1applicationdeveloper1applications1applicationId1allowedtenants1tenantIdput endpoint To control the tenants that are to use an application make requests to the following endpoints To list whitelisted tenants make a GET request to the applicationdeveloperapplicationsapplicationIdallowedtenantshttpsapilightelligenceiov1apicollectiontagapplicationdeveloperpaths1applicationdeveloper1applications1applicationId1allowedtenantsget endpoint To revoke whitelisting for a tenant make a DELETE request to the applicationdeveloperapplicationsapplicationIdallowedtenantstenantIdhttpsapilightelligenceiov1apicollectiontagapplicationdeveloperpaths1applicationdeveloper1applications1applicationId1allowedtenants1tenantIddelete endpoint Deleting an Application Delete a custom application if its obsolete for example Procedure 1 Identify the whitelisted tenants who might have installed the application Inform the tenant owners to uninstall the application To identify whitelisted tenants make a GETrequest to the applicationdeveloperapplicationsapplicationIdallowedtenantshttpsapilightelligenceiov1apicollectiontagapplicationdeveloperpaths1applicationdeveloper1applications1applicationId1allowedtenantsget endpoint Note If you have a background application you can list the tenants that have actually installed your application See Listing Tenantslistingtenants 2 Make a DELETE request to the applicationdeveloperapplicationsapplicationIdhttpsapilightelligenceiov1apicollectiontagapplicationdeveloperpaths1applicationdeveloper1applications1applicationIddelete endpoint Listing Tenants If you have a background application list all tenants which have currently installed the application and to whose data the application therefore has access to You get the tenant IDs and tenant names The endpoint only fetches uptodate data from the tenants that currently have installed your application Prerequisites Your custom application is a background application using client credentials For more information see Registering and Implementing Background Applicationsapplicationsregisteringbackgroundapplications Procedure Make a GET request to the applicationinfoinstalledtenantshttpsapilightelligenceiov1apicollectiontagapplicationinfopaths1applicationinfo1installedtenantsget endpoint Managing Applications as a Tenant Owner Install or uninstall custom applications Installing an Application Roll out custom applications to a tenant Prerequisites The custom application is whitelisted Procedure 1 List all applications available whitelisted for a tenant 1 Log on to the tenant 2 Under Developer Area copy the authorization token 2 Make a GET request to the applicationshttpsapilightelligenceiov1apicollectiontagapplicationspaths1applicationsget endpoint To get only the applications not yet installed set the query parameter installed to false You get the application name and application ID If the application property available is true the application can be installed json data id 570e0a66974b40dd8108844da77719e9 name Display Motion Sensor Time Series Data available true availableCode APPAVAILABLE installation tenantId 570e0a66974b40dd8108844da77719e9 createdAt 20190428T231721Z 2 Install an application 1 Ensure that the application property available is true Only available whitelisted applications can be installed 2 Ensure that your user has authorization as writer or owner 3 Make a PUT request to the applicationsapplicationIdinstallationhttpsapilightelligenceiov1apicollectiontagapplicationspaths1applications1applicationId1installationput endpoint Performing Miscellaneous Activities Uninstall a custom application no longer needed for example Procedure To verify the application properties make a GET request to the applicationsapplicationIdhttpsapilightelligenceiov1apicollectiontagapplicationspaths1applications1applicationIdget endpoint whether an application is available to be installed in a tenant in which tenants an application is currently installed To uninstall an application make a DELETE request to the applicationsapplicationIdinstallationhttpsapilightelligenceiov1apicollectiontagapplicationspaths1applications1applicationId1installationdelete endpoint Note Your custom application implements custom permissions todo Lars check todo If you uninstall a custom application with custom permissions all role assignments of those custom permissions are removed If you reinstall the application you have to assign the custom permissions to the custom role again For more information about custom roles and permissions see Defining Custom Permissions and Rolesapplicationsdefiningcustompermissions "},{"href":"/applications/registering-background-applications","content":" title Registering and Implementing Background Applications linktitle Registering and Implementing Background Applications description To turn a background application into an OAuth2 client register it to the OLT platform and implement OAuth2 in your application date 20190601 publishdate 20190601 categories applications keywords applicationbackground applicationOAuth2 menu docs parent applications weight 240 weight 240 sectionsweight 240 draft false aliases applicationsoverviewquickstart toc true To turn a background application into an OAuth2 client register it to the OLT platform and implement OAuth2 in your application Prerequisites To register applications to the OLT platform you have owner or writer authorization Note Checking permissions If you use default roles to verify you have owner or writer authorization in the OLT portal under Users check your roles If you use custom roles verify the user permissions for the specific endpoints For more information see Defining Custom Rolesuserscreatingcustomroles Registering and Installing a Background Application 1 From the OLT portal under Developer Area obtain the tenant ID and the authentication token of the tenant who is to own the application For more information see the analogous process under Creating and Implementing User Applicationsapplicationsregisteringuserapplications 2 To register the application to the OLT platform make a POST request to the applicationdeveloperapplicationshttpsapilightelligenceiov1apicollectiontagapplicationdeveloperpaths1applicationdeveloper1applicationspost endpoint The request passes the following data the authentication token the tenant ID of the tenant owning the application Note Managing Applications You can change the application properties later for example the application name For more information see Managing Custom Applicationsapplicationsmanagingapplications Example curl X POST httpsapilightelligenceiov1applicationdeveloperapplications H Authorization Bearer authentication token H ContentType applicationjson d name Sample Application allowedTenants tenantId tenant Id You get a response similar to the following containing the following data application ID in our example 9aa3b6188cd24dc0b7a1da6df60af254 OAuth2 client ID in our example 44c11af1c5494c1898bdbcef92c8b45b OAuth2 client secret in our example vr7i9P9brKIGYIQ 200 data id 9aa3b6188cd24dc0b7a1da6df60af254 name Test Application oauth2Client id 44c11af1c5494c1898bdbcef92c8b45b secret vr7i9P9brKIGYIQ type confidential 3 Implement a process to store the OAuth2 client secret Note Why store the OAuth2 client secret To display application data you can use the applicationdeveloperapplicationshttpsapilightelligenceiov1apicollectiontagapplicationdeveloperpaths1applicationdeveloper1applicationsget endpoint But the response does not contain the OAuth2 client secret If you dont store it you have to regenerate it making a POST request to the applicationdeveloperapplicationsapplicationIdsecrethttpsapilightelligenceiov1apicollectiontagapplicationdeveloperpaths1applicationdeveloper1applications1applicationId1secretpost endpoint 4 To install the application make a PUT request to the applicationsapplication Idinstallationhttpsapilightelligenceiov1apicollectiontagapplicationspaths1applications1applicationId1installationput endpoint curl X PUT httpsapilightelligenceiov1applicationsapplication IDinstallation H Authorization Bearer authentication token H ContentType applicationjson In our example curl X PUT httpsapilightelligenceiov1applications9aa3b6188cd24dc0b7a1da6df60af254installation H Authorization Bearer authentication token H ContentType applicationjson 5 Optional To verify the installation make a GET request to the applicationsapplicationIdhttpsapilightelligenceiov1apicollectiontagapplicationspaths1applications1applicationIdget endpoint Result Your background application is registered to the OLT platform and installed in a tenant The background application can get data from the tenant in which the application is installed without logging on to the OLT platform Installing the Application in Multiple Tenants To install an existing application in additional tenants whitelist the tenants and install the application in each of them For more information see Managing Custom Applicationsapplicationsmanagingapplications Implementing a Background Application Implement a confidential OAuth2 client with OAuth2 client secret Procedure To get the OAuth2 access token do the following Implement a process to submit in the request header the tenant ID of the tenant in which the application is installed To use the OAuth2 client credentials flow set the grant type parameter to clientcredentials Submit the OAuth2 client ID and the OAuth2 client secret 1 Make a POST request to the idauthrealmsoltprotocolopenidconnecttoken endpoint curl curl X POST httpsidlightelligenceiov1idauthrealmsoltprotocolopenidconnecttoken H ContentType applicationxwwwformurlencoded H tenant tenant ID d granttypeclientcredentialsclientidoauth2Clientidclientsecretoauth2Clientsecret In our example curl curl X POST httpsidlightelligenceiov1idauthrealmsoltprotocolopenidconnecttoken H ContentType applicationxwwwformurlencoded H tenant tenant ID d granttypeclientcredentialsclientid44c11af1c5494c1898bdbcef92c8b45bclientsecretvr7i9P9brKIGYIQ You get a response like the following containing the OAuth2 access token allowing your application to access the tenant data json accesstoken eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWV0VOVDNBN1FLWllFTURoWFBKd3dVa1Jpd04tREI5OThQeUpoU0gzRDZFIn0eyJqdGkiOiI4YzhlMDAxMi1lYWFiLTRkYzYtYmZiOC1iNTUyNTQ3YTJiMGEiLCJleHAiOjE1NTgyNjA2OTIsIm5iZiI6MCwiaWF0IjoxNTU3Mzk2NjkyLCJpc3MiOiJodHRwczovL2lkLmRldi5vbHQtZGV2LmlvL3YxL2lkL2F1dGgvcmVhbG1zL29sdCIsImF1ZCI6IjI4ZjgzODE5LTE5OWYtNDQxMC1hZTdmLTcyMjE3NjUxMmI5MyIsInN1YiI6IjZmM2Q2MGQwLWJlMzAtNGNiYS1hOTU1LTczMDYzMDExNDg3YyIsInR5cCI6IkJlYXJlciIsImF6cCI6IjI4ZjgzODE5LTE5OWYtNDQxMC1hZTdmLTcyMjE3NjUxMmI5MyIsImF1dGhfdGltZSI6MCwic2Vzc2lvbl9zdGF0ZSI6IjAwNjY4OGIxLTEzZjEtNGJhZi1hNzQxLTc4NTdmZmE5NjM2ZiIsImFjciI6IjEiLCJhbGxvd2VkLW9yaWdpbnMiOlsiKiJdLCJyZXNvdXJjZV9hY2Nlc3MiOnt9LCJzY29wZSI6Im9sdC1hcHBsaWNhdGlvbnMiLCJjbGllbnRJZCI6IjI4ZjgzODE5LTE5OWYtNDQxMC1hZTdmLTcyMjE3NjUxMmI5MyIsImNsaWVudEhvc3QiOiIxMC4yNDAuMC42NiIsImNsaWVudEFkZHJlc3MiOiIxMC4yNDAuMC42NiIsInRlbmFudCI6ImIxNzQ3NTc5LTM1NWQtNGI3YS1hYTcyLWMyMzM2ZDNhNzIxMSJ9v7cu0zDJY0BqLSmTUauJW46XkGWOuNxVPV7qY4530FZU2BHwZuR5URPlJtHbWpe2QUqxSXboq4dPnL9PmCltUO11DT6cartsJAte4rvvJE2WHbYtmRasn8bPxZ9ZVFXIHQRDnIKDu0xPl29ijyqkWbTawdxvuLkwThi4GuapqWAjCX2pNBivmuT25QVBAFADcHuxRPgJ5DJ8BbFIOYRWjGRAO9v7RLjANSRjXLCS69WP6nKtZn0xJT0GXCUyyLeozI4FMWosq9UEFb2hIlXi4kJbkKpD6KsXq5RGEL7Ap812DUdTDzfA1IcqLH14S38PTnHCFwRssbx0g expiresin 863999 refreshexpiresin 950399 refreshtoken eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWV0VOVDNBN1FLWllFTURoWFBKd3dVa1Jpd04tREI5OThQeUpoU0gzRDZFIn0eyJqdGkiOiI4ZGMxYWQ3ZC04ZDg1LTQwZjUtOWNjZS05NWZhMGQwNzNlNDEiLCJleHAiOjE1NTgzNDcwOTIsIm5iZiI6MCwiaWF0IjoxNTU3Mzk2NjkzLCJpc3MiOiJodHRwczovL2lkLmRldi5vbHQtZGV2LmlvL3YxL2lkL2F1dGgvcmVhbG1zL29sdCIsImF1ZCI6IjI4ZjgzODE5LTE5OWYtNDQxMC1hZTdmLTcyMjE3NjUxMmI5MyIsInN1YiI6IjZmM2Q2MGQwLWJlMzAtNGNiYS1hOTU1LTczMDYzMDExNDg3YyIsInR5cCI6IlJlZnJlc2giLCJhenAiOiIyOGY4MzgxOS0xOTlmLTQ0MTAtYWU3Zi03MjIxNzY1MTJiOTMiLCJhdXRoX3RpbWUiOjAsInNlc3Npb25fc3RhdGUiOiIwMDY2ODhiMS0xM2YxLTRiYWYtYTc0MS03ODU3ZmZhOTYzNmYiLCJyZXNvdXJjZV9hY2Nlc3MiOnt9LCJzY29wZSI6Im9sdC1hcHBsaWNhdGlvbnMifQHN0JYs0PchnO1yOiEt05ZLT0slpJgxuHjnAsR6bIPDMeBT0g95ejZvSHp5WsHOeNP8Iu3Z8JCBIEQnTjoSxUVycCtL13ujODsmrzzEFDz4807O4BqMcoTewxBxlCBSxXzn9mrRPPOQkWUnwxVLXy1tcgZns3X9DGtmfWNz7HBwzhjutk2fpY2GOMuENgjhhVLhYYYuhY1E74iCt9uK8XcQsWZKHHxMdNheJ4Us3E78sM9skSUUaa6dIN9dhSD51uB61qiA6zEX91j6FYwSnnLi6CnZMNcwT8ROhxKOyxN98JDRJCwTcPHFcAeFHlTYohRqFTHVnuwAg38Q tokentype bearer notbeforepolicy 0 sessionstate 006688b113f14bafa7417857ffa9636f scope oltapplications 2 To verify that your application can access tenant data fetch some data from a tenant that has installed the application with the authorization token retrieved from the application For example list the devices registered to the tenant by making a GET request to the devices endpoint curl curl X GET httpsapilightelligenceiov1devices H Authorization Bearer access token H ContentType applicationjson In our example curl curl X GET httpsapilightelligenceiov1devices H Authorization Bearer ey H ContentType applicationjson You get a response similar to the following json meta page 0 pageSize 50 itemsTotal 6 pagesTotal 1 data id 383b8c61a9c7487fb4e166fad753e546 info name RGB LED description deviceTypeId 04f14462b44f493caa2cdd6d1c439ec3 tags location "},{"href":"/applications/registering-user-applications","content":" title Registering and Implementing User Applications linktitle Registering and Implementing User Applications description To turn a user application into an OAuth2 client register it to the OLT platform and implement OAuth2 in your application date 20190601 publishdate 20190601 categories applications keywords applicationuser applicationOAuth2 menu docs parent applications weight 230 weight 230 sectionsweight 230 draft false aliases applicationsoverviewquickstart toc true To turn a user application into an OAuth2 client register it to the OLT platform and implement OAuth2 in your application Note Simulating Applications In the following we use OAuth 20 httpsoauthdebuggercomhttpsoauthdebuggercom to simulate an application Prerequisites To register applications to the OLT platform you have owner or writer authorization Note Checking permissions If you use default roles to verify you have owner or writer authorization in the OLT portal under Users check your roles If you use custom roles verify the user permissions for the specific endpoints For more information see Defining Custom Rolesuserscreatingcustomroles Registering and Installing an Application To access your data in the OLT platform create an application using the OLT API To allow your application to communicate with the OLT platform create an OAuth2 client Procedure 1 Obtain your tenant ID and an authentication token 1 Log on to the OLT portal httpsportallightelligenceiohttpsportallightelligenceio 2 Select the tenant who is to own the application 3 Under Developer Area look up the authentication token in our example eyJhbGciOi tenant ID in our example b1747579355 2 To register the application to the OLT platform make a POST request to the applicationdeveloperapplicationshttpsapilightelligenceiov1apicollectiontagapplicationdeveloperpaths1applicationdeveloper1applicationspost endpoint You have the following options depending on the application type Web application recommended Create web applications authenticating users with the OAuth2 client secret Ensure that the withPublicOauth2Client property is set to false confidential User Agent application If you dont have a backend service to store the OAuth2 client secret set the withPublicOauth2Client property to true public The request passes the following data one or more redirect URLs where your application is to be hosted Define different redirect URLs for development test and production for example Wildcards are not allowed in the redirect URLs In our simulation the redirect URL is httpsoauthdebuggercomdebug the authentication token the tenant ID of the tenant owning the application Note Managing Applications You can change the application properties later Add a description and a URL to provide additional information for example If you have multiple tenants to facilitate application management consider assigning all applications to the same tenant owning the applications For more information see Managing Custom Applicationsapplicationsmanagingapplications Example of a web application authenticating users with the OAuth2 client secret withPublicOauth2Client false curl X POST httpsapilightelligenceiov1applicationdeveloperapplications H Authorization Bearer authentication token H ContentType applicationjson d name My application name withPublicOauth2Client false allowedTenants tenantId b1747579355d4b7aaa72c2336d3a7211 comment Example Inc northern plant redirectUris httpsoauthdebuggercomdebug httpsdevapplicationcomauthcallback httpsprodapplicationcomauthcallback You get a response similar to the following The type is confidential web application or public user agent application The response contains the following data application ID in our example 33333331111222233334534g4gd4 OAuth2 client ID in our example 7222223111122223333fb4444444b7c OAuth2 client secret in our example 9vxPaAd3HmXhNXf Example of a response for a web application withPublicOauth2Client false data id 33333331111222233334534g4gd4 name My Web Application withPublicOauth2Client false oauth2Client id 7222223111122223333fb4444444b7c secret 9vxPaAd3HmXhNXf type confidential tenantId b1747579355d4b7aaa72c2336d3a7211 status active createdAt 20190425T150715392Z updatedAt 20190425T150715392Z allowedTenants tenantId b1747579355d4b7aaa72c2336d3a7211 createdAt 20190425T150715407Z installed false comment Example Inc northern plant redirectUris httpsoauthdebuggercomdebug httpsdevapplicationcomauthcallback httpsprodapplicationcomauthcallback Example of a response for a user agent application withPublicOauth2Client true data id 2f594b28411e43349f7275e1bff2e7f3 name My User Agent Application withPublicOauth2Client true oauth2Client id fe1e57041fb14e66818df7724f1743e0 secret gX1WLw4O7YBwjsw5 type confidental publicOauth2Client id 3f7225f7981846348613c9676935847a type public tenantId b1747579355d4b7aaa72c2336d3a7211 status active createdAt 20190516T090110825Z updatedAt 20190516T090110825Z redirectUris httpsoauthdebuggercomdebug httpsdevapplicationcomauthcallback httpsprodapplicationcomauthcallback allowedTenants tenantId b1747579355d4b7aaa72c2336d3a7211 createdAt 20190516T090110918Z installed false comment Example Inc northern plant You have now registered the application to your tenant so the application is available to be installed in the tenant 3 Implement a process to store the OAuth2 client secret If you develop a user agent application without a backend service to store the OAuth2 client secret ensure that you have set the withPublicOauth2Client property to true in step 1 Note Why store the OAuth2 client secret To display application data you can use the applicationdeveloperapplicationshttpsapilightelligenceiov1apicollectiontagapplicationdeveloperpaths1applicationdeveloper1applicationsget endpoint But the response does not contain the OAuth2 client secret If you dont store it you have to regenerate it making a POST request to the applicationdeveloperapplicationsapplicationIdsecrethttpsapilightelligenceiov1apicollectiontagapplicationdeveloperpaths1applicationdeveloper1applications1applicationId1secretpost endpoint 4 To install the application make a PUT request to the applicationsapplicationIdinstallationhttpsapilightelligenceiov1apicollectiontagapplicationspaths1applications1applicationId1installationput endpoint curl X PUT httpsapilightelligenceiov1applicationsapplicationIDinstallation H Authorization Bearer authentication token H ContentType applicationjson In our example curl X PUT httpsapilightelligenceiov1applications33333331111222233334534g4gd4installation H Authorization Bearer eyJhbGciOi H ContentType applicationjson 5 Optional To verify the installation make a GET request to the applicationsapplicationIdhttpsapilightelligenceiov1apicollectiontagapplicationspaths1applications1applicationIdget endpoint Result You get a response similar to the following data tenantId b1747579355d4b7aaa72c2336d3a7211 createdAt 20190425T102720312Z Your application is registered to the OLT platform and installed in the tenant owning the application A user can logon to the OLT platform and use your application as an OAuth2 client to get data from the tenant in which the application is installed Installing the Application in Multiple Tenants To install an existing application in additional tenants whitelist the tenants and install the application in each of them For more information see Managing Custom Applicationsapplicationsmanagingapplications Implementing OAuth2 in the Application Enable your application to act as an OAuth2 client depending on the application type Web application running on a web server User agent application running in a browser Implementing a Web Application If you have a web application in which the application source code is protected implement a confidential OAuth2 client with OAuth2 client secret We recommend web applications due to safety reasons Prerequisites When registering the application to the OLT platform you have set the application property withPublicOauth2Client to false see above Procedure 1 To get the OAuth2 authorization code redirect the API call to the URL of our OLT authorization server idlightelligenceio httpsidlightelligenceiov1idauthrealmsoltprotocolopenidconnectauth clientidoauth2Clientid redirecturiredirectUri scopeopenid responsetypecode responsemodeformpost In our example we authenticate the OAuth 20 httpsoauthdebuggercom application simulation hosted under httpsoauthdebuggercomdebug httpsidlightelligenceiov1idauthrealmsoltprotocolopenidconnectauth clientid7222223111122223333fb4444444b7c redirecturihttpsoauthdebuggercomdebug scopeopenid responsetypecode responsemodeformpost figure srcimagesapplicationscodeflowpublicrequestauthcodepng captionSimulating an Authorization Code Request with OAuth 20 altRequesting the Authorization Code If the user isnt logged on to the OLT platform already the login screen appears On selecting the tenant the user is redirected to the redirect URL You get the OAuth2 authorization code in our example eyJhb name code value eyJhbGciOiJkaXIiLCJlbmMiOiJBMTI4Q0JDLUhTMjU2In0ZT1EOZlAoohBhGj2J24ydwuyRYHynYGlrNpve4UmjsMXzVfXp2XBQPfXHrQWjfqYrPOUZVWoDWDJp7DpWvL8YAPnKANQnUsfEyE3JMA7qdOUHNr5wf2mT1tU3L1RBARui3gefXWlSZXTcCULnPmwjqyfVKRb5IPG6N2Y20Xn0BBFEZEtN1AXslYvts4nKUGMetg03NKP9Pi3CYVFrlUZIR6sAGsIeNXRiJPtXZ7CtQPStQGOMKYTCXKWT9WUem7FOn3bUp7dEWR5GrpI6Me3lQsqicV9zoH6i293g name sessionstate value da6ee4696030495fa1ce7262a7b65ef9 figure srcimagesapplicationscodeflowpublicgetauthcodepng captionGetting the OAuth2 Authorization Code with OAuth 20 altRequesting the Authorization Code 2 To get an OAuth2 access token implement a browser callback function to extract the OAuth2 authorization code and make the following POST request to the idauthrealmsoltprotocolopenidconnecttoken The request passes the following data to the OLT authorization server the OAuth2 authorization code the OAuth2 client ID of your application the redirect URL the clientsecret curl X POST httpsidlightelligenceiov1idauthrealmsoltprotocolopenidconnecttoken H ContentType applicationxwwwformurlencoded d granttypeauthorizationcodecodeauthorizationCodeclientidoauth2ClientidredirecturiredirectUriclientsecretoauth2Clientsecret In our example curl X POST httpsidlightelligenceiov1idauthrealmsoltprotocolopenidconnecttoken H ContentType applicationxwwwformurlencoded d granttypeauthorizationcodecodeeyJhbGciOiJkaXIiLCJlbmMiOiJBMTI4Q0JDLUhTMjU2In0ZT1EOZlAoohBhGj2J24ydwuyRYHynYGlrNpve4UmjsMXzVfXp2XBQPfXHrQWjfqYrPOUZVWoDWDJp7DpWvL8YAPnKANQnUsfEyE3JMA7qdOUHNr5wf2mT1tU3L1RBARui3gefXWlSZXTcCULnPmwjqyfVKRb5IPG6N2Y20Xn0BBFEZEtN1AXslYvts4nKUGMetg03NKP9Pi3CYVFrlUZIR6sAGsIeNXRiJPtXZ7CtQPStQGOMKYTCXKWT9WUem7FOn3bUp7dEWR5GrpI6Me3lQsqicV9zoH6i293gclientid7222223111122223333fb4444444b7credirecturihttpsdevapplicationcomauthcallbackclientsecret9vxPaAd3HmXhNXf Note We cant simulate this step because the request requires the application to be in the same session in our example the httpsoauthdebuggercomdebug application session Result You get the OAuth2 access token allowing your application to access the tenant data 200 accesstoken eyAdG Implementing a User Agent Application If you have a browser application without a backend service a JavaScript application for example retrieve the OAuth2 authorization code without the OAuth2 client secret Prerequisites You have registered and installed the applicattion as described above When registering your application to the OLT platform you have set the application property withPublicOauth2Client to true Procedure 1 To get the OAuth2 authorization code redirect the API call to the URL of our OLT authorization server idlightelligenceio httpsidlightelligenceiov1idauthrealmsoltprotocolopenidconnectauth clientidoauth2Clientid redirecturiredirectUri scopeopenid responsetypecode responsemodeformpost 2 To get an OAuth2 access token implement a browser callback function to extract the OAuth2 authorization code and make the following POST request to the idauthrealmsoltprotocolopenidconnecttoken The request passes the following data to the OLT authorization server the OAuth2 authorization code the OAuth2 client ID of your application the redirect URL curl X POST httpsidlightelligenceiov1idauthrealmsoltprotocolopenidconnecttoken H ContentType applicationxwwwformurlencoded d granttypeauthorizationcodecodeauthorizationCodeclientidoauth2ClientidredirecturiredirectUri In our example curl X POST httpsidlightelligenceiov1idauthrealmsoltprotocolopenidconnecttoken H ContentType applicationxwwwformurlencoded d granttypeauthorizationcodecodeauthorizationCodeclientid7222223111122223333fb4444444b7credirecturihttpsoauthdebuggercomdebug "},{"href":"/applications/troubleshooting-application-management","content":" title Troubleshooting Application Management linktitle Troubleshooting Application Management description Resolve typical issues when developing custom applications date 20190627 publishdate 20190601 categories applications keywords applicationtroubleshootingissues menu docs parent applications weight 500 weight 500 sectionsweight 500 draft false aliases applicationsoverviewquickstart toc true Access Denied Your custom application cant access a certain endpoint Verify that an endpoint has the permission required to access the tenants data Background For security reasons custom applications are not allowed to use API endpoints related to tenant management and user management You can access these endpoints only in the OLT portal So even if your user has the owner role with a custom application the access is restricted to permissions assigned to the writer role If you need to develop custom applications that use endpoints related to user management contact our OLT support under Custom applications cannot access endpoints which require the following permission tenantread tenantwrite tenantusermanagementread tenantusermanagementwrite The tenantstenantIdusersuserIdroleshttpsapilightelligenceiov1apicollectiontagusermanagementpaths1tenants1tenantId1users1userId1rolesget endpoint for example requires the tenantusermanagementread permission You cannot access it with a custom application Prerequisites You have owner or writer authorization Procedure Make a GET request to the permissionshttpsapilightelligenceiov1apicollectiontagrolesandpermissionspaths1permissionsget endpoint To authenticate the request use the OAuth2 access token curl curl X GET httpsapilightelligenceiov1permissions H Authorization Bearer OAuth2 access token H ContentType applicationjson You get a response similar to the following json meta page 0 pageSize 50 totalSize 26 data permissions id 78624d68b09c4e28ae5e812c3cfa1126 alias devicetypesread category devices name Access devicetypes description Get device types and online monitoring rules nList available device types and categoriesn id d06e523bd7294b6db7b7203ab8eaf102 alias devicetypeswrite category devices name Edit devicetypes description Create device types nModify device types and online monitoring rules nRemove device typesn "},{"href":"/applications/use-cases","content":" title Identifying Your Use Case linktitle Identifying Your Use Case description Check which kind of application you build and proceed accordingly date 20190614 publishdate 20190612 categories applications keywords customapplicationuser applicationbackground application menu docs parent applications weight 220 weight 220 sectionsweight 220 draft false aliases applicationsoverviewquickstart toc true Choose an applications type depending on your use case and off you go Applications with User Interaction To retrieve an OAuth2 access token you can implement an OAuth2 client with or without OAuth2 client secret depending on the application type Web application running on a web server in which the application source code is protected Implement a confidential OAuth2 client with OAuth2 client secret User agent application running in a browser in which the application source code may be viewed a JavaScript application for example Implement a public OAuth2 client without OAuth2 client secret For safety reasons we recommend web applications using a backend service providing the OAuth2 client secret In this case proceed with Creating and Implementing Applications with User Interactionapplicationsregisteringuserapplications Background Applications without User Interaction A background application is installed on the computer Background applications are not connected to a user Create background applications for the following use cases for example A server running scheduled events fetching data from the OLT platform A background script fetching device data for all tenants which have installed an application independent of users Slackbot or other notification applications In this case proceed with Creating Background applications without user interactionapplicationsregisteringbackgroundapplications"},{"href":"/applications/using-application-sdk","content":" title Developing Applications with the SDK linktitle Developing Applications with the SDK description Use the Lightelligence Application SDK to develop custom applications date 20190614 publishdate 20190612 categories applications keywords customapplicationsdk menu docs parent applications weight 100 weight 100 sectionsweight 100 draft false aliases applicationsoverviewquickstart toc true Jonathan how would I proceed as a Lightelligence customer stepbystep tbd this chapter is a placeholder Installing the Lightelligence Demo App Use Get an idea what applications using the OLT API are Procedure 1 Install nodejs if I dont have it already 2 Install the lightelligencebrowsersdk dependency How exactly npm install gitbitbucketorglightelligencelightelligencedemoappgit Result As of now I get Could not install from bitbucketorglightelligencelightelligencedemoappgit as it does not contain a packagejson file Reason I probably need the local private read access token to our npm since the demo app is not public When its public the customers wont need it correct 3 Start the app cd into lightelligencedemoapp npm start 4 Open httplocalhost3000 to view it in the browser"},{"href":"/applications/using-sdk.md#","content":" title Developing Applications with the SDK linktitle description date 20190601 publishdate 20190601 categories applications keywords custom applicationsdk menu docs parent applications weight 100 weight 100 sectionsweight 11 draft false aliases applications toc true Jonathan how would I proceed as a Lightelligence customer stepbystep tbd this chapter is a placeholder Installing the Lightelligence Demo App Use Get an idea what applications using the OLT API are Procedure 1 Install nodejs if I dont have it already 2 Install the lightelligencebrowsersdk dependency How exactly npm install gitbitbucketorglightelligencelightelligencedemoappgit Result As of now I get Could not install from bitbucketorglightelligencelightelligencedemoappgit as it does not contain a packagejson file Reason I probably need the local private read access token to our npm since the demo app is not public When its public the customers wont need it correct 3 Start the app cd into lightelligencedemoapp npm start 4 Open httplocalhost3000 to view it in the browser "},{"href":"/data/_index","content":" title Processing Data linktitle Processing Data description Retrieve different types of data from the OLT platform date 20190501 publishdate 20190501 lastmod 20190501 categories data keywords data menu docs parent data weight 5 weight 0005 rem draft false aliases overviewintroduction toc false There are four ways of retrieving the sensor data DeviceState Digital Twin Aggregated Data Raw Data Last 1h Turing What is the difference between the four ways of retrieving sensor data What is the typical usecases What are the contracts behind each of these endpoints what are the guarantees How quick can someone expect an answer How quick does data show up in the dumps What role does the device type play"},{"href":"/data/generating-timeseries-dumps","content":" title Generating Time Series Data Dumps description Generate time series data dumps date 20190614 categories processing data keywords time series datadata dumps menu docs parent data weight 20 weight 20 sectionsweight 20 draft false toc true tbd"},{"href":"/data/get-aggregated-data","content":" title Using Aggregated Data description Use aggregated data date 20190614 categories processing data keywords menu docs parent data weight 10 weight 10 sectionsweight 10 draft false toc true tbd"},{"href":"/data/querying-times-series-data","content":" title Querying Times Series Data description Query time series data date 20190614 categories processing data keywords query menu docs parent data weight 30 weight 30 sectionsweight 30 draft false toc true Apply multiple filters to your time series data With a single API call get data from multiple devices Use cases Obtain data from devices connected to a specific gateway from devices of a certain category tbd link to chapter device type Assigning categories from devices with specific tags tbd link to chapter Devices Assigning tags tbd Jewgeni"},{"href":"/data/streaming-data","content":" title Streaming Data description To get instant updates about new data or events of your devices establish a streaming connection date 20190614 categories processing data keywords streamingwebsocketsfilter menu docs parent data weight 40 weight 40 sectionsweight 40 draft false toc true Team Turing What is the outbound streaming meant to be used for How can it be used in a browser How can it be used in a backend What are the limitations What does the user need to know when using the websocket connection ie retries Setting Up Websocket Streaming tbd Including Filters in Websocket Streaming Use cases Filter by device type Filter by tag tbd Jewgeni"},{"href":"/data/visualizing-data","content":" title Visualizing Data description Create dashboards and visualise data date 20190614 categories processing data keywords visualizationdashboardtemplate menu docs parent data weight 50 weight 50 sectionsweight 50 draft false toc true 1 Create template dashboard 2 Copy template to stream in Qlik Qlik stream OLT tenant 3 Apply new versions of template later on"},{"href":"/devices/_index","content":" title Managing the OLT Lifecycle linktitle Managing the OLT Lifecycle description Connect your actual IoT system landscape to the OLT platform Add new devices date 20190501 publishdate 20190501 lastmod 20190501 categories devices keywords devicesdevice types menu docs parent devices weight 3 weight 0003 rem draft false aliases overviewintroduction toc false To connect your actual IoT system landscape to the OLT platform replicate the processes you implemented in the Getting Startedgettingstarted section of your OLT user journey Add one device after the other according to the travel plan you have prepared under Mapping the OLT Landscapeusers Keep in touch with the places you have visited during your OLT journey Monitor your devices and keep their firmware and configurations uptodate"},{"href":"/devices/actions-getting-started","content":" title Executing Commands on Devices linktitle Executing Commands on Devices description Write values to devices to trigger actions date 20190601 publishdate 20190601 categories devices keywords device typesattributesactions menu docs parent devices weight 20 weight 20 sectionsweight 20 draft false aliases devicesoverviewquickstart toc true Besides reading sensor data executing commands on devices is another basic IoT use case So lets write values to devices to trigger actions In the JSON schema of a device type we have another dedicated property for this actions While the attributes property is readonly the actions property is writeonly Actions are commands that a device can execute In the following example light up an RGB LED by sending a certain color code in 2 steps 1 Use the Bash script to set up your RGB LED and connect it to the OLT platform 2 Simulate an application lighting up the LED To do so make a POST request to the devicesdeviceIdactionshttpsapilightelligenceiov1apicollectiontagdevicespaths1devices1deviceId1actionspost MQTT endpoint Setting Up Your LED Attach an RGB LED to your Raspberry Pi and execute a Bash script to connect it to the OLT platform Prerequisites You have connected your Raspberry Pi with the raspiansetupsh Bash script described under Connecting a Device in 3 Stepsgettingstartedsettingupgettingstarted With this scenario you have installed an MQTT client Python and the Python module pahomqtt on your Raspberry Procedure 1 Attach a 4pin RGBLED to your Raspberry Pi In our example we map the GPI pins as follows LED Raspberry Pi Red GPIO Pin 23 Cathode Ground Green GPIO Pin 24 Blue GPIO Pin 25 2 Under githubcomounisraspberrypideviceonboardinghttpsgithubcomounisraspberrypideviceonboarding download the installrgbsh Bash script The bash script does the following Prompt you to enter your authentication token Prompt you to enter the tenant name or ID Create a device in the OLT platform and a corresponding device type Generate a device key Generate a device certificate Save a Python program rgbpy in the directory created The Python program passes the action data from the OLT platform to the device via MQTT messages Create a cron job to execute the Python program Subscribe your device to the MQTT endpoint of the OLT platform 3 To execute the Bash script do the following 1 Make it executable chmod x installrgbsh 2 Execute the script installrgbsinstallrgb 4 On request of the Bash script do the following Enter the platform URL lightelligenceio Enter the authentication token displayed in in the OLT portal under Developer Area Enter your tenant name or your tenant ID displayed in in the OLT portal under Developer Area Result Your Raspberry Pi is now able to receive actions from the OLT platform When you inspect the script you will see its purpose is to connect your device to the MQTT endpoint of the OLT platform To do so it subscribes the Raspberry Pi to the devicesdeviceIdactions MQTT topic mosquittosub h mqttlightelligenceio p 8883 cafile oltcapem cert devicecertpem key devicekeypem V mqttv311 t devicesdeviceIdactions d Also the Bash script has created the following a device type with a JSON schema containing the actions property a digital twin associated with the device type Triggering an Action on Your Device Trigger an action on your device To do so make a POST request to the devicesdeviceIdactionshttpsapilightelligenceiov1apicollectiontagdevicespaths1devices1deviceId1actionspost MQTT endpoint as in the following cURL example To light up the LED in blue use the following message for example curl X POST httpsapilightelligenceiov1devices383b8c61a9c7487fb4e166fad753e546actions H Authorization Bearer authenticationToken H CacheControl nocache H ContentType applicationjson d action ambientLight payload r 0 g 0 b 1 description Switch on blue light curl X POST httpsapilightelligenceiov1devices383b8c61a9c7487fb4e166fad753e546actions H Authorization Bearer authenticationToken H CacheControl nocache H ContentType applicationjson d action ambientLight payload r 0 g 0 b 1 description Switch on blue light Result An action ID is generated dataactionId5895f5f093e9428ca4b6580eb814f11e for example The LED is switched on In our example it lights up blue You have successfully forwarded an action to your device"},{"href":"/devices/connecting-gateways","content":" title Connecting Gateway Devices linktitle Connecting Gateway Devices description Connect devices that dont communicate with the OLT platform directly but via a gateway date 20190601 publishdate 20190601 categories devices keywords device typealiasconnectedBygateway menu docs parent devices weight 50 weight 50 sectionsweight 50 draft false aliases devicesoverviewquickstart toc true The gateway process is still under discussion This chapter is a placeholder In a typical setup devices dont communicate with the OLT platform directly but via a gateway A gateway allows you to integrate device that are not IoT enabled In this setup you proceed as follows 1 Create the device type for each device 2 Create a device type for the gateway device 3 Create a device for the gateway 4 Create a device for each sensor with the right device type 5 Modify all sensor devices to make them connectedBy the gateway device Assign a unique alias which is also available later for the gateway ie mac address to each of the device 5 In the gateway Create certificate Enable MQTT to dataingest Aliases are used only in MQTT and HTTP data and eventingest messages In the devicesid RESTAPI aliases can only be used on the GET devices endpoint as query The devices aliases array is included in the cloud to device message in addition to the devices uuid Begin Notes 20190611 Adapter SDK encapsulates calls of the gateway API bot MQTT and HTPP It binds libraries and facilities eg if it creates a device in the gateway and in the OLT platform it automatically adds the gatreway device ID as the connectedBy including the the adapter and the field devices Every device that needs to be reached from the cloud needs to have the connectedBy attribute set The gateway can be virtual or physical adapters are software only run in gateway or something similar eg have 1 gateway and multiple devices running adapters to have enough RAM or processing power Field device either virtual for testing and illustration or physical with protocol Adapter translates field communication to OLT and vice versa if interface between gateway and field eg Gateway has GUI with devices available in LAN if compatible ie has an adapter then onboarding Gateway launches adapter hat translates communication from device to gateway and from gateway to OLT and vice versa Typically send attributes Adapter first uses the HTTP API to create types devices and schema then uses MQTT API to post attributes configuration changes to OLT and if supported get config updates from OLT which need to be parsed and implemented in field device get actions from OLT that need to be parsed and implemented in field eg turn bulb on Gateway is a selfcontained development solution developer can connect to gateway Swagger interface to know which calls are possible and test the calls Also supports MQTT and HTPP endpoinmts similar to OLT Has SDK a collection and integration API storing SDK makes writing adapters easy ag Zigbee adapter can then ported to other wireless technology 1 The gateway is a device type get unique ID it will somehow be shared in OLT to be discussed with Henri different tenants or users can share gateways 2 Gateways is ARMbased hardware or can be embedded in existing hardware eg DALI Pro runs under nodejs platformagnostic eg Raspi Win Adapter SDK should allow to easily writer glue code to bind the gateway and the field code The gateway is a translator to talk the protocol End Notes 20190611 A gateway allows you to integrate device that are not IoT enabled The devices have aliases Via script Some kind of process that describes how I control devices via a gateway To check the devices are related to the gateway via the connectedby property and represented by aliases Imagine a customer using Hue The enduser controls lights via the app but the customer wants to have usage statistics Here comes the OLT platform There is a bulb in every room As per the hue API it has a unique endpoint id in the form AABBCCDDEEFF0011XX Also it has an on state Our customer wants the on state to be reported to the OLT database for each bulb attached to the bridge To do so he might make GETrequests to the apilights endpoint see the httpsdevelopersmeethuecomdevelophueapilightsapigetattrandstate endpoint state hue 50000 on true effect none alert none bri 200 sat 200 ct 500 xy 05 05 reachable true colormode hs type Living Colors name LC 1 modelid LC0015 swversion 103 How would our customer proceed to get the state data into the OLT platform 1 Create device type The on state corresponds to an on attributes property in the bulbs device type 2 Create device The hue device ID AABBCCDDEEFF0011XX I assume correponds to an alias the connectedBy property contains the gateway ID See httpsapilightelligenceiov1apicollectiontagdevices info name Gateway North 1 deviceTypeId 123e4567e89b12d3a456426655440003 description Gateway left from the right door under the orange pillow installationTimestamp 19850412T23205052Z tags connectedBy 123e4567e89b12d3a456426655441337 location siteAbuildingBfloorCroomD aliases frontdoor RoomA 060000000000 coordinates configuration brightness 60 color custom my Modeling Gateways Jos how do I manage gateway in progress conectedby means device is behind a gateway 2844 the device depends on the 3e12 device which is a gateway httpslightelligenceatlassiannetbrowseOLT1713 Support External Device IDs httpslightelligenceatlassiannetwikispacesOCPpages342261874F001SupportExternalDeviceIDs Aliases can be added at creation of the device or later on edit if I send action the gateway has to dispatch it to the device Jos how do I refer to the gateway ID when posting anaction the corresponsing device Turing What do we define a gateway How can a device be configured to be a gateway in the cloud What does it mean to configure a device to be a gateway in the cloud How does the connectedBy attribute work What does it allow the other device to do How can the aliases be used to use protocol specific identifiers in the gateway How does the gateway integrate in the cloud to device concept Complex Device Type Schema Data You have already used two different kinds of schema data types numbers and objects JSON schema also allows strings booleans and arrays The following command creates a device type that has an array of booleans as an attribute The array must contain 2 up to 5 items defined by minItems and maxItems While you cannot report an array to timeseries your reportingRules can contain a rule to report an item with a specified index In this case the first array element a boolean is reported to timeseries See httpslightelligenceiodocsgettingstarted"},{"href":"/devices/creating-devices","content":" title Creating Devices date 20190416 draft true weight 20 Creating a device basically means the following Assigning a device type describing the device capabilities Assigning a device certificate and registering it to the the OLT platform to ensure encrypted communication Describing the device so as to be able to manage devices efficiently Creating a Device Type tbd Explain device type as prerequisite Creating a Device Certificate Note Using a Custom Certificate Authority Our example is based on the OpenSSL command line utilityhttpswwwopensslorg to create a selfsigned device certificate for a particular device Alternatively you can use or create your own certificate authority CA and have your device certificates issued by that CA Just make sure the device certificate is assigned to the particular tenant and device via the the Organization Name and Common Name parameters as described in the following tbd Adress UI feature request to what team who is responsible for the UI Rams 1 Under Developer Area display not only the tenant ID but also the tenant name The user might not be sure about how the tenant technical name is spelled Analogously to the device nameID 2 Replace TenantID with Tenant ID wo hyphen tbd check whether OLT4311 is resolved and insert the following Achtung Bildrefs gehen in Note nicht Under Android and Windows without bash You are asked to enter additional information 4 Enter data as required Country Name Enter the country code DE for Germany for example Henri do we use this info is it relevant or can we leave it empty State or Province Locality city for example Organization Name Organizational Unit Common name server FQDN for example tbd what is FQDN EMail Address Henri Whose email is supposed to be relevant here Note Creating a Device Certificate under Windows Under Windows pass the subj argument with leading double forward slashes Use backslash to separate the keyvalue pair see Creating a Device Certificate under Windowsimagedevicecertificatewindows openssl req new key devicekeypem x509 days 365 out devicecertpem subj OSampleTenantCNSampleDevice imagedevicecertificatewindows Creating a Device Certificate under Windows using the IDsimagesdevicecertificatewindowspng userwindevice MINGW64 openssl ecparam out devicekeypem name prime256v1 genkey cuserwindevice MINGW64 openssl req new key devicekeypem x509 days 365 out devicecertpem subj OMusterTenantCNW541 Creating a device In the OLT platform create a digital twin of your device based on the device type created Procedure 1 Under Devices Types Devices choose Create Device 2 Select the device type 3 Describe the device Name description and tags help you to monitor and maintain the devices in your system landschape Name Enter a number according to your floor plan and naming schema for example Location Office 1 Desk 1 for example Description Describe the function Illuminates desk 1 for example Tags To be able to apply queries and filters you can specify relevant device properties 4 To confirm choose Create Device"},{"title":"Deploying Binaries to Devices","tags":["alias","connectedBy","types","firmware","bootloader","configuration files","slots"],"href":"/devices/deploying-binaries-to-devices","content":" title Deploying Binaries to Devices linktitle Deploying Binaries to Devices description Maintain your devices by updating their firmware or by deploying bootloaders or configuration files to them date 20190614 publishdate 20190601 categories devices keywords device typefirmwarebootloaderconfigurationslots tags aliasconnectedBytypesfirmwarebootloaderconfiguration filesslots menu docs parent devices weight 60 weight 60 sectionsweight 60 draft false aliases devicesoverviewquickstart toc true SDK refactoring not yet finished The firmware process is still under discussion This chapter is a placeholder Begin Notes 20190611 Jos not in scope of V10 Adapter SDK roadmap has changed a lot is going to be discussed discuss test case End Notes 20190611 hatem t understand the flow Host firmware in the OLT platform centrally and deploy it to your devices To deploy firmwares bootloaders or configuration files to your devices schedule downloads to your devices To keep track whether biaries have been installed successfully perform status updates Hosting files Procedure 1 Create file and provide metadata UUID tenant ID etc httpsapilightelligenceiov1firmwares 2 Upload file Attach a blob to a firmware firmwaresidblob A download link for the blob is added to the firmware resource which can be used to download the blob Installing a Firmware On a Device POST devicesdeviceIdfirmwareinstallations tbd Clarify the following This endpoint creates a new firmware installation resource This resource represents the status of installation into the slot for the specific device Once it created the device start receives installation instructions via MQTT tbd How do I schedule the process Monitoring the Installation Status Get firmware installation status GET devicesdeviceIdfirmwareinstallationsinstallationId Update firmware installation status PATCH devicesdeviceIdfirmwareinstallationsinstallationId Clarify This endpoint enables updating the status of firmware installation for a device This installation status is tracking on the cloud side Used by devicesgatewaysanalyticsetc which report statuses of the installation firmware into the slot tbd In what case would I use GET vs PATCH Managing Files Download file GET firmwaresidblob tbd in what case do I download the file List tenant files GET firmwares Get details GET firmwaresid Update files Please note that its only allowed to attach a blob once In case a blob is attached more than once you will get a 423 status code indicating that the resource is locked tbd Whats the workaround Delete and Create new What does this mean for scheduled processes Delete file DELETE firmwaresid s Jewgeni PPT Info Installing Binaries httpslightelligenceatlassiannetwikispacesOCPpages740524173F017BlobPushFirmwareUpdate More complex device have a firmware or other binary executables installed that need to get updated from time to time How do we do it Jos When SDK refactoring is finished adapters will be updated Jos will be able to test all actions including firmware update whats the status Process outline First need to have the binary somewhere accessible in the slot Action Gateway downloads binary for that firmware update and push it to the device with the field procedure for the device Report back to OLT an answer to the action successfailure for example config Inspect the communication in the Steinel web client 1 Firmware Update Gives URL for upload 2 Click update triggers REST API call initiating the installation of the new binary Jos used already Example There are 3 slots Firmware Bootloader Configuration Slots for binaries Jos not yet looked into it is going to perform first whats the status name Extended OSR Light switch manufacturer OSRAM model C3PO description Newest version of the switch categories urnomalwm2mext3001 urnomaexampleext1002 urnomaexampleext1003 reportingRules path configurationbrightness reportTo timeseries schema configuration brightness type number property urnomalwm2mext5548 minimum 0 maximum 100 color type object properties r type number minimum 0 maximum 255 g type number minimum 0 maximum 255 b type number minimum 0 maximum 255 required r g b attributes temperature type number property urnomalwm2mext5700 humidity type number minimum 0 maximum 100 events overheated actions raiseTemperature type object properties value type number description type string slots firmware name Test name "},{"href":"/devices/managing-devices","content":" title Managing Devices linktitle Managing Devices description Categorize and tag devices and use your metadata to query and filter devices date 20190601 publishdate 20190601 categories devices keywords devicecategorytagqueryfilter menu docs parent devices weight 70 weight 70 sectionsweight 70 draft false aliases devicesoverviewquickstart toc true When you create digital twins representing your physical devices in the OLT platform add metadata to be able to manage them effeciently Managing devices means for example Make queries to list existing devices Use filters to stream data provided by specific device groups httpslightelligenceslackcommessagesDHUFMMW9W slide 6 We provide two levels of metadata semantic description On the device type level categorize your devices by describing the capabilities and use specify external specifications the device conforms to Use established resource identifier schemas eg LWM2M or your create your own identifier schemas Query devices based on the categories assigned to them httpslightelligenceslackcommessagesDHUFMMW9W slide 6 On the devices level describe individual devices by describing their location for example Categorizing devices Classify devices by specifying categories in the the accociated device types To assign categories define custom ones resource identifier schemas or use established ones Use for example URN Namespace for Open Mobile Alliance OMA Lightweight M2M resource model urnomaOMAresourceResourceSpecificString Open Connectivity Foundation OCFIpso interoperability for consumers businesses and industries communications platform a bridging specification an open source implementation and a certification program Procedure To assign a category make a tbd in the portal I dont find the option to addedit a category Jos how do we apply the following for example Do we have examples What other resource models are relevant in the industry sh temperature type number property urnomalwm2mext5700 Describing Device Types Prerequisites You have writer authorization Procedure 1 Under Devices Types on the Device Types tab choose the device type 2 Under Device Type Information choose Edit Alternatively make a PATCHrequest to the devicetypesdeviceTypeIdhttpsapilightelligenceiov1apicollectiontagdevicetypespaths1devicetypes1deviceTypeIdpatch endpoint Querying Devices Filtering Querying httpslightelligenceatlassiannetwikispacesOCPpages793411660DeviceFilteringGuidelines httpslightelligenceslackcommessagesDHUFMMW9W slide 8 Query timeseries data based on a combination of filter criteria with a single API call New devicetimeseriesdump endpoint allows to query data based on a variety of filter criteria This allows to retrieve data more efficiently with less API calls Tagging a Device Jos How do we actually use the fields of the device ie location description tags Categorizing Devices and Device Types Specify the device type to allow for filtering and querying "},{"href":"/devices/monitoring-devices","content":" title Monitoring Devices and Alerting linktitle Monitoring Devices and Alerting description Monitor the devices operational status and implement notifications and alerts date 20190601 publishdate 20190601 categories devices keywords device typeseventsmonitoringalerting menu docs parent devices weight 40 weight 40 sectionsweight 40 draft false aliases devicesoverviewquickstart toc true Begin Notes 20190611 Note its being discussed whether the event type is fixed modeled like attributes allowing to pass values Jos Eventdef does not have type events greatEvent raw docu as of 20190611 httpslightelligenceatlassiannetwikispacesOCPpages97419311MQTTMessages Payload example deviceId 123e4567e89b12d3a456426655440000 type overheated createdAt 20150804T190514318570484Z new time attribute createdAt type hardcoded under discussion whether it should be fixed or whether payloud should be possible overheating event temperature payload data would make sense Jos if I understand it correctly the following applies both to events and attributes the difference being eventingest vs dataingest 2 configurations for 1 polling minimummax period and chache value that can be set for every attribute to manage how the information is stored in OLT polling query device every x seconds If chache is enabled only changed values will be posted Polling use case eg steinel only allows polling polling webpage in JSON format is posted Use polling if field device protocol does not support eventbased communication eg DALI 2 eventbased preferred way to structure adapter it consumes less resources is more efficient device initiates event sends event to adapter subscribe to topic notifications are sent if values change eg bluetooth low energy BLE subscribe to a topic characteristics you get notifications if values of charactersitics change Adapter set up listener for notifications to arrive a field BT adapter hardware adapter reposts events from BT hardware the mechanism is implemented in the protocol no need to pull mixed use cases eventbased for some features for others might necessary Jos reportingTime should be configurable in the OLT portal analogously to reporting rules for example correct Example reporting time object reportingTime path attributesReadAttribute pmin 1 pmax 1 usecache false Jos check my interpretations Max value will be reposted if max value is reached Min value will be reposted at least every n units of time Or shortest period of time the value can be refreshed at least n units of time must have passed Cache same value reposted or not Jos is cache truefalse independent of pminpmax Or are the interdependent attrspmin isNumberattrspmin attrspmin qnsogetlwm2mServer 0 defaultMinPeriod attrspmax isNumberattrspmax attrspmax qnsogetlwm2mServer 0 defaultMaxPeriod attrsmute isBooleanattrsmute attrsmute true attrscancel isBooleanattrscancel attrscancel true attrslastRpVal attrslastRpVal null attrsusecache isBooleanattrsusecache attrsusecache false End Notes 20190611 Implement funnctions to monitor your devices and create alert For this the OLT platform provides the event device type property ant the associated eventingest MQTT topic Reading Status Data Lets take a shutter contact as an example In this simple example the relevant properties in the device type JSON schema are attributes for sensor data and events for onetime events Procedure 1 If your existing solution or a new device you want integrate doesnt have an API documentation intercept the communication Use for example the Firefox console CrtlShiftK to inspect the HTTP requests the devices web client sends to the device The following example inspects the status and configuration of a thermostat and a shutter contact controlled by a gateway 2 Classify the relevant data and apply the JSON schema properties accordingly Use the attributes property to read and store sensor data in the case of the shutter contact our example the current window status windowOpen The attributes property is intended for readonly data such as sensor data Assign the battery status or the connection status to the event property The event property is intended for onetime events that can occur for example overheating or low battery Jos tries to find example and also include events since events are not yet well documented JSON Schema Example Shutter Contact JSON attributes windowOpen type boolean event batteryLow type boolean transmitError type boolean stateInfo type string radioState type string 3 Enable reporting for the relevant attributes Jose would you enable reporting for events too eg to establish SLA statistrics JSON path attributeswindowOpen reportTo timeseries 4 To push the shutter contact sensor data to the OLT platform via Mosquitto create an MQTT message The topic is dataingest The payload is the device type property and the current value sh mosquittopub h mqttlightelligenceio p 8883 cert devicecertpem key devicekeypem d t dataingest m type attributes value windowOpen true V mqttv311 cafile oltcapem 5 To push the shutter contact event data to the OLT platform via Mosquitto create a corresponding MQTT message The topic is eventingest The payload is the device type property and the current value sh mosquittopub h mqttlightelligenceio p 8883 cert devicecertpem key devicekeypem d t eventingest m type event value batteryLow false V mqttv311 cafile oltcapem 6 Implement and test monitoring and alerting To allow you to emulate a device generating onetime events we provide the eventingesthttpsapilightelligenceiov1apicollectiontageventspaths1eventingestpost endpoint So to test your monitoring and alerting function instead of sending an MQTT message make an HTTP request Jos as per the API docu the type is not event but overheated or in our example batteryLow is it correct sh curl X GET httpsapilightelligenceiov1eventingest H Authorization Bearer TOKEN H CacheControl nocache H ContentType applicationjson d type event value batteryLow true createdAt 20180707T1150120000 deviceId 550e8400e29b11d4a716446655440000 senderId 550e8400e29b11d4a716446655440000 As per httpsapilightelligenceiov1apicollectiontageventspaths1devices1deviceId1lasteventsget d type overheated value temperature 45 createdAt 20180707T1150120000 deviceId 550e8400e29b11d4a716446655440000 senderId 550e8400e29b11d4a716446655440000 Setting Up Alerting Monitor the connection status of your devices Procedure In the OLT portal open the device Result Under Diagnostics a diagnostics log listing invalid MQTT messages is displayed If a device doesnt send date information continuously the status Offline is displayed Alex this seems not to be the case in the devportal as of 20190412 also how am I alerted if a device fails We should have a dashboard for that tbd add screenshot clarify and verify can the interval be configured Currently we display Last Seen 1142019 135338 Diagnostics Last hour messages 125340 Device connected 125341 Device disconnected "},{"title":"Storing and Retrieving Sensor Data","href":"/devices/reporting-getting-started","content":" title Storing and Retrieving Sensor Data linktitle Storing and Retrieving Sensor Data description Store sensore data in the OLT platform and simulate an application retrieving the data date 20190601 publishdate 20190601 categories devicesdata keywords reportingsensor datadevice typesattributes menu docs parent devices weight 10 weight 10 sectionsweight 10 draft false aliases devicesoverviewquickstart toc true You got started with setting up a Raspberry Pi and transmitting configuration data such as the IP address to the OLT platform See Connecting a Device in 3 Stepsgettingstartedsettingupgettingstarted By walking through the process manually you got an idea of how the elements of the OLT platform interact see Walking Through the OLT Portal Step by Stepgettingstartedconnectivitygettingstarted Now we add a new device type to cover a typical IoT scenario Storing time series sensor data in the OLT platform and retrieving the data To do so we attach a motion sensor to the Raspberry Pi Again we provide you with a Bash script to install software and send the sensor to the OLT platform automatically The Bash script creates a device type with a JSON schema containing a property called attributes We use the configuration property in the first scenario for readwrite activities for example setting the target temperature of a thermostat The attributes property is for readonly activities its typical use case is reading sensor data Here we go 1 Use the Bash script to set up your sensor and connect it to the OLT platform 2 To store the sensor data in the OLT platform enable reporting 3 Simulate an application retrieving the time series data from the OLT platform To do so make a GET request to one of the timeserieshttpsapilightelligenceiov1apicollectiontagtimeseries endpoints of the OLT API Setting Up Your Sensor Attach a motion sensor to your Raspberry Pi and execute a Bash script to connect it to the OLT platform Prerequisites You have connected your Raspberry Pi with the raspiansetupsh Bash script described under Connecting a Device in 3 Stepsgettingstartedsettingupgettingstarted With this scenario you have installed an MQTT client Python and the Python module pahomqtt on your Raspberry You have attached a sensor to your Raspberry Pi In our example we connect a motion sensor HCSR501 PIR to GPIO pin 4 Procedure 1 Ensure that your sensor is connected to your Raspberry Pi In our example we connect an HCSR501 PIR sensor as follows Sensor Raspberry Pi VCC VCC 5V Out GPIO Pin 4 GND Ground 2 Under githubcomounisraspberrypideviceonboardinghttpsgithubcomounisraspberrypideviceonboarding download the installpresencesh Bash script The script does the following Prompt you to enter your authentication token Prompt you to enter the tenant name or ID Create a device in the OLT platform and a corresponding device type Generate a device key Generate a device certificate Save a Python program presencepy in the directory created The Python program passes the sensor data to the OLT platform via MQTT messages Create a cron job to execute the Python program 3 To execute the Bash script do the following 1 Make it executable chmod x raspiansetupsh 2 Execute the script raspiansetupsh 4 On request of the Bash script do the following Enter the platform URL lightelligenceio Enter the authentication token displayed in in the OLT portal under Developer Area Enter your tenant name or your tenant ID displayed in in the OLT portal under Developer Area Result The Bash script creates a device certificate and sets up the MQTT communication Your Raspberry Pi is now sending the motion sensors data If you analyze the Bash script you see it does so by pushing updates from your device to the server via the mosquittopub command mosquittopub h mqttlightelligenceio p 8883 cert devicecertpem key devicekeypem d t dataingest m type configuration value presence 1 V mqttv311 cafile oltcapem The topic is dataingest The payload is the device type property and the current value Lets check 1 In the OLT portal choose Devices Types 2 In the Devices overview click the presence sensor the Bash script has created The latest sensor signal is displayed under Status Diagnosis Note that the sensor data is displayed under Attributes This corresponds to the attributes Property in the JSON schema the Bash script has created 3 Optional To verify if your sensor is actually sending data execute presencepresencepy and move the sensor 1 means the sensor is detecting motion 0 means there is no motion Enabling Reporting So far we have connected the sensor to the OLT platform That means we get the latest sensor reading But our use case is to store the sensor data in the OLT platform and retrieve times series data from the OLT platform To store the data activate reporting in the corresponding device type Procedure 1 Open the device type in our example the device type corresponding to the motion sensor 2 Under Reporting Rules choose Edit 3 Insert the following reporting rule path attributespresence reportTo timeseries A reporting rule is composed of a JSON PathhttpsgoessnernetarticlesJsonPath and a reportTo property Result Your motion sensor data is stored in the OLT platform Lets verify this in the last step Retrieving Time Series Data Simulate an application access your sensor data stored in the OLT platform To get for example the last hour of the sensors time series data make a GET request to the v1devicesdeviceIdlasttimeserieshttpsapilightelligenceiov1apicollectiontagtimeseriespaths1devices1deviceId1lasttimeseriesget endpoint Procedure 1 To obtain the motion sensors device ID choose Devices Types The ID is displayed in the device oveview 2 Obtain the authentication token under Developer Area 3 Provide the query parameter path to make the request in our example pathattributespresence Ensure that the request is URLencoded as in the following cURL example curl X GET httpsapilightelligenceiov1devicesc42ff2fb007f4bd4ac05c4e610f34895lasttimeseriespath24attributespresence H Authorization Bearer authenticationToken H CacheControl nocache H ContentType applicationjson Result Your sensor data is retrieved Note The time stamp format is Coordinated Universal Time UTC "},{"href":"/devices/sending-actions","content":" title Sending Actions to Devices date 20190412 draft true weight 90 Turing What does Cloud To Device do What guarantees does the current solution provide What are current limitations in the implementation What does a device need to do to receive actions from the cloud How can actions be sent An action is for executables Eg Define the ambient light color with RGB LEDs Prerequisites x You have performed the Getting Sensor Data In and Out of the OLT Platform scenario With this scenario you have installed an MQTT client Python and the Python module pahomqtt on your Raspberry Procedure 1 In the OLT portal create a device type and device for the sensor attached You have the device IDs required to generate the device certificates tbd new image 2 Attach a 4pin RGBLED to your Raspberry Pi In our example we map the GPI pins as follows LED Raspberry Pi Red GPIO Pin 23 Cathode Ground Green GPIO Pin 24 Blue GPIO Pin 25 3 Download our bash scipt The bash script does the following Create a directory homepirgb for the LED device certificate and a Python program to process the LED data Generate a device key Prompt you to enter the tenant name or ID Prompt you to enter the device name and ID Generate a device certificate and prompt you to copy paste it in the Certificates field of your Raspberry Pi device in the OLT platform Save a Python program rgbpy in the directory created The Python program passes the action data from the OLT platform to the device via MQTT messages Create a cron job to execute the Python program Generate a device certificate and prompt you to copy paste it in the Certificates field of your sensor device in the OLT platform Prompt you to include the required parameter in the device type associated with your motion sensor 4 To execute the Bash script do the following 1 Make it executable chmod x installrgbsh 2 Execute the script installrgbsinstallrgb 5 On request of the Bash script do the following Enter the tenant ID Enter the Raspberry PI device name or device ID Copy the Raspberry Pi device certificate and paste it into the corresponding Certificate field in the OLT portal Your Raspberry Pi is now able to receive actions from the OLT platform 6 Adapt your LED device type so as to enable the OLT platform to receive the action data To do so in the Schema field enter the configuration parameter ipaddress ambientLight contains the color definition The color definition is composed of three values Red Green and Blue actions ambientLight type object properties r type string g type string b type string 7 Trigger an action on your device To do so make a POST request to the httpsapilightelligenceiov1devicesdeviceIdactions endpoint as in the following cURL example curl X GET httpsapilightelligenceiov1devices383b8c61a9c7487fb4e166fad753e546actions H Authorization Bearer TOKEN H CacheControl nocache H ContentType applicationjson To light up the LED in blue use the followong message for example action ambientLight payload r 0 g 0 b 1 description Switch on blue light Result An action ID is generated dataactionId5895f5f093e9428ca4b6580eb814f11e for example The LED is switched on In our example it lights up blue "},{"href":"/devices/synchronizing-device-configurations","content":" title Synchronizing Device Configurations linktitle Synchronizing Device Configurations description Change configuration values in devices and verify the changes date 20190601 publishdate 20190601 categories devices keywords device typesconfigurationsynchronization menu docs parent devices weight 30 weight 30 sectionsweight 30 draft false aliases devicesoverviewquickstart toc true The config sync process is still under discussion This chapter is a placeholder Begin Notes 20190611 Jos config subject is changing fast is going to be discussed with Michael 2nd way of updating will not be implemented 420 config changes come from OLT to the adapter same logic as with actions gateway knows which adapter this device for this change belongs to gateway roots the config to the corresponding adapter adapter roots config to field device validate values and post them if changed not yet finished in SDK analogous to actions OLT routes to gateway sends action with payload info is posted to gateway that is referenced by connectdBy attribute Gateway routes to adapter Adapter routes to field device using the specific field device communication a gateway can have any number of apps in form of adapters 2 configurations for 1 polling minimummax period and chache value that can be set for every attribute 2 eventbased As for Config update 1 subscribe it to the devicesdeviceIdconfiguration topic 2 To actually trigger the configuration change implement a PATCH request to the devicesdeviceId endpoint When gateway has an adapter and the adapter creates a device When I write an adapter I make calls only to the gateway Gateway has 2 API HTTP MQTT a kind of mini OLT runs in the Gateays acts as a filter man in th emiddle to decide what gets posted and to route information back gateway needs adapter only adapter can route action back to the device The Adapter can talk to both the gateway and the field protocol it manages Eg BLE adapter if config change in gateway gateway knows the device corresponds to BLE adapter sends config update to adapter adapter passes the configuration to the device and reports back to OLT to acknowledge that config has actually changed On creating a device I get an MQQT configuration update message at the gateway with the configuration used to create the device Then this config update message is processed as if it had been received later by just parsing the configuration by the appropriate processing and then the ackknowledgement End Notes 20190611 Lets now change configuration data in the following example a thermostats target temperature The associated device type property is configuration You employed it to read network and sensor data when you connected your first device see Connecting a Device in 3 Stepsgettingstartedsettingupgettingstarted A configuration change is bidirectional In our example write a new target temperature to the device And we read the configuration to verify changes or monitor the configuration Synchronizing Configuration Data Jose our virtual adapter implements two ways to change configuration data Send either start or stop update action to the device in this case startstop incrementing a counter generated in lieu of sensor data for example stop value not incremented and not posted or Write new config value update values to the device in OLT then send action to reload config action it will grab the config from OLT and adapt adapter behavior Jos Is there a realworld use case behind the alternative Procedure 1 Inspect the device communication Use for example the Firefox console CrtlShiftK to inspect the HTTP requests the devices web client sends to the device The following example inspects the status and configuration of a thermostat and a shutter contact controlled by a gateway 2 In the OLT portal create the device type 1 Classify the relevant data and apply the JSON schema properties accordingly Use the attributes property to read and store sensor data in our example the current temperature currentAutoTemperature You are familiar with the attributes property from the Storing and Retrieving Sensor Data in 3 Stepsdevicesreportinggettingstarted scenario Assign the target temperature to the configuration property Define for example a setPointTemperature property The configuration property is intended for readwrite data Assign the battery status or the connection status for example to the event property You are familiar with the event property from the Monitoring Devices and Alertingdevicesmonitoringdevices scenario tbd event is currently fixed type eg overheated its under discussion JSON Schema Example Thermostat JSON attributes currentAutoTemperature type number configuration setPointTemperature type number temperatureOffset type number event batteryLow type boolean transmitError type boolean stateInfo type string radioState type string 2 Enable reporting for the relevant attributes Joswould one also write the events to the database in our case the battery status and event properties Jos if it makes sense to store event data would I define the reporting rule the same way as with attributes events are under discussion not yet clear what granularity we need for the timeseries JSON path attributescurrentAutoTemperature reportTo timeseries path eventbatteryLow reportTo timeseries 3 Implement a process to store and retrieve the sensor data and process event data 4 To write new configuration to the device in our example set the target temperature to 21 do the following 1 To enable your thermostat to receive configuration updates subscribe it to the devicesdeviceIdconfiguration topic sh mosquittosub h mqttlightelligenceio p 8883 cafile oltcapem cert devicecertpem key devicekeypem V mqttv311 t devicesdeviceIdconfiguration d The thermostat now listens for configuration changes 2 To actually trigger the configuration change implement a PATCH request to the devicesdeviceIdhttpsapilightelligenceiov1apicollectiontagdevicespaths1devices1deviceIdpatch endpoint Your request contains the configuration name and its payload in the request body in our example setPointTemperature and the new target temperature 21 sh curl X PATCH httpsapilightelligenceiov1devicesdeviceId H Authorization Bearer TOKEN H CacheControl nocache H ContentType applicationjson d configuration setPointTemperature 21 Result When youve performed the device configuration change on your device you receive an MQTT message similar to the following tbd verify json deviceId deviceId configuration setPointTemperature 21 This updates your devices internal configuration according to its digital twin in the cloud 5 Implement a process to verify the configuration change To do so use an MQTT message to the dataingest topic The process is analogous to processing sensor data as described under Storing and Retrieving Sensor Datadevicesreportinggettingstarted mosquittopub h mqttlightelligenceio p 8883 cert devicecertpem key devicekeypem d t dataingest m type configuration value setPointTemperature setPointTemperature V mqttv311 cafile oltcapem Note Quality of Service QoS The OLT platform supports the QoS levels 0 and 1 Jos In case of actions and config changes Problem How the device acknowledge the change why would we use a reload confic action instead of sending an MQTT message to the dataingest topic as above So use action to be included in the SDK as a standard feature ReloadConfiguration Re Adapter reads new configuration from OLT and do changes accordingly request to the devicesdeviceIDactions endpoint Example sh curl X POST httpsapilightelligenceiov1devicesb3ec0d146ad54dbd90eebe019b1aae62actions H Accept applicationjson H ContentType applicationjson H PostmanToken b09d74b9063d47a68d77af558045b0d4 H cachecontrol nocache d action ReloadConfiguration payload "},{"href":"/devices/understanding-mqtt","content":" title Understanding MQTT date 20190412 draft true weight 200 Under Getting Startedgettingstarted you have learned how to create certificates and associate them to the tenant and device connect to the platform via MQTT verify that the data has actually been received Additional Information Turing General How do I manage certificates what are the limitations Why can there be more than one certificate per device How do I rotate certificates When I connect to the platform via MQTT what role to parameters like QoS and KeepAlive play What client libraries do we recommend Processes How can I send attributes configuration and events to the platform How can I verify that the data has actually been received link to API docu How can I debug if the data is not showing up"},{"href":"/documentation.md#","content":" title Lightelligence Documentation linktitle Lightelligence description Lightelligence is the worlds smartest IoT platform date 20190627 publishdate 20190627 menu main parent section name weight 01 weight 01 rem draft false slug aliases toc false layout documentationhome Lightelligence is the worlds smartest IoT platform Below you will find some of the most common and helpful pages from our documentation"},{"href":"/getting-started/Testing-Shortcodes","content":" title Testing Shortcodes 2 description Test page for Hugo functions date 20190614 categories gettingstarted keywords installationRaspberry menu docs parent gettingstarted weight 5 weight 5 sectionsweight 5 draft false toc true tags shortcodes Todo todo Text in the todo shortcode is not rendered in HTML todo Syntax Highlighting As markdown js gruntinitConfig assemble options assets docsassets data srcdatajsonyml helpers srccustomhelpersjs partials srcpartialshbsmd pages options layout defaulthbs files srctemplatespagesindexhbs php php color red echo My car is color echo My house is COLOR echo My boat is coLOR Code Toggle 1 1 googleAnalytics UA12345 2 2 test 3 3 With shortcode code to display copy to clipboard button Requires file name to show copytoclipboard button code With shortcode highlight The shortcode highlight requires a language to be specified The shortcode highlight requires eg curl as language attribute toallow to indicate line breaks in a command mosquittopub h mqttlightelligenceio p 8883 cert devicecertpem key devicekeypem d t dataingest highlight sh for example JSON for example JSON data id 72fac0d5fe3245998f9ca033e42faaa9 email JohnDoeexamplecom firstName John lastName Doe userRoles id 3100bdf890d9471d86aef7ba9eff0a86 name owner displayName Owner description Default owner role with full access to all resources locked true JAVA var token TOKEN var tenantId tenantId var userId userId var apiUrl httpsapilightelligenceiov1tenants tenantId users userId var headers Authorization Bearer token CacheControl nocache ContentType applicationjson With numbered lines Note the border disappears and the block doent expand on hovering over it var token TOKEN var tenantId tenantId var userId userId var apiUrl httpsapilightelligenceiov1tenants tenantId users userId var headers Authorization Bearer token CacheControl nocache ContentType applicationjson cURL curl X GET httpsapilightelligenceiov1usersuserIdtenants H Authorization Bearer TOKEN H CacheControl nocache H ContentType applicationjson Notes Note with 1 List item 1 Note Note text 2 List item m Notes normal note Lazy Blogger If all you want is a simple menu for your sections see the Section Menu for Lazy Bloggers in Menu Templatestemplatesmenutemplatessectionmenuforlazybloggers note Note in list as table 1 List item 1 noteinlist Tip If all you want is a simple link see Linkgettingstartedtestingshortcodes But with Inner markdownify it wont work The note text is highlighted as code With Inner the layout is OK but the link and the bold characters are not renderedmarkdownified noteinlist 2 List item 2 Note in list with horizontal rule 1 List item 1 noteinlisthr Tip If all you want is a simple link see Linkgettingstartedtestingshortcodes But with Inner markdownify it wont work The note text is highlighted as code With Inner the layout is OK but the link and the bold characters are not renderedmarkdownified noteinlisthr 2 List item 2 Note as table not indented noteinlist Tip If not indented the note layout and markdown is fine If all you want is a simple link see Linkgettingstartedtestingshortcodes noteinlist Builtin note shortcode note The builtin note shortcode note Code Code in Normal Text some sample code Code in List 1 Lorem some sample code 2 Ipsum Setting Up Your Raspberry Pi Prerequisites You have a Raspberry Pi with an SD card an SD card reader myshortcode colorblue This quick start uses macOS in the examples For instructions about how to install Hugo on other operating systems see installgettingstartedinstalling It is recommended to have Git installedhttpsgitscmcomdownloads to run this tutorial myshortcode Procedure 1 List item 1 Text before quote block Quote block in list item 1 Text after quote block 2 List item 2 Text before quote block Quote block in list item 2 Text after quote block 3 List item 3 Text before quote block Quote block in list item 3 Text after quote block 4 Lorem ipsum dolor sit amet consetetur sadipscing elitr tip Test tip 5 Lorem ipsum dolor sit amet consetetur sadipscing elitr Lorem ipsum dolor sit amet consetetur sadipscing elitr sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat At vero eos et accusam et justo duo dolores et ea rebum Stet clita kasd gubergren no sea takimata sanctus est Lorem ipsum dolor sit amet 6 Lorem ipsum dolor sit amet consetetur sadipscing elitr Lorem ipsum dolor sit amet consetetur sadipscing elitr sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat At vero eos et accusam et justo duo dolores et ea rebum Stet clita kasd gubergren no sea takimata sanctus est Lorem ipsum dolor sit amet 2 Treas em wankeing ont sime ploked peish rof phen sumbloat syug si phat phey gavet peish ta paat ein pheeir sumbloats note Standard Hugo Note note 3 Lorem ipsum dolor sit amet consetetur sadipscing elitr Some code 4 Lorem ipsum dolor sit amet consetetur sadipscing elitr Lorem ipsum dolor sit amet consetetur sadipscing elitr 5 Lorem ipsum dolor sit amet consetetur sadipscing elitr 6 Choose Register and enter data as required 7 In the email you receive activate your account You go to the Welcome page 8 Choose Create Tenant 9 Choose the Free Starter plan and enter data as required Note You need a tenant name or ID in the subsequent process To test the OLT platform within the free plan for the sake of our example enter some random data To create an actual account familiarize yourself with the multitenancy concept and create multiple tenants if required For more information see Creating Tenantsuserscreatingtenants The tenant is created 10 Choose Login with new tenant related SiteRegularPagesRelated first 5 with related See Also range Title end end Result Your physical device is running and ready to get connected to the OLT platform noteinlist This quick start uses macOS in the examples For instructions about how to install Hugo on other operating systems see installgettingstartedinstalling It is recommended to have Git installedhttpsgitscmcomdownloads to run this tutorial noteinlist Step 1 Install Hugo note Homebrew a package manager for macOS can be installed from brewshhttpsbrewsh See installgettingstartedinstalling if you are running Windows etc note To verify your new install bash hugo version "},{"title":"Getting Started","href":"/getting-started/_index - Kopie.txt","content":" title Getting Started date 20190416 lastmod 20190606 draft false weight 10 In the first station of your OLT user journey get the technical understanding of the vehicles the OLT platform provides to get you to your IoT destination To get started with these OLT vehicles perform the following scenarios Connect an existing device to the OLT platform Connecting a Device in 3 Stepsgettingstartedsettingupgettingstarted Get started with a Raspberry Pi for example Its your ideal companion for the first steps on your journey Get an overview of the OLT portal function you will typicall use when adding devices to your IoT system landscape Walking Through the OLT Portal Step by Stepgettingstartedconnectivitygettingstarted"},{"href":"/getting-started/_index","content":" title Getting Started linktitle Getting Started description In the first station of your OLT user journey get the technical understanding of the vehicles the OLT platform provides to get you to your IoT destination date 20190501 publishdate 20190501 lastmod 20190501 categories gettingstarted keywords overviewroadmap menu docs parent gettingstarted weight 1 weight 0001 rem draft false aliases overviewintroduction toc false imagepath imagesdocsIconappsvg To get started with these OLT vehicles perform the following scenarios Connect an existing device to the OLT platform Connecting a Device in 3 Stepsgettingstartedsettingupgettingstarted Get an overview of the OLT portal function you will typicall use when adding devices to your IoT system landscape Walking Through the OLT Portal Step by Stepgettingstartedconnectivitygettingstarted"},{"href":"/getting-started/basic-concepts","content":" title Recapulating Basic Concepts linktitle Recapulating Basic Concepts description Understand tenants device types and devices date 20190601 publishdate 20190601 categories gettingstarted keywords tenant device type device tags tenant device type device menu docs parent gettingstarted weight 40 weight 40 sectionsweight 40 draft false aliases gettingstarted toc true Understanding the Concepts You now know some basic concepts A tenant owns the physical devices in an IoT system landscapes You create a tenant by registering to the OLT platform A device type describes the capabilities of a class of devices which data they can exchange with the OLT platform You can create and edit device types for device classes such as sensors actors or gateways in the OLT portal Or create it with an HTTP request to the OLT API as our Bash script does A device is a digital twin of a physical device representing it in the OLT platform with the properties defined in the corresonding device type You can create and edit device types and display their status in the OLT Portal Or create them with HTTP requests as in our Bash script Practicing To learn whats under the hood when you execute the Bash script perform the steps manually Go to Walking Through the OLT Portal Step by Stepgettingstartedconnectivitygettingstarted"},{"href":"/getting-started/connectivity-getting-started","content":" title Walking Through the OLT Portal Step by Step description To see whats under the hood and understand basic mechanisms easier connect your device to the OLT platform manually date 20190316 categories gettingstarted keywords tags configurationDevice TypeMQTTDevice CertificateMosquitto Client menu docs parent gettingstarted weight 20 weight 20 sectionsweight 20 draft false aliases gettingstarted toc true In the first scenario our Bash script connects an existing device to the OLT platform automatically in our example a Raspberry Pi Now we describe how you would connect a device manually The process gives you an idea of the components of a solution especially how we guarantee secure communication an overview of the OLT portal functions The OLT platform talks MQTT with the devices attached so we want to achieve that your device exchanges MQTT messages with the OLT platform To verify the connection works youll send a sample MQTT message to the OLT platform manually The process does the the same as our Bash script Creating a Device Type The following procedure is equivalent to the POST request to the devicetypeshttpsapilightelligenceiov1apicollectiontagdevicetypespaths1devicetypespost endpoint in our Bash script Procedure 1 Log on to the OLT portalhttpsportallightelligenceio 2 Click the tenant you have created 2 Under Devices Types choose Device Types 3 Choose Create Device Type 4 Enter data as required In our example enter Raspberry Pi as the device type name 5 Choose Proceed to Parameters 6 In the Configurations Attributes and Actions field add the following sample configuration parameter ipaddress Note Ignore the Reporting Rules field for now We will deal with it in the Storing and Retrieving Sensor Datadevicesreportinggettingstarted scenario attributes configuration ipaddress type string actions 7 To confirm choose Create Device Type The device type is displayed on the Device Types tab At the moment the content doesnt matter We just need any device type Creating a Device In the OLT platform create a digital twin of your device based on the device type created The following procedure is equivalent to the POST request to the deviceshttpsapilightelligenceiov1apicollectiontagdevicespaths1devicespost endpoint in our Bash script Procedure 1 Under Devices Types Devices choose Create Device 2 Select the device type you have created under Creating a Device Typegettingstartedconnectivitygettingstartedcreatingadevicetype and choose Proceed to Device 3 Describe the device In our example enter Raspberry Pi as the device name Note In a production system metadata like name location description and tags help you to monitor and maintain the devices in your system landschape For more information see Managing Devicesdevices 4 To confirm choose Create Device 5 Choose Skip Why skip You dont have a device certificate yet Youll create it in the next step and perform the skipped step later under Register the Device To the OLT PlatformgettingstartedconnectivitygettingstartedregisterthedevicetotheOLTplatform But to create the device certificate you need the device name or ID in the first place Result The device name and ID are displayed Generating a Device Certificate Create a unique SSLTLS client certificate for your device During the TLS handshake between your device and the platform the platform uses the device certificate to identify and authenticate your device In our example use the OpenSSL command line utilityhttpswwwopensslorg to create a selfsigned device certificate for your Raspberry PI The following procedure is equivalent to the POST request to the deviceshttpsapilightelligenceiov1apicollectiontagdevicespaths1devicespost endpoint in our Bash script Procedure 1 Create a directory in which to create the device certificate 2 To create a private key to sign the device certificate to be generated execute openssl ecparam out devicekeypem name prime256v1 genkey A file called devicekeypem containing the private key is in your directory 3 Create a device certificate and sign it with the private key generated Proceed as follows 1 Obtain the following information Look up the tenant ID under Developer Area or the tenant name on the Tenant Selection page Look up the device name or the device ID displayed under Devices Types Devices 2 Use the subj parameter to insert the information in the following command openssl req new key devicekeypem x509 days 365 out devicecertpem subj OCN and execute the command Example req new key devicekeypem x509 days 365 out devicecertpem subj OSampleTenantCNSampleDevice Result Thats it The device certificate is in your directory Registering the Device to the OLT Platform Enter the device certificate you have created under Generating a Device Certificategettingstartedconnectivitygettingstartedgeneratingadevicecertificate Procedure 1 Open the device certificate 2 In the OLT portal paste the device certificate content into the Certificates field 3 To confirm choose Save Result The device is registered to the OLT platform The device certificate status is displayed Congrats Your device is now able to talk to OLT platform Turning Your Device into a Mosquitto Client The OLT platform talks MQTT Message Queue Telemetry Transport So next you turn your device into an MQTT client To establish the connection to the cloud install Mosquitto for example Procedure 1 To install Mosquitto follow the guidelines for your operation system under httpswwweclipseorgmosquittodownloadhttpswwweclipseorgmosquittodownload 2 Copy and paste the certificate below into a file named oltcapem and you are ready to go todo file link to our script repo todo BEGIN CERTIFICATE MIICBzCCAaygAwIBAgIBADAKBggqhkjOPQQDAjBcMQswCQYDVQQGEwJERTEOMAwG A1UEChMFT1NSQU0xDDAKBgNVBAsTA09MVDEvMC0GA1UEAxMmT1NSQU0gT0xUIERl dmljZVNlcnZpY2VzIFRydXN0QW5jaG9yIDEwIBcNMTgwNjEyMTU1NTMwWhgPMjA1 ODA2MTIxNTU1MzBaMFwxCzAJBgNVBAYTAkRFMQ4wDAYDVQQKEwVPU1JBTTEMMAoG A1UECxMDT0xUMS8wLQYDVQQDEyZPU1JBTSBPTFQgRGV2aWNlU2VydmljZXMgVHJ1 c3RBbmNob3IgMTBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABIRHefdjW8eKPEpi RV88sqk7nqOIDdg4v2KcIsX8LQD94YGkDEDO4Alg3EdtibTXMtztbSiRMmyBeB 7FmbrKjXTBbMB0GA1UdDgQWBBQmEJ8uurFfHaFxDYw1oeYNu1M6TAfBgNVHSME GDAWgBQmEJ8uurFfHaFxDYw1oeYNu1M6TAMBgNVHRMEBTADAQHMAsGA1UdDwQE AwIBBjAKBggqhkjOPQQDAgNJADBGAiEA1dAeBWcIDUyOzuQSzhO0cajg3mZfiHp NwryIKRR9fgCIQDKqKmKv1STjPEePu4NL2YEqsVauaVl4CVQIYVjEwN3cw END CERTIFICATE code 3 Ensure that the following files are in your Mosquitto directory devicecertpem devicekeypem oltcapem Verifying Your Device Can Communicate with the OLT Platform Send a message from your device to the OLT platform Under Creating a Device Typecreatingadevicetype you have defined a device type schema specifying a configuration parameter called ipaddress whose data type is string Via an MQTT message send a random IP address 19216811 for example Then check whether the IP address has actually been sent to the OLT platform Procedure To change the configuration in the OLT platform enter the following command mosquittopub h mqttlightelligenceio p 8883 cert devicecertpem key devicekeypem d t dataingest m type configuration value ipaddress 19216811 V mqttv311 cafile oltcapem The command is composed of the following components mqttlightelligenceio is the address of the OLT platform you want to connect to mqttv311 is the protocol to be used cafile is the OLT certificate of the Certificate Authority that has issued the TLS certificate of the OLT platforms MQTT service type configuration value ipaddress 19216811 is the MQTT message containing the configuration change you want to publish for your device Result Your output is similar to the one below Client mosqpub9736W541 sending CONNECT Client mosqpub9736W541 received CONNACK Client mosqpub9736W541 sending PUBLISH d0 q0 r0 m1 dataingest 51 bytes Client mosqpub9736W541 sending DISCONNECT The updated configuration is displayed in the OLT portal under Status Diagnostics Result Congrats You have connected your device to the OLT platform You have a detailed idea of our Bash script enabled your Raspberry PI to talk with the OLT platform via encrypted messages"},{"href":"/getting-started/setting-up-getting-started","content":" title Connecting a Device in 3 Steps description Connect a Raspberry Pi to the OLT platform in three automated steps See how fast you can get connected to the OLT platform date 20190614 categories gettingstarted keywords installationsetupRaspberry tags menu docs parent gettingstarted weight 10 weight 10 sectionsweight 10 draft false aliases gettingstarted toc true A Raspberry Pi is an ideal companion for the first steps on your journey Connect a Raspberry Pi to the OLT platform in three easy steps 1 Flash an operating system onto a Raspberry Pi 2 In the OLT portal register to the OLT platform 3 Let a Bash script connect your Raspberry PI to the OLT platform and let and display the temperature and the IP address the Raspberry Pi transmits to the OLT platform By performing the required activities in the OLT portal and by analyzing what the Bash script does you get a basic technical idea of the OLT concepts and mode of operation orientation in the OLT portal Setting Up Your Raspberry Pi Prerequisites You have a Raspberry Pi with an SD card an SD card reader Procedure 1 Under raspberrypiorgdownloadsraspbianhttpswwwraspberrypiorgdownloadsraspbian download the Raspbian Stretch with desktop and recommended software image and unzip it 2 With a tool like Etcherhttpswwwbalenaioetcher flash the image to an SD card 3 Put the SD card into your Raspberry PI and power on 4 Adjust the settings and restart Skip the software updates that would take a while Result Your physical device is running and ready to get connected to the OLT platform Registering to the OLT platform and Creating a Tenant Create a test tenant in our free plan You just need an email address Procedure 1 Go to the OLT portal under httpsportallightelligenceiohttpsportallightelligenceio 2 Choose Register and enter data as required 3 In the email you receive activate your account You go to the Welcome page 4 Choose Create Tenant 5 Choose the Free Starter plan and enter data as required Note You need a tenant name or ID in the subsequent process To test the OLT platform within the free plan for the sake of our example enter some random data To create an actual account familiarize yourself with the multitenancy concept and create multiple tenants if required For more information see Creating Tenantsuserscreatingtenants The tenant is created 6 Choose Login with new tenant Result Via the Lightelligence portalhttpsportallightelligenceio you have access to the OLT platform A user is created by default Connecting Your Raspberry Pi to the OLT platform With a Bash Script As a tenant you can obtain the information required to connect your Raspberry Pi Procedure 1 Log on to your Raspberry PI and start a Web browser 2 Under githubcomounisraspberrypideviceonboardinghttpsgithubcomounisraspberrypideviceonboarding download the raspbiansetupsh Bash script To establish communication with the OLT platform the Bash script does the following Install the MQTT broker Mosquitto Install Python to process sensor and network data Install the Python module pahomqtt to pass the Python data to Mosquitto 3 To execute the Bash script do the following 1 Make it executable chmod x raspiansetupsh 2 Execute it raspiansetupsh You are prompted to enter some information 4 As the platform URL enter lightelligenceio 5 To obtain the API authentication token do the following 1 Log on to the OLT portalhttpsportallightelligenceio 2 Click the tenant you have created 3 Under Developer Area copy the authentication token 6 Enter your tenant name Alternatively under Developer Area copy the tenant ID 7 Specify the network interface If you have connected the Raspberry Pi via WiFi enter WLAN0 If you have connected it via ethernet enter eth0 Result With these 3 steps your Rasperry Pi is connected to the OLT portal sending data Lets check it 1 In the OLT portal choose Devices Types Devices 2 Click the Raspberry Pi that the Bash script has created Device information and the device status are displayed Under Configuration the temperature and ip address sent by your Raspberry are displayed Understanding Device Types The Configuration corresponds to a property of a socalled device type The Bash script has created the device type It describes the capabilities of your device In our example the capabilities of the Raspberry Pi are to have a temperature and an IP address Lets check 1 To display the device type In the OLT portal choose Choose Devices Types Device Types You go to the device types overview 2 Click the Raspberry Pi device type that the Bash script has created Under Device Type Information you find attributes to define device classes Under Schema the JSON schema containing the configuration properties is displayed It defines the paddress and the temperature as configuration properties In the Managing the OLT Lifecycledevices chapter of this documentation you will learn how define device types to map your specific IoT system landscape Note Ignore the Reporting Rules field for now We will deal with it in the Storing and Retrieving Sensor Datadevicesreportinggettingstarted scenario "},{"href":"/maintenance/_index","content":" title Tracking Changes description Check the latest changes to our documentation date 20190709 categories maintenance keywords maintenance menu docs weight 200 weight 8 rem slug aliases toc true "},{"href":"/news/0.1-relnotes/","content":" date 20190712 title Lightelligence 01 description Initial version categories Releases images imagesblogLIGHTELLIGENCEIoT PlatformfortheLightandBuildingMarketpng This is our initial version"},{"href":"/news/_index","content":" title Lightelligence Release Notes linktitle Release Notes description Find new Lightelligence features adding value to your IoT solution date 20170712 publishdate 20170712 lastmod 20170712 weight 9 draft false hidesectioncontents false slug aliases releasenotes toc true notesforauthors "},{"href":"/readfiles/README","content":" readdirs Directory for Reusable Content Files in this directory are 1 Used in more than one place within the Hugo docs 2 Used in Examples of readdir ie in local file templates These files are called using the readfile shortcode sourcelayoutsreadfilehtml You can call this shortcode in the docs as follows readfile filepathtofiletxt markdowntrue markdowntrue is optional default false and parses the string through the Blackfriday renderer"},null,{"href":"/readfiles/dateformatting","content":"Go templates format your datestime according to a single reference time Mon Jan 2 150405 MST 2006 You can think of MST as 07 thus making the reference format string a sequence of numbers The following is taken directly from the Go docsgdex Jan 2 150405 2006 MST 1 2 3 4 5 6 7 Hugo Date Templating Reference Each of the following examples show the reference formatting string followed by the string Hugo will output in your HTML Note that the examples were rendered and tested in CST and pull from a single example date you might have in your contents front matter date 20170303T1415590600 Date ie called via page variablepagevars Returns 20170303 141559 0600 CST Monday January 2 2006 Returns Friday March 3 2017 Mon Jan 2 2006 Returns Fri Mar 3 2017 January 2nd Returns March 3rd January 2006 Returns March 2017 20060102 Returns 20170303 Monday Returns Friday 02 Jan 06 1504 MST RFC822 Returns 03 Mar 17 1415 CST 02 Jan 06 1504 0700 RFC822Z Returns 03 Mar 17 1415 0600 Mon 02 Jan 2006 150405 MST RFC1123 Returns Fri 03 Mar 2017 141559 CST Mon 02 Jan 2006 150405 0700 RFC339 Returns Fri 03 Mar 2017 141559 0600 Cardinal Numbers and Ordinal Abbreviations Spelledout cardinal numbers eg one two and three and ordinal abbreviations eg 1st 2nd and 3rd are not currently supported To continue with the example above DateFormat Jan 2nd 2006 Hugo assumes you want to append nd as a string to the day of the month and outputs the following Mar 3nd 2017 Use Local and UTC In conjunction with the dateFormat functiondateFormat you can also convert your dates to UTC or to local timezones dateFormat 02 Jan 06 1504 MST DateUTC Returns 03 Mar 17 2015 UTC dateFormat 02 Jan 06 1504 MST DateLocal Returns 03 Mar 17 1415 CST CST httpsenwikipediaorgwikiCentralTimeZone dateFormat functionsdateformat gdex httpsgolangorgpkgtimeexampleTimeFormat pagevars variablespage time httpsgolangorgpkgtime"},{"href":"/readfiles/","content":" headless true "},null,{"href":"/readfiles/sectionvars","content":"CurrentSection The pages current section The value can be the page itself if it is a section or the homepage FirstSection The pages first section below root eg docs blog etc InSection anotherPage Whether the given page is in the current section Note that this will always return false for pages that are not either regular home or section pages IsAncestor anotherPage Whether the current page is an ancestor of the given page Note that this method is not relevant for taxonomy lists and taxonomy terms pages IsDescendant anotherPage Whether the current page is a descendant of the given page Note that this method is not relevant for taxonomy lists and taxonomy terms pages Parent A sections parent section or a pages section Section The sectioncontentmanagementsections this content belongs to Note For nested sections this is the first path element in the directory for example blogfunnymypost blog Sections The sectionscontentmanagementsections below this content"},{"href":"/readfiles/testing.txt","content":" Hello World Testing one two three Dont delete this sample file used in the templatestemplates section of the Hugo docs"},{"href":"/search/_index","content":" title Searching the Docs description Search the docs and find solutions date 20190712 categories search keywords search menu docs weight 1 weight 7 rem slug aliases toc true outputs html json layout search Search the documents Begin to search"},{"href":"/troubleshooting/_index","content":" title Troubleshooting linktitle Troubleshooting description Find answers to frequently asked questions and known issues date 20170201 publishdate 20170201 lastmod 20170201 menu docs parent troubleshooting weight 6 weight 6 draft false hidesectioncontents false slug aliases troubleshooting toc false notesforauthors note The Troubleshooting section includes known issues recent workarounds and FAQs pulled from the Lightelligence Forumforum forum httpslightelligenceio note "},{"href":"/troubleshooting/faq","content":" title Frequently Asked Questions linktitle FAQ description Solutions to some common OLT issues date 20190712 categories troubleshooting menu docs parent troubleshooting keywords faqs weight 2 toc true aliases faq note Note The answerssolutions presented below are short and may not be note be enough to solve your problem Visit the Lightelligence Forumhttpslightelligenceio and use the search It that does not help start a new topic and ask your questions note Issue 1"},{"href":"/troubleshooting/known-issues","content":" title Known Issues linktitle Known Issues description An overview of known issues and features used for diagnosing and resolving them date 20190712 publishdate 20190712 lastmod 20190712 keywords troubleshooting categories troubleshootingfaqs menu docs parent troubleshooting weight 3 slug aliases toc true Issue 1 Issue 2 "},{"title":"Mapping the OLT Landscape","href":"/users/_index","content":" title Mapping the OLT Landscape linktitle Mapping the OLT Landscape description Plan your OLT journey Create tenants users and custom application roles according to your needs date 20190501 publishdate 20190501 lastmod 20190501 categories users keywords tenantsusersroles menu docs parent users weight 2 weight 0002 rem draft false aliases overviewintroduction toc false Map your IoT system landscape In the Getting Startedgettingstarted step of your OLT user journey you got a technical understanding of the vehicles that can get you to your destination Now define your goals map your destinations and choose the people to accompany you on your OLT journey"},{"href":"/users/creating-custom-roles","content":" title Defining Custom Roles linktitle Defining Custom Roles description Use the OLT role management to control how users can use your custom applications if required date 20190601 publishdate 20190601 categories usersroles keywords userscustom rolescustom application rolescustom applications menu docs parent users weight 30 weight 30 sectionsweight 30 draft false aliases usersoverviewquickstart toc true Custom Roles and Permissions for Applications By default the OLT platform checks whether a user has the read or write OLT permission to access a specific endpoint With custom applications you access the OLT API endpoints With custom roles you can assign custom permissions to control on a more granular level what a user is allowed to do with a custom application So a part of designing custom applications is to determine whether you wish to define custom roles If you decide to implement a custom role concept and to develop custom applications that implement custom permissions follow the instructions under Defining Custom Permissions and Rolesapplicationsdefiningcustompermissions"},{"title":"Creating Tenants","href":"/users/creating-tenants","content":" title Creating Tenants linktitle Creating Tenants description Create one or multiple tenants depending on your organizational structure or monitoring needs date 20190601 publishdate 20190601 categories userstenants keywords tenantusers menu docs parent users weight 10 weight 10 sectionsweight 10 draft false aliases usersoverviewquickstart toc true Whats a Tenant A tenant is the owner of a system landscape As a tenant assign users and roles to manage the system landscape composed of IoT devices Use Cases Create multiple tenants in one of the following cases for example Your organization manages system landscapes for various customers Separate tenants help you facilitate the billing process You manage system landscapes at different sites Separate tenants can help you to keep the overview of complex system landscapes and monitor devices more efficiently Alternatively you can tag the devices according to their site For reporting reasons you want to assign tenants to cost centers Creating A Tenant Procedure 1 Go to the OLT portal under httpsportallightelligenceiohttpsportallightelligenceio 2 Choose Register and enter data as required 3 In the email you receive activate your account 4 On the Welcome page choose Create Tenant 5 Choose the appropriate plan according to your organizational needs and enter data as required Tenant Name Indicate the location to be connected to the OLT plarform Northern plant for example VAT Registration Number Contact Person The tenant is created 6 Choose Login with new tenant Result Your tenant is displayed You can select it Via the OLT portalhttpsportallightelligenceio you have access to the OLT platform A user with owner role is created by default Next Steps Create users and assign the required roles to them Managing Usersusersmanagingusers"},{"title":"Managing Users","href":"/users/managing-users","content":" title Managing Users linktitle Managing Users description Create users and assign the roles required Define who is authorized to perform which activities in a tenant date 20190601 publishdate 20190601 categories usersroles keywords rolesusers menu docs parent users weight 20 weight 20 sectionsweight 20 draft false aliases usersoverviewquickstart toc true Understanding the Role Concept When creating a tenant a default user is created whose role is owner The owner owns the tenant and has no restrictions in the OLT portal Owners can assign the following roles to users A writer is not authorized to manage the tenant data Writers can for example develop applications manage the solution by defining device types or creating devices A reader is not authorized to manage the solution Readers can read data for example As the owner you have for example the following options Create additional owners to manage the tenant To do so invite a user and assign the owner role Invite users and assign roles Assign users to a tenant List the tenants assigned to a user The owner role implies the writer role permissions The writer role implies the reader role permissions Note Restricted owner permissions in custom applications For security reasons unrestricted access as an owner is only possible in the OLT portal If you develop custom applications you cant access endpoints related to user management even if your user has the owner role For more information see Developing Custom Applicationsapplications Inviting Users As the tenant owner create new users by inviting them to the tenant Prerequisites To be able to accept your invitation users must have created an account in the portal Procedure 1 If the user is new to the OLT platform ask the user to create an account to be able to accept the invitation To do so ask the user to go to httpsportallightelligenceio and choose Register 2 In the OLT portal choose Users 3 Choose Invite User 4 Enter data as required 5 To confirm choose Invite to tenant Result The invited user appears on the Pending tab The user receives an invitation email with a link directing to the OLT portal On logging on to the portal the user is asked to accept the invitation Assigning or Changing Roles As a user with the owner role assign roles to users or change the roles Procedure 1 As a user with owner authorization log on to the OLT portal 2 To edit the roles click the user You go to the Edit User window 3 Select the required roles and confirm"},{"href":"/users/roadmap","content":" title Roadmap description Run through the complete OLT life cycle and plan who is to perform which activities date 20190627 categories landscape keywords rolesapplications menu docs parent users weight 05 weight 05 sectionsweight 05 draft false toc true todo tbd tbd Outline the process to connect an IoT system landscape to the OLT platform With regard to roles todo TBD"},{"href":"/users/users_todos.txt","content":"creatingtenantsmd Info todo 2526 Tenant Name Indicate the location to be connected to the OLT plarform Northern plant for example VAT Registration Number Contact Person managingtenantsmd resjson thenjson consolelogjson The response should be similar to this meta page 0 pageSize 10 data id 546acca5796c4d489873cd5ae261098b name My Corporation role owner managingusersmd this is obsolete as of 20190 Q2 tenantusermanagementread is not available for custom apps so it can be done only in the portal Possibly in 2019 Q3 see app management Alternatively make a POST request to the tenantstenantIdinviteshttpsapilightelligenceiov1apicollectiontagusermanagementpaths1tenants1tenantId1invitespost endpoint Simon But How do I identify the UUID of roles I want to assign to a user which API call to use I cant identify an appropriate one "}]